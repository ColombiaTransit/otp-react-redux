{"version":3,"sources":["create-otp-reducer.js"],"names":["defaultConfig","autoPlan","debouncePlanTimeMs","realtimeEffectsDisplayThreshold","defaultQuery","routingType","queryParams","filter","qp","forEach","name","default","createOtpReducer","config","initialQuery","currentQuery","queryModes","mode","split","includes","m","concat","join","initialState","location","currentPosition","error","coords","fetching","sessionSearches","nearbyStops","searches","transitIndex","stops","trips","useRealtime","activeSearchId","overlay","bikeRental","stations","carRental","parkAndRide","locations","transit","transitive","zipcar","tnc","etaEstimates","rideEstimates","ui","mobileScreen","MobileScreens","WELCOME_SCREEN","printView","window","href","indexOf","diagramLeg","state","action","searchId","payload","type","activeItinerary","urlParams","length","ui_activeItinerary","$set","activeLeg","activeStep","pending","query","response","nonRealtimeResponse","index","console","log","$merge","map","initLat","lat","initLon","lon","initZoom","zoom","elevationPoint","mapPopupLocation","position","$unshift","stopLookup","s","id","stopId","routes","mainPanelContent","viewedStop","viewedTrip","viewedRoute","tripId","stopTimes","geometry","currentRouteIds","newRoutes","key","reduce","res","routeId","patterns","patternId","from","fromData","estimates","estimate","company","productId","estimateTimestamp","Date","rideEstimate","to","rideType"],"mappings":"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","file":"create-otp-reducer.js","sourcesContent":["import clone from 'clone'\nimport update from 'immutability-helper'\n\nimport queryParams from '../util/query-params'\nimport { ensureSingleAccessMode, getUrlParams } from '../util/query'\nimport { isTransit, getTransitModes } from '../util/itinerary'\nimport { filterProfileOptions } from '../util/profile'\nimport { MobileScreens } from '../actions/ui'\n\nconst defaultConfig = {\n  autoPlan: false,\n  debouncePlanTimeMs: 0,\n  realtimeEffectsDisplayThreshold: 120\n}\n\n// construct the initial/default query\nconst defaultQuery = { routingType: 'ITINERARY' }\nqueryParams.filter(qp => 'default' in qp).forEach(qp => {\n  defaultQuery[qp.name] = qp.default\n})\n\n// TODO: parse and merge URL query params w/ default query\n\n// TODO: fire planTrip action if default query is complete/error-free\n\nfunction createOtpReducer (config, initialQuery) {\n  // populate query by merging any provided query params w/ the default params\n  const currentQuery = Object.assign(defaultQuery, initialQuery)\n\n  let queryModes = currentQuery.mode.split(',')\n\n  // If 'TRANSIT' is included in the mode list, replace it with individual modes\n  if (queryModes.includes('TRANSIT')) {\n    // Isolate the non-transit modes in queryModes\n    queryModes = queryModes.filter(m => !isTransit(m))\n    // Add all possible transit modes\n    queryModes = queryModes.concat(getTransitModes(config))\n    // Stringify and set as OTP 'mode' query param\n    currentQuery.mode = queryModes.join(',')\n  }\n\n  // If we are in 'ITINERARY' mode, ensure that one and only one access mode is selected\n  if (currentQuery.routingType === 'ITINERARY') {\n    queryModes = ensureSingleAccessMode(queryModes)\n  }\n\n  const initialState = {\n    config: Object.assign(defaultConfig, config),\n    currentQuery,\n    location: {\n      currentPosition: {\n        error: null,\n        coords: null,\n        fetching: false\n      },\n      sessionSearches: [],\n      nearbyStops: []\n    },\n    searches: {},\n    transitIndex: {\n      stops: {},\n      trips: {}\n    },\n    useRealtime: true,\n    activeSearchId: 0,\n    overlay: {\n      bikeRental: {\n        stations: []\n      },\n      carRental: {\n        stations: []\n      },\n      parkAndRide: {\n        // null default value indicates no request for P&R list has been made\n        locations: null\n      },\n      transit: {\n        stops: []\n      },\n      transitive: null,\n      zipcar: {\n        locations: []\n      }\n    },\n    tnc: {\n      etaEstimates: {},\n      rideEstimates: {}\n    },\n    ui: {\n      mobileScreen: MobileScreens.WELCOME_SCREEN,\n      printView: window.location.href.indexOf('/print/') !== -1,\n      diagramLeg: null\n    }\n  }\n\n  return (state = initialState, action) => {\n    const searchId = action.payload && action.payload.searchId\n    switch (action.type) {\n      case 'ROUTING_REQUEST':\n        // Compute the initial activeItinerary. If this is the first search of\n        // session (i.e. searches lookup is empty/null) AND an activeItinerary ID\n        // is specified in URL parameters, use that ID. Otherwise, use null/0\n        let activeItinerary = state.currentQuery.routingType === 'ITINERARY' ? 0 : null\n        // We cannot use window.history.state here to check for the active\n        // itinerary param because it is unreliable in some states (e.g.,\n        // when the print layout component first loads).\n        const urlParams = getUrlParams()\n        if (\n          (!state.searches || Object.keys(state.searches).length === 0) &&\n          urlParams.ui_activeItinerary\n        ) {\n          activeItinerary = +urlParams.ui_activeItinerary\n        }\n\n        return update(state, {\n          searches: {\n            [searchId]: {\n              $set: {\n                activeItinerary,\n                activeLeg: null,\n                activeStep: null,\n                pending: true,\n                query: clone(state.currentQuery),\n                response: null\n              }\n            }\n          },\n          activeSearchId: { $set: searchId }\n        })\n      case 'ROUTING_ERROR':\n        return update(state, {\n          searches: {\n            [searchId]: {\n              response: {\n                $set: {\n                  error: action.payload.error\n                }\n              },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'ROUTING_RESPONSE':\n        const response = (state.currentQuery.routingType === 'PROFILE')\n          ? filterProfileOptions(action.payload.response)\n          : action.payload.response\n\n        return update(state, {\n          searches: {\n            [searchId]: {\n              response: { $set: response },\n              pending: { $set: false }\n            }\n          },\n          ui: {\n            diagramLeg: { $set: false }\n          }\n        })\n      case 'NON_REALTIME_ROUTING_RESPONSE':\n        return update(state, {\n          searches: {\n            [searchId]: {\n              nonRealtimeResponse: { $set: action.payload.response }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_REQUEST':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              pending: { $set: true },\n              error: { $set: null }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_ERROR':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              pending: { $set: false },\n              error: { $set: action.payload }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_RESPONSE':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              stations: { $set: action.payload.stations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'CAR_RENTAL_ERROR':\n        return update(state, {\n          overlay: {\n            carRental: {\n              pending: { $set: false },\n              error: { $set: action.payload }\n            }\n          }\n        })\n      case 'CAR_RENTAL_RESPONSE':\n        return update(state, {\n          overlay: {\n            carRental: {\n              stations: { $set: action.payload.stations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'SET_USE_REALTIME_RESPONSE':\n        return update(state, {\n          useRealtime: { $set: action.payload.useRealtime }\n        })\n      case 'SET_ACTIVE_ITINERARY':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeItinerary: { $set: action.payload.index },\n                activeLeg: { $set: null },\n                activeStep: { $set: null }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_ACTIVE_LEG':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeLeg: { $set: action.payload.index },\n                activeStep: { $set: null }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_ACTIVE_STEP':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeStep: { $set: action.payload.index }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_LOCATION':\n        return update(state, {\n          currentQuery: {\n            [action.payload.type]: { $set: action.payload.location }\n          }\n        })\n      case 'CLEAR_LOCATION':\n        return update(state, {\n          currentQuery: { [action.payload.type]: { $set: null } }\n        })\n\n      case 'SET_QUERY_PARAM':\n        console.log('merging QPs', action.payload)\n        return update(state, { currentQuery: { $merge: action.payload } })\n\n      case 'CLEAR_ACTIVE_SEARCH':\n        return update(state, { activeSearchId: { $set: null } })\n\n      case 'SET_AUTOPLAN':\n        return update(state, {\n          config: { autoPlan: { $set: action.payload.autoPlan } }\n        })\n      case 'SET_MAP_CENTER':\n        return update(state, {\n          config: {\n            map: {\n              initLat: { $set: action.payload.lat },\n              initLon: { $set: action.payload.lon }\n            }\n          }\n        })\n      case 'SET_MAP_ZOOM':\n        return update(state, {\n          config: {\n            map: {\n              initZoom: { $set: action.payload.zoom }\n            }\n          }\n        })\n      case 'SHOW_LEG_DIAGRAM':\n        return update(state, {\n          ui: {\n            diagramLeg: { $set: action.payload }\n          }\n        })\n      case 'SET_ELEVATION_POINT':\n        return update(state, {\n          ui: {\n            elevationPoint: { $set: action.payload }\n          }\n        })\n      case 'SET_MAP_POPUP_LOCATION':\n        return update(state, {\n          ui: {\n            mapPopupLocation: { $set: action.payload.location }\n          }\n        })\n      case 'POSITION_FETCHING':\n        return update(state, {\n          location: {\n            currentPosition: { $merge: { fetching: action.payload.type } }\n          }\n        })\n      case 'POSITION_ERROR':\n        return update(state, {\n          location: { currentPosition: { $set: action.payload } }\n        })\n      case 'POSITION_RESPONSE':\n        return update(state, {\n          location: { currentPosition: { $set: action.payload.position } }\n        })\n      case 'ADD_LOCATION_SEARCH':\n        return update(state, {\n          location: { sessionSearches: { $unshift: [action.payload.location] } }\n        })\n\n      case 'NEARBY_STOPS_RESPONSE':\n        const stopLookup = {}\n        action.payload.stops.forEach(s => {\n          stopLookup[s.id] = s\n        })\n        return update(state, {\n          location: {\n            nearbyStops: { $set: action.payload.stops.map(s => s.id) }\n          },\n          transitIndex: { stops: { $merge: stopLookup } }\n        })\n      case 'STOPS_WITHIN_BBOX_RESPONSE':\n        return update(state, {\n          overlay: {\n            transit: {\n              stops: { $set: action.payload.stops },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'CLEAR_STOPS_OVERLAY':\n        return update(state, {\n          overlay: {\n            transit: {\n              stops: { $set: [] },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'ROUTES_AT_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: {\n              [action.payload.stopId]: {\n                routes: { $set: action.payload.routes }\n              }\n            }\n          }\n        })\n      case 'SET_MOBILE_SCREEN':\n        return update(state, { ui: { mobileScreen: { $set: action.payload } } })\n      case 'SET_MAIN_PANEL_CONTENT':\n        return update(state, {\n          ui: { mainPanelContent: { $set: action.payload } }\n        })\n      case 'SET_VIEWED_STOP':\n        return update(state, { ui: { viewedStop: { $set: action.payload } } })\n      case 'CLEAR_VIEWED_STOP':\n        return update(state, { ui: { viewedStop: { $set: null } } })\n\n      case 'SET_VIEWED_TRIP':\n        return update(state, { ui: { viewedTrip: { $set: action.payload } } })\n      case 'CLEAR_VIEWED_TRIP':\n        return update(state, { ui: { viewedTrip: { $set: null } } })\n\n      case 'SET_VIEWED_ROUTE':\n        return update(state, { ui: { viewedRoute: { $set: action.payload } } })\n\n      case 'FIND_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n      case 'FIND_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n      case 'FIND_STOPS_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: { stops: { $set: action.payload.stops } }\n            }\n          }\n        })\n      case 'FIND_STOP_TIMES_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: {\n                stopTimes: { $set: action.payload.stopTimes }\n              }\n            }\n          }\n        })\n      case 'FIND_GEOMETRY_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: {\n                geometry: { $set: action.payload.geometry }\n              }\n            }\n          }\n        })\n      case 'FIND_STOP_TIMES_FOR_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: {\n              [action.payload.stopId]: {\n                stopTimes: { $set: action.payload.stopTimes }\n              }\n            }\n          }\n        })\n\n      case 'FIND_ROUTES_RESPONSE':\n        // If routes is undefined, initialize it w/ the full payload\n        if (!state.transitIndex.routes) {\n          return update(state, {\n            transitIndex: { routes: { $set: action.payload } }\n          })\n        }\n        // Otherwise, merge in only the routes not already defined\n        const currentRouteIds = Object.keys(state.transitIndex.routes)\n        const newRoutes = Object.keys(action.payload)\n          .filter(key => !currentRouteIds.includes(key))\n          .reduce((res, key) => Object.assign(res, { [key]: action.payload[key] }), {})\n        return update(state, {\n          transitIndex: { routes: { $merge: newRoutes } }\n        })\n\n      case 'FIND_ROUTE_RESPONSE':\n        // If routes is undefined, initialize it w/ this route only\n        if (!state.transitIndex.routes) {\n          return update(state, {\n            transitIndex: { routes: { $set: { [action.payload.id]: action.payload } } }\n          })\n        }\n        // Otherwise, overwrite only this route\n        return update(state, {\n          transitIndex: {\n            routes: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n\n      case 'FIND_PATTERNS_FOR_ROUTE_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            routes: {\n              [action.payload.routeId]: {\n                patterns: { $set: action.payload.patterns }\n              }\n            }\n          }\n        })\n      case 'FIND_GEOMETRY_FOR_PATTERN_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            routes: {\n              [action.payload.routeId]: {\n                patterns: {\n                  [action.payload.patternId]: {\n                    geometry: { $set: action.payload.geometry }\n                  }\n                }\n              }\n            }\n          }\n        })\n      case 'TNC_ETA_RESPONSE':\n        return update(state, {\n          tnc: {\n            etaEstimates: {\n              [action.payload.from]: fromData => {\n                fromData = Object.assign({}, fromData)\n                const estimates = action.payload.estimates || []\n                estimates.forEach(estimate => {\n                  if (!fromData[estimate.company]) {\n                    fromData[estimate.company] = {}\n                  }\n                  fromData[estimate.company][estimate.productId] = Object.assign(\n                    {\n                      estimateTimestamp: new Date()\n                    },\n                    estimate\n                  )\n                })\n                return fromData\n              }\n            }\n          }\n        })\n      case 'TNC_RIDE_RESPONSE':\n        return update(state, {\n          tnc: {\n            rideEstimates: {\n              [action.payload.from]: fromData => {\n                fromData = Object.assign({}, fromData)\n                const {company, rideEstimate, to} = action.payload\n                if (!rideEstimate) {\n                  return fromData\n                }\n                if (!fromData[to]) {\n                  fromData[to] = {}\n                }\n                if (!fromData[to][company]) {\n                  fromData[to][company] = {}\n                }\n                fromData[to][company][rideEstimate.rideType] = Object.assign(\n                  {\n                    estimateTimestamp: new Date()\n                  },\n                  rideEstimate\n                )\n                return fromData\n              }\n            }\n          }\n        })\n\n      case 'PARK_AND_RIDE_RESPONSE':\n        return update(state, {\n          overlay: {\n            parkAndRide: {\n              locations: { $set: action.payload },\n              pending: { $set: false }\n            }\n          }\n        })\n\n      // TODO: can this be broken out into a separate module?\n      case 'ZIPCAR_LOCATIONS_RESPONSE':\n        return update(state, {\n          overlay: {\n            zipcar: {\n              locations: { $set: action.payload.locations },\n              pending: { $set: false }\n            }\n          }\n        })\n      // case 'INITIALIZE_TRANSITIVE':\n      //   const transitive = new Transitive({\n      //     data: action.payload.transitiveData,\n      //     initialBounds: action.payload.bounds,\n      //     zoomEnabled: false,\n      //     autoResize: false,\n      //     styles: require('./transitive-styles'),\n      //     zoomFactors,\n      //     display: 'canvas',\n      //     canvas\n      //   })\n      //   return update(state, {\n      //     overlay: {\n      //       transitive: { $set: }\n      //     }\n      //   })\n      default:\n        return state\n    }\n  }\n}\n\nexport default createOtpReducer\n"]}