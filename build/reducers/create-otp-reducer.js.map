{"version":3,"sources":["create-otp-reducer.js"],"names":["coreUtils","itinerary","isTransit","getTransitModes","matchLatLon","map","filterProfileOptions","profile","query","ensureSingleAccessMode","getDefaultQuery","getTripOptionsFromQuery","storage","getItem","removeItem","storeItem","getUserTimezone","time","MAX_RECENT_STORAGE","validateInitalState","initialState","config","errors","objectPath","get","push","Error","length","reduce","message","error","getInitialState","userDefinedConfig","initialQuery","defaultConfig","autoPlan","debouncePlanTimeMs","language","transitOperators","realtimeEffectsDisplayThreshold","routingTypes","stopViewer","numberOfDepartures","timeRange","Object","assign","homeTimezone","console","warn","userOverrides","defaults","autoRefreshStopTimes","home","work","trackRecent","recentPlaces","favoriteStops","recentSearches","locations","filter","p","currentQuery","l","type","queryModes","mode","split","includes","m","concat","join","routingType","location","currentPosition","coords","fetching","sessionSearches","nearbyStops","user","searches","transitIndex","stops","trips","useRealtime","activeSearchId","overlay","bikeRental","stations","carRental","parkAndRide","transit","transitive","vehicleRental","zipcar","tnc","etaEstimates","rideEstimates","ui","mobileScreen","MobileScreens","WELCOME_SCREEN","printView","window","href","indexOf","diagramLeg","createOtpReducer","state","action","searchId","payload","activeItinerary","$set","activeLeg","activeStep","pending","response","nonRealtimeResponse","index","locationType","$merge","removeIndex","findIndex","id","splice","$splice","sortedPlaces","sort","a","b","timestamp","name","lat","lon","stop","icon","alert","s","unshift","duplicateIndex","sortedSearches","initLat","initLon","initZoom","zoom","routerId","api","path","elevationPoint","mapPopupLocation","position","$unshift","stopLookup","forEach","stopId","routes","mainPanelContent","MainPanelContent","STOP_VIEWER","viewedStop","viewedTrip","ROUTE_VIEWER","viewedRoute","tripId","stopTimes","geometry","stopTimesLastUpdated","Date","getTime","currentRouteIds","keys","newRoutes","key","res","patterns","routeId","patternId","from","fromData","estimates","estimate","company","productId","estimateTimestamp","rideEstimate","to","rideType","mapOverlays","overlays","find","o","visible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;2BAEuCA,mBAAUC,S;IAAzCC,S,wBAAAA,S;IAAWC,e,wBAAAA,e;IACXC,W,GAAgBJ,mBAAUK,G,CAA1BD,W;IACAE,oB,GAAyBN,mBAAUO,O,CAAnCD,oB;uBAKJN,mBAAUQ,K;IAHZC,sB,oBAAAA,sB;IACAC,e,oBAAAA,e;IACAC,uB,oBAAAA,uB;yBAEyCX,mBAAUY,O;IAA7CC,O,sBAAAA,O;IAASC,U,sBAAAA,U;IAAYC,S,sBAAAA,S;IACrBC,e,GAAoBhB,mBAAUiB,I,CAA9BD,e;AAER,IAAME,kBAAkB,GAAG,CAA3B,C,CAEA;;AAEA;;;;;;;;AAOA,SAASC,mBAAT,CAA8BC,YAA9B,EAA4C;AAAA,MACnCC,MADmC,GACzBD,YADyB,CACnCC,MADmC;AAG1C,MAAMC,MAAM,GAAG,EAAf,CAH0C,CAK1C;AACA;AACA;AACA;;AACA,MACEC,oBAAWC,GAAX,CAAeH,MAAf,EAAuB,qBAAvB,KACAE,oBAAWC,GAAX,CAAeH,MAAf,EAAuB,sBAAvB,MAAmD,cADnD,IAEAE,oBAAWC,GAAX,CAAeH,MAAf,EAAuB,eAAvB,MAA4C,QAH9C,EAIE;AACAC,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAIC,KAAJ,CAAU,mFAAV,CAAZ;AACD;;AAED,MAAIJ,MAAM,CAACK,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAM,IAAID,KAAJ,CACJJ,MAAM,CAACM,MAAP,CACE,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAClB,uBAAUD,OAAV,iBAAwBC,KAAK,CAACD,OAA9B;AACD,KAHH,EAIE,iDAJF,CADI,CAAN;AAQD;AACF;AAED;;;;;;AAIO,SAASE,eAAT,CAA0BC,iBAA1B,EAA6CC,YAA7C,EAA2D;AAChE,MAAMC,aAAa,GAAG;AACpBC,IAAAA,QAAQ,EAAE,KADU;AAEpBC,IAAAA,kBAAkB,EAAE,CAFA;AAGpBC,IAAAA,QAAQ,EAAE,EAHU;AAIpBC,IAAAA,gBAAgB,EAAE,EAJE;AAKpBC,IAAAA,+BAA+B,EAAE,GALb;AAMpBC,IAAAA,YAAY,EAAE,EANM;AAOpBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,kBAAkB,EAAE,CADV;AACa;AACvB;AACA;AACA;AACAC,MAAAA,SAAS,EAAE,MALD,CAKQ;;AALR;AAPQ,GAAtB;AAgBA,MAAMtB,MAAM,GAAGuB,MAAM,CAACC,MAAP,CAAcX,aAAd,EAA6BF,iBAA7B,CAAf;;AAEA,MAAI,CAACX,MAAM,CAACyB,YAAZ,EAA0B;AACxBzB,IAAAA,MAAM,CAACyB,YAAP,GAAsB9B,eAAe,EAArC;AACA+B,IAAAA,OAAO,CAACC,IAAR,qQAI+B3B,MAAM,CAACyB,YAJtC;AAOD,GA5B+D,CA8BhE;AACA;AACA;AACA;;;AACA,MAAMG,aAAa,GAAGpC,OAAO,CAAC,cAAD,EAAiB,EAAjB,CAA7B,CAlCgE,CAmChE;;AACA,MAAMqC,QAAQ,GAAGN,MAAM,CAACC,MAAP,CAAcnC,eAAe,CAACW,MAAD,CAA7B,EAAuC4B,aAAvC,CAAjB,CApCgE,CAqChE;;AACA,MAAME,oBAAoB,GAAGtC,OAAO,CAAC,sBAAD,EAAyB,IAAzB,CAApC,CAtCgE,CAuChE;;AACA,MAAMuC,IAAI,GAAGvC,OAAO,CAAC,MAAD,CAApB;AACA,MAAMwC,IAAI,GAAGxC,OAAO,CAAC,MAAD,CAApB,CAzCgE,CA0ChE;;AACA,MAAMyC,WAAW,GAAGzC,OAAO,CAAC,aAAD,EAAgB,KAAhB,CAA3B,CA3CgE,CA4ChE;;AACA,MAAM0C,YAAY,GAAG1C,OAAO,CAAC,QAAD,EAAW,EAAX,CAA5B,CA7CgE,CA8ChE;;AACA,MAAM2C,aAAa,GAAG3C,OAAO,CAAC,eAAD,EAAkB,EAAlB,CAA7B,CA/CgE,CAgDhE;;AACA,MAAM4C,cAAc,GAAG5C,OAAO,CAAC,gBAAD,EAAmB,EAAnB,CAA9B,CAjDgE,CAkDhE;;AACA,MAAM6C,SAAS,GAAG,CAACN,IAAD,EAAOC,IAAP,EAAaM,MAAb,CAAoB,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAArB,CAAlB,CAnDgE,CAoDhE;AAEA;;AACA,MAAMC,YAAY,GAAGjB,MAAM,CAACC,MAAP,CAAcK,QAAd,EAAwBjB,YAAxB,CAArB,CAvDgE,CAwDhE;;AACA,MAAIZ,MAAM,CAACqC,SAAX,EAAsB;AACpBA,IAAAA,SAAS,CAACjC,IAAV,OAAAiC,SAAS,qBAASrC,MAAM,CAACqC,SAAP,CAAiBrD,GAAjB,CAAqB,UAAAyD,CAAC;AAAA,+BAAUA,CAAV;AAAaC,QAAAA,IAAI,EAAE;AAAnB;AAAA,KAAtB,CAAT,EAAT;AACD;;AACD,MAAIC,UAAU,GAAGH,YAAY,CAACI,IAAb,CAAkBC,KAAlB,CAAwB,GAAxB,CAAjB,CA5DgE,CA8DhE;;AACA,MAAIF,UAAU,CAACG,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAClC;AACAH,IAAAA,UAAU,GAAGA,UAAU,CAACL,MAAX,CAAkB,UAAAS,CAAC;AAAA,aAAI,CAAClE,SAAS,CAACkE,CAAD,CAAd;AAAA,KAAnB,CAAb,CAFkC,CAGlC;;AACAJ,IAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkBlE,eAAe,CAACkB,MAAD,CAAjC,CAAb,CAJkC,CAKlC;;AACAwC,IAAAA,YAAY,CAACI,IAAb,GAAoBD,UAAU,CAACM,IAAX,CAAgB,GAAhB,CAApB;AACD,GAtE+D,CAwEhE;;;AACA,MAAIT,YAAY,CAACU,WAAb,KAA6B,WAAjC,EAA8C;AAC5CP,IAAAA,UAAU,GAAGvD,sBAAsB,CAACuD,UAAD,CAAnC;AACD;;AAED,SAAO;AACL3C,IAAAA,MAAM,EAANA,MADK;AAELwC,IAAAA,YAAY,EAAZA,YAFK;AAGLW,IAAAA,QAAQ,EAAE;AACRC,MAAAA,eAAe,EAAE;AACf3C,QAAAA,KAAK,EAAE,IADQ;AAEf4C,QAAAA,MAAM,EAAE,IAFO;AAGfC,QAAAA,QAAQ,EAAE;AAHK,OADT;AAMRC,MAAAA,eAAe,EAAE,EANT;AAORC,MAAAA,WAAW,EAAE;AAPL,KAHL;AAYLC,IAAAA,IAAI,EAAE;AACJ3B,MAAAA,oBAAoB,EAApBA,oBADI;AAEJ;AACAD,MAAAA,QAAQ,EAAEvC,uBAAuB,CAACuC,QAAD,CAH7B;AAIJM,MAAAA,aAAa,EAAbA,aAJI;AAKJF,MAAAA,WAAW,EAAXA,WALI;AAMJI,MAAAA,SAAS,EAATA,SANI;AAOJH,MAAAA,YAAY,EAAZA,YAPI;AAQJE,MAAAA,cAAc,EAAdA;AARI,KAZD;AAsBLsB,IAAAA,QAAQ,EAAE,EAtBL;AAuBLC,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE,EADK;AAEZC,MAAAA,KAAK,EAAE;AAFK,KAvBT;AA2BLC,IAAAA,WAAW,EAAE,IA3BR;AA4BLC,IAAAA,cAAc,EAAE,CA5BX;AA6BLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE;AADA,OADL;AAIPC,MAAAA,SAAS,EAAE;AACTD,QAAAA,QAAQ,EAAE;AADD,OAJJ;AAOPE,MAAAA,WAAW,EAAE;AACX;AACA/B,QAAAA,SAAS,EAAE;AAFA,OAPN;AAWPgC,MAAAA,OAAO,EAAE;AACPT,QAAAA,KAAK,EAAE;AADA,OAXF;AAcPU,MAAAA,UAAU,EAAE,IAdL;AAePC,MAAAA,aAAa,EAAE;AACbL,QAAAA,QAAQ,EAAE;AADG,OAfR;AAkBPM,MAAAA,MAAM,EAAE;AACNnC,QAAAA,SAAS,EAAE;AADL;AAlBD,KA7BJ;AAmDLoC,IAAAA,GAAG,EAAE;AACHC,MAAAA,YAAY,EAAE,EADX;AAEHC,MAAAA,aAAa,EAAE;AAFZ,KAnDA;AAuDLC,IAAAA,EAAE,EAAE;AACFC,MAAAA,YAAY,EAAEC,kBAAcC,cAD1B;AAEFC,MAAAA,SAAS,EAAEC,MAAM,CAAC9B,QAAP,CAAgB+B,IAAhB,CAAqBC,OAArB,CAA6B,SAA7B,MAA4C,CAAC,CAFtD;AAGFC,MAAAA,UAAU,EAAE;AAHV;AAvDC,GAAP;AA6DD;;AAED,SAASC,gBAAT,CAA2BrF,MAA3B,EAAmCY,YAAnC,EAAiD;AAC/C,MAAMb,YAAY,GAAGW,eAAe,CAACV,MAAD,EAASY,YAAT,CAApC,CAD+C,CAG/C;;AACAd,EAAAA,mBAAmB,CAACC,YAAD,CAAnB;AAEA,SAAO,YAAkC;AAAA,QAAjCuF,KAAiC,uEAAzBvF,YAAyB;AAAA,QAAXwF,MAAW;AACvC,QAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACE,OAAP,CAAeD,QAAlD;;AACA,YAAQD,MAAM,CAAC7C,IAAf;AACE,WAAK,iBAAL;AAAA,YACUgD,eADV,GAC8BH,MAAM,CAACE,OADrC,CACUC,eADV;AAEE,eAAO,iCAAOJ,KAAP,EAAc;AACnB5B,UAAAA,QAAQ,sBACL8B,QADK,EACM;AACVG,YAAAA,IAAI,EAAE;AACJD,cAAAA,eAAe,EAAfA,eADI;AAEJE,cAAAA,SAAS,EAAE,IAFP;AAGJC,cAAAA,UAAU,EAAE,IAHR;AAIJC,cAAAA,OAAO,EAAE,IAJL;AAKJ3G,cAAAA,KAAK,EAAE,oBAAMmG,KAAK,CAAC9C,YAAZ,CALH;AAMJuD,cAAAA,QAAQ,EAAE;AANN;AADI,WADN,CADW;AAanBhC,UAAAA,cAAc,EAAE;AAAE4B,YAAAA,IAAI,EAAEH;AAAR;AAbG,SAAd,CAAP;;AAeF,WAAK,eAAL;AACE,eAAO,iCAAOF,KAAP,EAAc;AACnB5B,UAAAA,QAAQ,sBACL8B,QADK,EACM;AACVO,YAAAA,QAAQ,EAAE;AACRJ,cAAAA,IAAI,EAAE;AACJlF,gBAAAA,KAAK,EAAE8E,MAAM,CAACE,OAAP,CAAehF;AADlB;AADE,aADA;AAMVqF,YAAAA,OAAO,EAAE;AAAEH,cAAAA,IAAI,EAAE;AAAR;AANC,WADN;AADW,SAAd,CAAP;;AAYF,WAAK,kBAAL;AACE,YAAMI,QAAQ,GAAIT,KAAK,CAAC9C,YAAN,CAAmBU,WAAnB,KAAmC,SAApC,GACbjE,oBAAoB,CAACsG,MAAM,CAACE,OAAP,CAAeM,QAAhB,CADP,GAEbR,MAAM,CAACE,OAAP,CAAeM,QAFnB;AAIA,eAAO,iCAAOT,KAAP,EAAc;AACnB5B,UAAAA,QAAQ,sBACL8B,QADK,EACM;AACVO,YAAAA,QAAQ,EAAE;AAAEJ,cAAAA,IAAI,EAAEI;AAAR,aADA;AAEVD,YAAAA,OAAO,EAAE;AAAEH,cAAAA,IAAI,EAAE;AAAR;AAFC,WADN,CADW;AAOnBf,UAAAA,EAAE,EAAE;AACFQ,YAAAA,UAAU,EAAE;AAAEO,cAAAA,IAAI,EAAE;AAAR;AADV;AAPe,SAAd,CAAP;;AAWF,WAAK,+BAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnB5B,UAAAA,QAAQ,sBACL8B,QADK,EACM;AACVQ,YAAAA,mBAAmB,EAAE;AAAEL,cAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeM;AAAvB;AADX,WADN;AADW,SAAd,CAAP;;AAOF,WAAK,qBAAL;AACE,eAAO,iCAAOT,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPC,YAAAA,UAAU,EAAE;AACV6B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR,eADC;AAEVlF,cAAAA,KAAK,EAAE;AAAEkF,gBAAAA,IAAI,EAAE;AAAR;AAFG;AADL;AADU,SAAd,CAAP;;AAQF,WAAK,mBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPC,YAAAA,UAAU,EAAE;AACV6B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR,eADC;AAEVlF,cAAAA,KAAK,EAAE;AAAEkF,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAFG;AADL;AADU,SAAd,CAAP;;AAQF,WAAK,sBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPC,YAAAA,UAAU,EAAE;AACVC,cAAAA,QAAQ,EAAE;AAAEyB,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAevB;AAAvB,eADA;AAEV4B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFC;AADL;AADU,SAAd,CAAP;;AAQF,WAAK,kBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPG,YAAAA,SAAS,EAAE;AACT2B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR,eADA;AAETlF,cAAAA,KAAK,EAAE;AAAEkF,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAFE;AADJ;AADU,SAAd,CAAP;;AAQF,WAAK,qBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPG,YAAAA,SAAS,EAAE;AACTD,cAAAA,QAAQ,EAAE;AAAEyB,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAevB;AAAvB,eADD;AAET4B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFA;AADJ;AADU,SAAd,CAAP;;AAQF,WAAK,sBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPO,YAAAA,aAAa,EAAE;AACbuB,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR,eADI;AAEblF,cAAAA,KAAK,EAAE;AAAEkF,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAFM;AADR;AADU,SAAd,CAAP;;AAQF,WAAK,yBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPO,YAAAA,aAAa,EAAE;AACbL,cAAAA,QAAQ,EAAE;AAAEyB,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAevB;AAAvB,eADG;AAEb4B,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFI;AADR;AADU,SAAd,CAAP;;AAQF,WAAK,2BAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBxB,UAAAA,WAAW,EAAE;AAAE6B,YAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe3B;AAAvB;AADM,SAAd,CAAP;;AAGF,WAAK,sBAAL;AACE,YAAIwB,KAAK,CAACvB,cAAN,KAAyB,IAA7B,EAAmC;AACjC,iBAAO,iCAAOuB,KAAP,EAAc;AACnB5B,YAAAA,QAAQ,sBACL4B,KAAK,CAACvB,cADD,EACkB;AACtB2B,cAAAA,eAAe,EAAE;AAAEC,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeQ;AAAvB,eADK;AAEtBL,cAAAA,SAAS,EAAE;AAAED,gBAAAA,IAAI,EAAE;AAAR,eAFW;AAGtBE,cAAAA,UAAU,EAAE;AAAEF,gBAAAA,IAAI,EAAE;AAAR;AAHU,aADlB;AADW,WAAd,CAAP;AASD;;AACD,eAAOL,KAAP;;AACF,WAAK,gBAAL;AACE,YAAIA,KAAK,CAACvB,cAAN,KAAyB,IAA7B,EAAmC;AACjC,iBAAO,iCAAOuB,KAAP,EAAc;AACnB5B,YAAAA,QAAQ,sBACL4B,KAAK,CAACvB,cADD,EACkB;AACtB6B,cAAAA,SAAS,EAAE;AAAED,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeQ;AAAvB,eADW;AAEtBJ,cAAAA,UAAU,EAAE;AAAEF,gBAAAA,IAAI,EAAE;AAAR;AAFU,aADlB;AADW,WAAd,CAAP;AAQD;;AACD,eAAOL,KAAP;;AACF,WAAK,iBAAL;AACE,YAAIA,KAAK,CAACvB,cAAN,KAAyB,IAA7B,EAAmC;AACjC,iBAAO,iCAAOuB,KAAP,EAAc;AACnB5B,YAAAA,QAAQ,sBACL4B,KAAK,CAACvB,cADD,EACkB;AACtB8B,cAAAA,UAAU,EAAE;AAAEF,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeQ;AAAvB;AADU,aADlB;AADW,WAAd,CAAP;AAOD;;AACD,eAAOX,KAAP;;AACF,WAAK,cAAL;AACE,eAAO,iCAAOA,KAAP,EAAc;AACnB9C,UAAAA,YAAY,sBACT+C,MAAM,CAACE,OAAP,CAAeS,YADN,EACqB;AAAEP,YAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAetC;AAAvB,WADrB;AADO,SAAd,CAAP;;AAKF,WAAK,gBAAL;AACE,eAAO,iCAAOmC,KAAP,EAAc;AACnB9C,UAAAA,YAAY,sBAAK+C,MAAM,CAACE,OAAP,CAAeS,YAApB,EAAmC;AAAEP,YAAAA,IAAI,EAAE;AAAR,WAAnC;AADO,SAAd,CAAP;;AAIF,WAAK,iBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AAAE9C,UAAAA,YAAY,EAAE;AAAE2D,YAAAA,MAAM,EAAEZ,MAAM,CAACE;AAAjB;AAAhB,SAAd,CAAP;;AAEF,WAAK,qBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AAAEvB,UAAAA,cAAc,EAAE;AAAE4B,YAAAA,IAAI,EAAE;AAAR;AAAlB,SAAd,CAAP;;AACF,WAAK,mBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AAAEvB,UAAAA,cAAc,EAAE;AAAE4B,YAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAlB,SAAd,CAAP;;AACF,WAAK,wBAAL;AACEhG,QAAAA,UAAU,CAAC,cAAD,CAAV;AACA,eAAO,iCAAO6F,KAAP,EAAc;AAAE7B,UAAAA,IAAI,EAAE;AAAE5B,YAAAA,QAAQ,EAAE;AAAE8D,cAAAA,IAAI,EAAE;AAAR;AAAZ;AAAR,SAAd,CAAP;;AACF,WAAK,wBAAL;AACEjG,QAAAA,SAAS,CAAC,cAAD,EAAiB6F,MAAM,CAACE,OAAxB,CAAT;AACA,eAAO,iCAAOH,KAAP,EAAc;AAAE7B,UAAAA,IAAI,EAAE;AAAE5B,YAAAA,QAAQ,EAAE;AAAE8D,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAZ;AAAR,SAAd,CAAP;;AACF,WAAK,cAAL;AAAqB;AACnB;AACA;AACA,cAAIF,MAAM,CAACE,OAAP,CAAeN,OAAf,CAAuB,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,gBAAMjD,YAAY,GAAG,oBAAMoD,KAAK,CAAC7B,IAAN,CAAWvB,YAAjB,CAArB,CAD2C,CAE3C;;AACA,gBAAMkE,WAAW,GAAGlE,YAAY,CAACmE,SAAb,CAAuB,UAAA5D,CAAC;AAAA,qBAAIA,CAAC,CAAC6D,EAAF,KAASf,MAAM,CAACE,OAApB;AAAA,aAAxB,CAApB;AACAvD,YAAAA,YAAY,CAACqE,MAAb,CAAoBH,WAApB,EAAiC,CAAjC;AACA1G,YAAAA,SAAS,CAAC,QAAD,EAAWwC,YAAX,CAAT;AACA,mBAAOkE,WAAW,KAAK,CAAC,CAAjB,GACH,iCAAOd,KAAP,EAAc;AAAE7B,cAAAA,IAAI,EAAE;AAAEvB,gBAAAA,YAAY,EAAE;AAAEsE,kBAAAA,OAAO,EAAE,CAAC,CAACJ,WAAD,EAAc,CAAd,CAAD;AAAX;AAAhB;AAAR,aAAd,CADG,GAEHd,KAFJ;AAGD,WATD,MASO;AACL,gBAAMjD,SAAS,GAAG,oBAAMiD,KAAK,CAAC7B,IAAN,CAAWpB,SAAjB,CAAlB;;AACA,gBAAM+D,YAAW,GAAG/D,SAAS,CAACgE,SAAV,CAAoB,UAAA5D,CAAC;AAAA,qBAAIA,CAAC,CAAC6D,EAAF,KAASf,MAAM,CAACE,OAApB;AAAA,aAArB,CAApB;;AACAhG,YAAAA,UAAU,CAAC8F,MAAM,CAACE,OAAR,CAAV;AACA,mBAAOW,YAAW,KAAK,CAAC,CAAjB,GACH,iCAAOd,KAAP,EAAc;AAAE7B,cAAAA,IAAI,EAAE;AAAEpB,gBAAAA,SAAS,EAAE;AAAEmE,kBAAAA,OAAO,EAAE,CAAC,CAACJ,YAAD,EAAc,CAAd,CAAD;AAAX;AAAb;AAAR,aAAd,CADG,GAEHd,KAFJ;AAGD;AACF;;AACD,WAAK,gBAAL;AAAuB;AAAA,gCACMC,MAAM,CAACE,OADb;AAAA,cACbtC,QADa,mBACbA,QADa;AAAA,cACHT,IADG,mBACHA,IADG;;AAErB,kBAAQA,IAAR;AACE,iBAAK,QAAL;AAAe;AACb,oBAAMR,aAAY,GAAG,oBAAMoD,KAAK,CAAC7B,IAAN,CAAWvB,YAAjB,CAArB;;AACA,oBAAM+D,KAAK,GAAG/D,aAAY,CAACmE,SAAb,CAAuB,UAAA5D,CAAC;AAAA,yBAAI1D,WAAW,CAAC0D,CAAD,EAAIU,QAAJ,CAAf;AAAA,iBAAxB,CAAd,CAFa,CAGb;;;AACA,oBAAI8C,KAAK,KAAK,CAAC,CAAf,EAAkB/D,aAAY,CAACqE,MAAb,CAAoBN,KAApB,EAA2B,CAA3B,EAA8B9C,QAA9B,EAAlB,KACKjB,aAAY,CAAC9B,IAAb,CAAkB+C,QAAlB;;AACL,oBAAMsD,YAAY,GAAGvE,aAAY,CAACwE,IAAb,CAAkB,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAA1B;AAAA,iBAAlB,CAArB,CANa,CAOb;AACA;;;AACA,oBAAI3E,aAAY,CAAC5B,MAAb,IAAuBT,kBAA3B,EAA+C;AAC7C4G,kBAAAA,YAAY,CAACF,MAAb,CAAoB1G,kBAApB;AACD;;AACDH,gBAAAA,SAAS,CAAC,QAAD,EAAWwC,aAAX,CAAT;AACA,uBAAO,iCAAOoD,KAAP,EAAc;AAAE7B,kBAAAA,IAAI,EAAE;AAAEvB,oBAAAA,YAAY,EAAE;AAAEyD,sBAAAA,IAAI,EAAEc;AAAR;AAAhB;AAAR,iBAAd,CAAP;AACD;;AACD;AAAS;AACP,oBAAMpE,UAAS,GAAG,oBAAMiD,KAAK,CAAC7B,IAAN,CAAWpB,SAAjB,CAAlB,CADO,CAEP;;;AACA,oBAAM4D,MAAK,GAAG5D,UAAS,CAACgE,SAAV,CAAoB,UAAA5D,CAAC;AAAA,yBAAIA,CAAC,CAACC,IAAF,KAAWA,IAAf;AAAA,iBAArB,CAAd;;AACA,oBAAIuD,MAAK,KAAK,CAAC,CAAf,EAAkB5D,UAAS,CAACkE,MAAV,CAAiBN,MAAjB,EAAwB,CAAxB,EAA2B9C,QAA3B,EAAlB,KACKd,UAAS,CAACjC,IAAV,CAAe+C,QAAf;AACLzD,gBAAAA,SAAS,CAACgD,IAAD,EAAOS,QAAP,CAAT;AACA,uBAAO,iCAAOmC,KAAP,EAAc;AAAE7B,kBAAAA,IAAI,EAAE;AAAEpB,oBAAAA,SAAS,EAAE;AAAEsD,sBAAAA,IAAI,EAAEtD;AAAR;AAAb;AAAR,iBAAd,CAAP;AACD;AAxBH;AA0BD;;AACD,WAAK,aAAL;AAAoB;AAClB;AACA,cAAMF,aAAa,GAAG,oBAAMmD,KAAK,CAAC7B,IAAN,CAAWtB,aAAjB,CAAtB,CAFkB,CAGlB;;AACA,cAAMiE,aAAW,GAAGjE,aAAa,CAACkE,SAAd,CAAwB,UAAA5D,CAAC;AAAA,mBAAIA,CAAC,CAAC6D,EAAF,KAASf,MAAM,CAACE,OAApB;AAAA,WAAzB,CAApB;;AACAtD,UAAAA,aAAa,CAACoE,MAAd,CAAqBH,aAArB,EAAkC,CAAlC;AACA1G,UAAAA,SAAS,CAAC,eAAD,EAAkByC,aAAlB,CAAT;AACA,iBAAOiE,aAAW,KAAK,CAAC,CAAjB,GACH,iCAAOd,KAAP,EAAc;AAAE7B,YAAAA,IAAI,EAAE;AAAEtB,cAAAA,aAAa,EAAE;AAAEqE,gBAAAA,OAAO,EAAE,CAAC,CAACJ,aAAD,EAAc,CAAd,CAAD;AAAX;AAAjB;AAAR,WAAd,CADG,GAEHd,KAFJ;AAGD;;AACD,WAAK,eAAL;AAAsB;AACpB;AACA;AAFoB,iCAGWC,MAAM,CAACE,OAHlB;AAAA,cAGZa,EAHY,oBAGZA,EAHY;AAAA,cAGRQ,IAHQ,oBAGRA,IAHQ;AAAA,cAGFC,GAHE,oBAGFA,GAHE;AAAA,cAGGC,GAHH,oBAGGA,GAHH;AAIpB,cAAMC,IAAI,GAAG;AACXvE,YAAAA,IAAI,EAAE,MADK;AAEXwE,YAAAA,IAAI,EAAE,KAFK;AAGXZ,YAAAA,EAAE,EAAFA,EAHW;AAIXQ,YAAAA,IAAI,EAAJA,IAJW;AAKXC,YAAAA,GAAG,EAAHA,GALW;AAMXC,YAAAA,GAAG,EAAHA;AANW,WAAb;;AAQA,cAAM7E,cAAa,GAAG,oBAAMmD,KAAK,CAAC7B,IAAN,CAAWtB,aAAjB,CAAtB;;AACA,cAAIA,cAAa,CAAC7B,MAAd,IAAwBT,kBAA5B,EAAgD;AAC9CoF,YAAAA,MAAM,CAACkC,KAAP,iCAAsCtH,kBAAtC;AACA,mBAAOyF,KAAP;AACD;;AACD,cAAMW,OAAK,GAAG9D,cAAa,CAACkE,SAAd,CAAwB,UAAAe,CAAC;AAAA,mBAAIA,CAAC,CAACd,EAAF,KAASW,IAAI,CAACX,EAAlB;AAAA,WAAzB,CAAd,CAjBoB,CAkBpB;;;AACA,cAAIL,OAAK,KAAK,CAAC,CAAf,EAAkB;AAChBvE,YAAAA,OAAO,CAACC,IAAR,wBAA6BsF,IAAI,CAACX,EAAlC;AACA,mBAAOhB,KAAP;AACD,WAHD,MAGO;AACLnD,YAAAA,cAAa,CAACkF,OAAd,CAAsBJ,IAAtB;AACD;;AACDvH,UAAAA,SAAS,CAAC,eAAD,EAAkByC,cAAlB,CAAT;AACA,iBAAO,iCAAOmD,KAAP,EAAc;AAAE7B,YAAAA,IAAI,EAAE;AAAEtB,cAAAA,aAAa,EAAE;AAAEwD,gBAAAA,IAAI,EAAExD;AAAR;AAAjB;AAAR,WAAd,CAAP;AACD;;AACD,WAAK,iBAAL;AAAwB;AACtBzC,UAAAA,SAAS,CAAC,aAAD,EAAgB6F,MAAM,CAACE,OAAvB,CAAT;;AACA,cAAIvD,cAAY,GAAG,oBAAMoD,KAAK,CAAC7B,IAAN,CAAWvB,YAAjB,CAAnB;;AACA,cAAIE,cAAc,GAAG,oBAAMkD,KAAK,CAAC7B,IAAN,CAAWrB,cAAjB,CAArB;;AACA,cAAI,CAACmD,MAAM,CAACE,OAAZ,EAAqB;AACnB;AACAvD,YAAAA,cAAY,GAAG,EAAf;AACAE,YAAAA,cAAc,GAAG,EAAjB;AACA3C,YAAAA,UAAU,CAAC,QAAD,CAAV;AACAA,YAAAA,UAAU,CAAC,gBAAD,CAAV;AACD;;AACD,iBAAO,iCAAO6F,KAAP,EAAc;AAAE7B,YAAAA,IAAI,EAAE;AAC3BxB,cAAAA,WAAW,EAAE;AAAE0D,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf,eADc;AAE3BvD,cAAAA,YAAY,EAAE;AAAEyD,gBAAAA,IAAI,EAAEzD;AAAR,eAFa;AAG3BE,cAAAA,cAAc,EAAE;AAAEuD,gBAAAA,IAAI,EAAEvD;AAAR;AAHW;AAAR,WAAd,CAAP;AAKD;;AACD,WAAK,iBAAL;AACE,YAAMsB,QAAQ,GAAG,oBAAM4B,KAAK,CAAC7B,IAAN,CAAWrB,cAAjB,CAAjB;AACA,YAAMkF,cAAc,GAAG5D,QAAQ,CAAC2C,SAAT,CAAmB,UAAAe,CAAC;AAAA,iBAAI,qBAAQA,CAAC,CAACjI,KAAV,EAAiBoG,MAAM,CAACE,OAAP,CAAetG,KAAhC,CAAJ;AAAA,SAApB,CAAvB,CAFF,CAGE;;AACA,YAAImI,cAAc,KAAK,CAAC,CAAxB,EAA2B5D,QAAQ,CAAC4D,cAAD,CAAR,GAA2B/B,MAAM,CAACE,OAAlC,CAA3B,KACK/B,QAAQ,CAAC2D,OAAT,CAAiB9B,MAAM,CAACE,OAAxB;AACL,YAAM8B,cAAc,GAAG7D,QAAQ,CAACgD,IAAT,CAAc,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAA1B;AAAA,SAAd,CAAvB,CANF,CAOE;;AACA,YAAIU,cAAc,CAACjH,MAAf,IAAyBT,kBAA7B,EAAiD;AAC/C0H,UAAAA,cAAc,CAAChB,MAAf,CAAsB1G,kBAAtB;AACD;;AACDH,QAAAA,SAAS,CAAC,gBAAD,EAAmB6H,cAAnB,CAAT;AACA,eAAO,iCAAOjC,KAAP,EAAc;AAAE7B,UAAAA,IAAI,EAAE;AAAEC,YAAAA,QAAQ,EAAE;AAAEiC,cAAAA,IAAI,EAAE4B;AAAR;AAAZ;AAAR,SAAd,CAAP;;AACF,WAAK,eAAL;AAAsB;AACpB,cAAMnF,eAAc,GAAG,oBAAMkD,KAAK,CAAC7B,IAAN,CAAWrB,cAAjB,CAAvB;;AACA,cAAM6D,OAAK,GAAG7D,eAAc,CAACiE,SAAf,CAAyB,UAAA5D,CAAC;AAAA,mBAAIA,CAAC,CAAC6D,EAAF,KAASf,MAAM,CAACE,OAApB;AAAA,WAA1B,CAAd,CAFoB,CAGpB;;;AACArD,UAAAA,eAAc,CAACmE,MAAf,CAAsBN,OAAtB,EAA6B,CAA7B;;AACAvG,UAAAA,SAAS,CAAC,gBAAD,EAAmB0C,eAAnB,CAAT;AACA,iBAAO6D,OAAK,KAAK,CAAC,CAAX,GACH,iCAAOX,KAAP,EAAc;AAAE7B,YAAAA,IAAI,EAAE;AAAErB,cAAAA,cAAc,EAAE;AAAEoE,gBAAAA,OAAO,EAAE,CAAC,CAACP,OAAD,EAAQ,CAAR,CAAD;AAAX;AAAlB;AAAR,WAAd,CADG,GAEHX,KAFJ;AAGD;;AACD,WAAK,cAAL;AACE,eAAO,iCAAOA,KAAP,EAAc;AACnBtF,UAAAA,MAAM,EAAE;AAAEc,YAAAA,QAAQ,EAAE;AAAE6E,cAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe3E;AAAvB;AAAZ;AADW,SAAd,CAAP;;AAGF,WAAK,gBAAL;AACE,eAAO,iCAAOwE,KAAP,EAAc;AACnBtF,UAAAA,MAAM,EAAE;AACNhB,YAAAA,GAAG,EAAE;AACHwI,cAAAA,OAAO,EAAE;AAAE7B,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAesB;AAAvB,eADN;AAEHU,cAAAA,OAAO,EAAE;AAAE9B,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeuB;AAAvB;AAFN;AADC;AADW,SAAd,CAAP;;AAQF,WAAK,cAAL;AACE,eAAO,iCAAO1B,KAAP,EAAc;AACnBtF,UAAAA,MAAM,EAAE;AACNhB,YAAAA,GAAG,EAAE;AACH0I,cAAAA,QAAQ,EAAE;AAAE/B,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAekC;AAAvB;AADP;AADC;AADW,SAAd,CAAP;;AAOF,WAAK,eAAL;AACE,YAAMC,QAAQ,GAAGrC,MAAM,CAACE,OAAP,IAAkB,SAAnC;AACA,eAAO,iCAAOH,KAAP,EAAc;AACnBtF,UAAAA,MAAM,EAAE;AACN6H,YAAAA,GAAG,EAAE;AACHC,cAAAA,IAAI,EAAE;AAAEnC,gBAAAA,IAAI,yBAAkBiC,QAAlB;AAAN;AADH;AADC;AADW,SAAd,CAAP;;AAOF,WAAK,kBAAL;AACE,eAAO,iCAAOtC,KAAP,EAAc;AACnBV,UAAAA,EAAE,EAAE;AACFQ,YAAAA,UAAU,EAAE;AAAEO,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AADV;AADe,SAAd,CAAP;;AAKF,WAAK,qBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBV,UAAAA,EAAE,EAAE;AACFmD,YAAAA,cAAc,EAAE;AAAEpC,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AADd;AADe,SAAd,CAAP;;AAKF,WAAK,wBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBV,UAAAA,EAAE,EAAE;AACFoD,YAAAA,gBAAgB,EAAE;AAAErC,cAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAetC;AAAvB;AADhB;AADe,SAAd,CAAP;;AAKF,WAAK,mBAAL;AACE,eAAO,iCAAOmC,KAAP,EAAc;AACnBnC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,eAAe,EAAE;AAAE+C,cAAAA,MAAM,EAAE;AAAE7C,gBAAAA,QAAQ,EAAEiC,MAAM,CAACE,OAAP,CAAe/C;AAA3B;AAAV;AADT;AADS,SAAd,CAAP;;AAKF,WAAK,gBAAL;AACE,eAAO,iCAAO4C,KAAP,EAAc;AACnBnC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,eAAe,EAAE;AAAEuC,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAnB;AADS,SAAd,CAAP;;AAGF,WAAK,mBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBnC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,eAAe,EAAE;AAAEuC,cAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAewC;AAAvB;AAAnB;AADS,SAAd,CAAP;;AAGF,WAAK,qBAAL;AACE,eAAO,iCAAO3C,KAAP,EAAc;AACnBnC,UAAAA,QAAQ,EAAE;AAAEI,YAAAA,eAAe,EAAE;AAAE2E,cAAAA,QAAQ,EAAE,CAAC3C,MAAM,CAACE,OAAP,CAAetC,QAAhB;AAAZ;AAAnB;AADS,SAAd,CAAP;;AAIF,WAAK,uBAAL;AACE,YAAMgF,UAAU,GAAG,EAAnB;AACA5C,QAAAA,MAAM,CAACE,OAAP,CAAe7B,KAAf,CAAqBwE,OAArB,CAA6B,UAAAhB,CAAC,EAAI;AAChCe,UAAAA,UAAU,CAACf,CAAC,CAACd,EAAH,CAAV,GAAmBc,CAAnB;AACD,SAFD;AAGA,eAAO,iCAAO9B,KAAP,EAAc;AACnBnC,UAAAA,QAAQ,EAAE;AACRK,YAAAA,WAAW,EAAE;AAAEmC,cAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe7B,KAAf,CAAqB5E,GAArB,CAAyB,UAAAoI,CAAC;AAAA,uBAAIA,CAAC,CAACd,EAAN;AAAA,eAA1B;AAAR;AADL,WADS;AAInB3C,UAAAA,YAAY,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAEuC,cAAAA,MAAM,EAAEgC;AAAV;AAAT;AAJK,SAAd,CAAP;;AAMF,WAAK,4BAAL;AACE,eAAO,iCAAO7C,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPK,YAAAA,OAAO,EAAE;AACPT,cAAAA,KAAK,EAAE;AAAE+B,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe7B;AAAvB,eADA;AAEPkC,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFF;AADF;AADU,SAAd,CAAP;;AAQF,WAAK,qBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPK,YAAAA,OAAO,EAAE;AACPT,cAAAA,KAAK,EAAE;AAAE+B,gBAAAA,IAAI,EAAE;AAAR,eADA;AAEPG,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFF;AADF;AADU,SAAd,CAAP;;AAQF,WAAK,yBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZC,YAAAA,KAAK,sBACF2B,MAAM,CAACE,OAAP,CAAe4C,MADb,EACsB;AACvBC,cAAAA,MAAM,EAAE;AAAE3C,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe6C;AAAvB;AADe,aADtB;AADO;AADK,SAAd,CAAP;;AASF,WAAK,mBAAL;AACE,eAAO,iCAAOhD,KAAP,EAAc;AAAEV,UAAAA,EAAE,EAAE;AAAEC,YAAAA,YAAY,EAAE;AAAEc,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAhB;AAAN,SAAd,CAAP;;AACF,WAAK,wBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnBV,UAAAA,EAAE,EAAE;AACF2D,YAAAA,gBAAgB,EAAE;AAAE5C,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AADhB;AADe,SAAd,CAAP;;AAKF,WAAK,iBAAL;AACE,YAAIF,MAAM,CAACE,OAAX,EAAoB;AAClB;AACA,iBAAO,iCAAOH,KAAP,EAAc;AAAEV,YAAAA,EAAE,EAAE;AACzB2D,cAAAA,gBAAgB,EAAE;AAAE5C,gBAAAA,IAAI,EAAE6C,qBAAiBC;AAAzB,eADO;AAEzBC,cAAAA,UAAU,EAAE;AAAE/C,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAFa;AAAN,WAAd,CAAP;AAID,SAND,MAMO;AACL;AACA,iBAAO,iCAAOH,KAAP,EAAc;AAAEV,YAAAA,EAAE,EAAE;AAAE8D,cAAAA,UAAU,EAAE;AAAE/C,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAd;AAAN,WAAd,CAAP;AACD;;AACH,WAAK,mBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AAAEV,UAAAA,EAAE,EAAE;AAAE8D,YAAAA,UAAU,EAAE;AAAE/C,cAAAA,IAAI,EAAE;AAAR;AAAd;AAAN,SAAd,CAAP;;AAEF,WAAK,iBAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AAAEV,UAAAA,EAAE,EAAE;AAAE+D,YAAAA,UAAU,EAAE;AAAEhD,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAd;AAAN,SAAd,CAAP;;AACF,WAAK,mBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AAAEV,UAAAA,EAAE,EAAE;AAAE+D,YAAAA,UAAU,EAAE;AAAEhD,cAAAA,IAAI,EAAE;AAAR;AAAd;AAAN,SAAd,CAAP;;AAEF,WAAK,kBAAL;AACE,YAAIJ,MAAM,CAACE,OAAX,EAAoB;AAClB;AACA,iBAAO,iCAAOH,KAAP,EAAc;AAAEV,YAAAA,EAAE,EAAE;AACzB2D,cAAAA,gBAAgB,EAAE;AAAE5C,gBAAAA,IAAI,EAAE6C,qBAAiBI;AAAzB,eADO;AAEzBC,cAAAA,WAAW,EAAE;AAAElD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAFY;AAAN,WAAd,CAAP;AAID,SAND,MAMO;AACL;AACA,iBAAO,iCAAOH,KAAP,EAAc;AAAEV,YAAAA,EAAE,EAAE;AAAEiE,cAAAA,WAAW,EAAE;AAAElD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAf;AAAN,WAAd,CAAP;AACD;;AACH,WAAK,oBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZC,YAAAA,KAAK,sBAAK2B,MAAM,CAACE,OAAP,CAAea,EAApB,EAAyB;AAAEX,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf,aAAzB;AADO;AADK,SAAd,CAAP;;AAKF,WAAK,oBAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZE,YAAAA,KAAK,sBAAK0B,MAAM,CAACE,OAAP,CAAea,EAApB,EAAyB;AAAEX,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf,aAAzB;AADO;AADK,SAAd,CAAP;;AAKF,WAAK,8BAAL;AACE,eAAO,iCAAOH,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZE,YAAAA,KAAK,sBACF0B,MAAM,CAACE,OAAP,CAAeqD,MADb,EACsB;AAAElF,cAAAA,KAAK,EAAE;AAAE+B,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAe7B;AAAvB;AAAT,aADtB;AADO;AADK,SAAd,CAAP;;AAOF,WAAK,mCAAL;AACE,eAAO,iCAAO0B,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZE,YAAAA,KAAK,sBACF0B,MAAM,CAACE,OAAP,CAAeqD,MADb,EACsB;AACvBC,cAAAA,SAAS,EAAE;AAAEpD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAesD;AAAvB;AADY,aADtB;AADO;AADK,SAAd,CAAP;;AASF,WAAK,iCAAL;AACE,eAAO,iCAAOzD,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZE,YAAAA,KAAK,sBACF0B,MAAM,CAACE,OAAP,CAAeqD,MADb,EACsB;AACvBE,cAAAA,QAAQ,EAAE;AAAErD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeuD;AAAvB;AADa,aADtB;AADO;AADK,SAAd,CAAP;;AASF,WAAK,mCAAL;AACE,eAAO,iCAAO1D,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZC,YAAAA,KAAK,sBACF2B,MAAM,CAACE,OAAP,CAAe4C,MADb,EACsB;AACvBU,cAAAA,SAAS,EAAE;AAAEpD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAesD;AAAvB,eADY;AAEvBE,cAAAA,oBAAoB,EAAE;AAAEtD,gBAAAA,IAAI,EAAE,IAAIuD,IAAJ,GAAWC,OAAX;AAAR;AAFC,aADtB;AADO;AADK,SAAd,CAAP;;AAUF,WAAK,qBAAL;AACEzJ,QAAAA,SAAS,CAAC,sBAAD,EAAyB6F,MAAM,CAACE,OAAhC,CAAT;AACA,eAAO,iCAAOH,KAAP,EAAc;AAAE7B,UAAAA,IAAI,EAAE;AAAE3B,YAAAA,oBAAoB,EAAE;AAAE6D,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAxB;AAAR,SAAd,CAAP;;AAEF,WAAK,sBAAL;AACE;AACA,YAAI,CAACH,KAAK,CAAC3B,YAAN,CAAmB2E,MAAxB,EAAgC;AAC9B,iBAAO,iCAAOhD,KAAP,EAAc;AACnB3B,YAAAA,YAAY,EAAE;AAAE2E,cAAAA,MAAM,EAAE;AAAE3C,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf;AAAV;AADK,WAAd,CAAP;AAGD,SANH,CAOE;;;AACA,YAAM2D,eAAe,GAAG7H,MAAM,CAAC8H,IAAP,CAAY/D,KAAK,CAAC3B,YAAN,CAAmB2E,MAA/B,CAAxB;AACA,YAAMgB,SAAS,GAAG/H,MAAM,CAAC8H,IAAP,CAAY9D,MAAM,CAACE,OAAnB,EACfnD,MADe,CACR,UAAAiH,GAAG;AAAA,iBAAI,CAACH,eAAe,CAACtG,QAAhB,CAAyByG,GAAzB,CAAL;AAAA,SADK,EAEfhJ,MAFe,CAER,UAACiJ,GAAD,EAAMD,GAAN;AAAA,iBAAchI,MAAM,CAACC,MAAP,CAAcgI,GAAd,sBAAsBD,GAAtB,EAA4BhE,MAAM,CAACE,OAAP,CAAe8D,GAAf,CAA5B,EAAd;AAAA,SAFQ,EAE0D,EAF1D,CAAlB;AAGA,eAAO,iCAAOjE,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AAAE2E,YAAAA,MAAM,EAAE;AAAEnC,cAAAA,MAAM,EAAEmD;AAAV;AAAV;AADK,SAAd,CAAP;;AAGF,WAAK,qBAAL;AACE;AACA,YAAI,CAAChE,KAAK,CAAC3B,YAAN,CAAmB2E,MAAxB,EAAgC;AAC9B,iBAAO,iCAAOhD,KAAP,EAAc;AACnB3B,YAAAA,YAAY,EAAE;AAAE2E,cAAAA,MAAM,EAAE;AAAE3C,gBAAAA,IAAI,sBAAKJ,MAAM,CAACE,OAAP,CAAea,EAApB,EAAyBf,MAAM,CAACE,OAAhC;AAAN;AAAV;AADK,WAAd,CAAP;AAGD,SANH,CAOE;;;AACA,eAAO,iCAAOH,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZ2E,YAAAA,MAAM,sBAAK/C,MAAM,CAACE,OAAP,CAAea,EAApB,EAAyB;AAAEX,cAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf,aAAzB;AADM;AADK,SAAd,CAAP;;AAKF,WAAK,kCAAL;AAAA,+BACgCF,MAAM,CAACE,OADvC;AAAA,YACUgE,QADV,oBACUA,QADV;AAAA,YACoBC,OADpB,oBACoBA,OADpB,EAEE;;AACA,YAAI,CAACpE,KAAK,CAAC3B,YAAN,CAAmB2E,MAAxB,EAAgC;AAC9B,iBAAO,iCAAOhD,KAAP,EAAc;AACnB3B,YAAAA,YAAY,EAAE;AAAE2E,cAAAA,MAAM,EAAE;AAAE3C,gBAAAA,IAAI,sBAAK+D,OAAL,EAAe;AAAED,kBAAAA,QAAQ,EAARA;AAAF,iBAAf;AAAN;AAAV;AADK,WAAd,CAAP;AAGD,SAPH,CAQE;;;AACA,eAAO,iCAAOnE,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZ2E,YAAAA,MAAM,sBAAKoB,OAAL,EAAe;AAAED,cAAAA,QAAQ,EAAE;AAAE9D,gBAAAA,IAAI,EAAE8D;AAAR;AAAZ,aAAf;AADM;AADK,SAAd,CAAP;;AAKF,WAAK,oCAAL;AACE,eAAO,iCAAOnE,KAAP,EAAc;AACnB3B,UAAAA,YAAY,EAAE;AACZ2E,YAAAA,MAAM,sBACH/C,MAAM,CAACE,OAAP,CAAeiE,OADZ,EACsB;AACxBD,cAAAA,QAAQ,sBACLlE,MAAM,CAACE,OAAP,CAAekE,SADV,EACsB;AAC1BX,gBAAAA,QAAQ,EAAE;AAAErD,kBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAeuD;AAAvB;AADgB,eADtB;AADgB,aADtB;AADM;AADK,SAAd,CAAP;;AAaF,WAAK,kBAAL;AACE,eAAO,iCAAO1D,KAAP,EAAc;AACnBb,UAAAA,GAAG,EAAE;AACHC,YAAAA,YAAY,sBACTa,MAAM,CAACE,OAAP,CAAemE,IADN,EACa,UAAAC,QAAQ,EAAI;AACjCA,cAAAA,QAAQ,GAAGtI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqI,QAAlB,CAAX;AACA,kBAAMC,SAAS,GAAGvE,MAAM,CAACE,OAAP,CAAeqE,SAAf,IAA4B,EAA9C;AACAA,cAAAA,SAAS,CAAC1B,OAAV,CAAkB,UAAA2B,QAAQ,EAAI;AAC5B,oBAAI,CAACF,QAAQ,CAACE,QAAQ,CAACC,OAAV,CAAb,EAAiC;AAC/BH,kBAAAA,QAAQ,CAACE,QAAQ,CAACC,OAAV,CAAR,GAA6B,EAA7B;AACD;;AACDH,gBAAAA,QAAQ,CAACE,QAAQ,CAACC,OAAV,CAAR,CAA2BD,QAAQ,CAACE,SAApC,IAAiD1I,MAAM,CAACC,MAAP,CAC/C;AACE0I,kBAAAA,iBAAiB,EAAE,IAAIhB,IAAJ;AADrB,iBAD+C,EAI/Ca,QAJ+C,CAAjD;AAMD,eAVD;AAWA,qBAAOF,QAAP;AACD,aAhBS;AADT;AADc,SAAd,CAAP;;AAsBF,WAAK,mBAAL;AACE,eAAO,iCAAOvE,KAAP,EAAc;AACnBb,UAAAA,GAAG,EAAE;AACHE,YAAAA,aAAa,sBACVY,MAAM,CAACE,OAAP,CAAemE,IADL,EACY,UAAAC,QAAQ,EAAI;AACjCA,cAAAA,QAAQ,GAAGtI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqI,QAAlB,CAAX;AADiC,qCAEKtE,MAAM,CAACE,OAFZ;AAAA,kBAEzBuE,OAFyB,oBAEzBA,OAFyB;AAAA,kBAEhBG,YAFgB,oBAEhBA,YAFgB;AAAA,kBAEFC,EAFE,oBAEFA,EAFE;;AAGjC,kBAAI,CAACD,YAAL,EAAmB;AACjB,uBAAON,QAAP;AACD;;AACD,kBAAI,CAACA,QAAQ,CAACO,EAAD,CAAb,EAAmB;AACjBP,gBAAAA,QAAQ,CAACO,EAAD,CAAR,GAAe,EAAf;AACD;;AACD,kBAAI,CAACP,QAAQ,CAACO,EAAD,CAAR,CAAaJ,OAAb,CAAL,EAA4B;AAC1BH,gBAAAA,QAAQ,CAACO,EAAD,CAAR,CAAaJ,OAAb,IAAwB,EAAxB;AACD;;AACDH,cAAAA,QAAQ,CAACO,EAAD,CAAR,CAAaJ,OAAb,EAAsBG,YAAY,CAACE,QAAnC,IAA+C9I,MAAM,CAACC,MAAP,CAC7C;AACE0I,gBAAAA,iBAAiB,EAAE,IAAIhB,IAAJ;AADrB,eAD6C,EAI7CiB,YAJ6C,CAA/C;AAMA,qBAAON,QAAP;AACD,aApBU;AADV;AADc,SAAd,CAAP;;AA2BF,WAAK,wBAAL;AACE,eAAO,iCAAOvE,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPI,YAAAA,WAAW,EAAE;AACX/B,cAAAA,SAAS,EAAE;AAAEsD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE;AAAf,eADA;AAEXK,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFE;AADN;AADU,SAAd,CAAP;AASF;;AACA,WAAK,2BAAL;AACE,eAAO,iCAAOL,KAAP,EAAc;AACnBtB,UAAAA,OAAO,EAAE;AACPQ,YAAAA,MAAM,EAAE;AACNnC,cAAAA,SAAS,EAAE;AAAEsD,gBAAAA,IAAI,EAAEJ,MAAM,CAACE,OAAP,CAAepD;AAAvB,eADL;AAENyD,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,IAAI,EAAE;AAAR;AAFH;AADD;AADU,SAAd,CAAP;;AAQF,WAAK,2BAAL;AACE,YAAM2E,WAAW,GAAG,oBAAMhF,KAAK,CAACtF,MAAN,CAAahB,GAAb,CAAiBuL,QAAvB,CAApB;;AADF,mCAEWhB,GAFX;AAGI,cAAMvF,OAAO,GAAGsG,WAAW,CAACE,IAAZ,CAAiB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAAC3D,IAAF,KAAWyC,GAAf;AAAA,WAAlB,CAAhB;AACAvF,UAAAA,OAAO,CAAC0G,OAAR,GAAkBnF,MAAM,CAACE,OAAP,CAAe8D,GAAf,CAAlB;AAJJ;;AAEE,aAAK,IAAIA,GAAT,IAAgBhE,MAAM,CAACE,OAAvB,EAAgC;AAAA,gBAAvB8D,GAAuB;AAG/B;;AACD,eAAO,iCAAOjE,KAAP,EACL;AAAEtF,UAAAA,MAAM,EAAE;AAAEhB,YAAAA,GAAG,EAAE;AAAEuL,cAAAA,QAAQ,EAAE;AAAE5E,gBAAAA,IAAI,EAAE2E;AAAR;AAAZ;AAAP;AAAV,SADK,CAAP;;AAGF;AACE,eAAOhF,KAAP;AAvoBJ;AAyoBD,GA3oBD;AA4oBD;;eAEcD,gB","sourcesContent":["import clone from 'clone'\nimport update from 'immutability-helper'\nimport isEqual from 'lodash.isequal'\nimport objectPath from 'object-path'\nimport coreUtils from '@opentripplanner/core-utils'\n\nimport { MainPanelContent, MobileScreens } from '../actions/ui'\n\nconst { isTransit, getTransitModes } = coreUtils.itinerary\nconst { matchLatLon } = coreUtils.map\nconst { filterProfileOptions } = coreUtils.profile\nconst {\n  ensureSingleAccessMode,\n  getDefaultQuery,\n  getTripOptionsFromQuery\n} = coreUtils.query\nconst { getItem, removeItem, storeItem } = coreUtils.storage\nconst { getUserTimezone } = coreUtils.time\n\nconst MAX_RECENT_STORAGE = 5\n\n// TODO: fire planTrip action if default query is complete/error-free\n\n/**\n * Validates the initial state of the store. This is intended to mainly catch\n * configuration issues since a manually edited config file is loaded into the\n * initial state.\n * TODO: mabye it's a better idea to move all of this to a script that can do\n *  JSON Schema validation and other stuff.\n */\nfunction validateInitalState (initialState) {\n  const {config} = initialState\n\n  const errors = []\n\n  // validate that the ArcGIS geocoder isn't used with a persistence strategy of\n  // `localStorage`. ArcGIS requires the use of a paid account to store geocode\n  // results.\n  // See https://developers.arcgis.com/rest/geocode/api-reference/geocoding-free-vs-paid.htm\n  if (\n    objectPath.get(config, 'persistence.enabled') &&\n    objectPath.get(config, 'persistence.strategy') === 'localStorage' &&\n    objectPath.get(config, 'geocoder.type') === 'ARCGIS'\n  ) {\n    errors.push(new Error('Local Storage persistence and ARCGIS geocoder cannot be enabled at the same time!'))\n  }\n\n  if (errors.length > 0) {\n    throw new Error(\n      errors.reduce(\n        (message, error) => {\n          return `${message}\\n- ${error.message}`\n        },\n        'Encountered the following configuration errors:'\n      )\n    )\n  }\n}\n\n/**\n * Create the initial state of otp-react-redux using user-provided config, any\n * items in localStorage and a few defaults.\n */\nexport function getInitialState (userDefinedConfig, initialQuery) {\n  const defaultConfig = {\n    autoPlan: false,\n    debouncePlanTimeMs: 0,\n    language: {},\n    transitOperators: [],\n    realtimeEffectsDisplayThreshold: 120,\n    routingTypes: [],\n    stopViewer: {\n      numberOfDepartures: 3, // per pattern\n      // This is set to 345600 (four days) so that, for example, if it is Friday and\n      // a route does not begin service again until Monday, we are showing its next\n      // departure and it is not entirely excluded from display.\n      timeRange: 345600 // four days in seconds\n    }\n  }\n\n  const config = Object.assign(defaultConfig, userDefinedConfig)\n\n  if (!config.homeTimezone) {\n    config.homeTimezone = getUserTimezone()\n    console.warn(\n      `Config value 'homeTimezone' not configured for this webapp!\\n\n      This value is recommended in order to properly display stop times for\n      users that are not in the timezone that the transit system is in. The\n      detected user timezone of '${config.homeTimezone}' will be used. Hopefully\n      that is the right one...`\n    )\n  }\n\n  // Load user settings from local storage.\n  // TODO: Make this work with settings fetched from alternative storage system\n  //  (e.g., OTP backend middleware containing user profile system).\n  // User overrides determine user's default mode/query parameters.\n  const userOverrides = getItem('defaultQuery', {})\n  // Combine user overrides with default query to get default search settings.\n  const defaults = Object.assign(getDefaultQuery(config), userOverrides)\n  // Whether to auto-refresh stop arrival times in the Stop Viewer.\n  const autoRefreshStopTimes = getItem('autoRefreshStopTimes', true)\n  // User's home and work locations\n  const home = getItem('home')\n  const work = getItem('work')\n  // Whether recent searches and places should be tracked in local storage.\n  const trackRecent = getItem('trackRecent', false)\n  // Recent places used in trip plan searches.\n  const recentPlaces = getItem('recent', [])\n  // List of user's favorite stops.\n  const favoriteStops = getItem('favoriteStops', [])\n  // Recent trip plan searches (excluding time/date parameters to avoid complexity).\n  const recentSearches = getItem('recentSearches', [])\n  // Filter valid locations found into locations list.\n  const locations = [home, work].filter(p => p)\n  // TODO: parse and merge URL query params w/ default query\n\n  // populate query by merging any provided query params w/ the default params\n  const currentQuery = Object.assign(defaults, initialQuery)\n  // Add configurable locations to home and work locations\n  if (config.locations) {\n    locations.push(...config.locations.map(l => ({ ...l, type: 'suggested' })))\n  }\n  let queryModes = currentQuery.mode.split(',')\n\n  // If 'TRANSIT' is included in the mode list, replace it with individual modes\n  if (queryModes.includes('TRANSIT')) {\n    // Isolate the non-transit modes in queryModes\n    queryModes = queryModes.filter(m => !isTransit(m))\n    // Add all possible transit modes\n    queryModes = queryModes.concat(getTransitModes(config))\n    // Stringify and set as OTP 'mode' query param\n    currentQuery.mode = queryModes.join(',')\n  }\n\n  // If we are in 'ITINERARY' mode, ensure that one and only one access mode is selected\n  if (currentQuery.routingType === 'ITINERARY') {\n    queryModes = ensureSingleAccessMode(queryModes)\n  }\n\n  return {\n    config,\n    currentQuery,\n    location: {\n      currentPosition: {\n        error: null,\n        coords: null,\n        fetching: false\n      },\n      sessionSearches: [],\n      nearbyStops: []\n    },\n    user: {\n      autoRefreshStopTimes,\n      // Do not store from/to or date/time in defaults\n      defaults: getTripOptionsFromQuery(defaults),\n      favoriteStops,\n      trackRecent,\n      locations,\n      recentPlaces,\n      recentSearches\n    },\n    searches: {},\n    transitIndex: {\n      stops: {},\n      trips: {}\n    },\n    useRealtime: true,\n    activeSearchId: 0,\n    overlay: {\n      bikeRental: {\n        stations: []\n      },\n      carRental: {\n        stations: []\n      },\n      parkAndRide: {\n        // null default value indicates no request for P&R list has been made\n        locations: null\n      },\n      transit: {\n        stops: []\n      },\n      transitive: null,\n      vehicleRental: {\n        stations: []\n      },\n      zipcar: {\n        locations: []\n      }\n    },\n    tnc: {\n      etaEstimates: {},\n      rideEstimates: {}\n    },\n    ui: {\n      mobileScreen: MobileScreens.WELCOME_SCREEN,\n      printView: window.location.href.indexOf('/print/') !== -1,\n      diagramLeg: null\n    }\n  }\n}\n\nfunction createOtpReducer (config, initialQuery) {\n  const initialState = getInitialState(config, initialQuery)\n\n  // validate the inital state\n  validateInitalState(initialState)\n\n  return (state = initialState, action) => {\n    const searchId = action.payload && action.payload.searchId\n    switch (action.type) {\n      case 'ROUTING_REQUEST':\n        const { activeItinerary } = action.payload\n        return update(state, {\n          searches: {\n            [searchId]: {\n              $set: {\n                activeItinerary,\n                activeLeg: null,\n                activeStep: null,\n                pending: true,\n                query: clone(state.currentQuery),\n                response: null\n              }\n            }\n          },\n          activeSearchId: { $set: searchId }\n        })\n      case 'ROUTING_ERROR':\n        return update(state, {\n          searches: {\n            [searchId]: {\n              response: {\n                $set: {\n                  error: action.payload.error\n                }\n              },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'ROUTING_RESPONSE':\n        const response = (state.currentQuery.routingType === 'PROFILE')\n          ? filterProfileOptions(action.payload.response)\n          : action.payload.response\n\n        return update(state, {\n          searches: {\n            [searchId]: {\n              response: { $set: response },\n              pending: { $set: false }\n            }\n          },\n          ui: {\n            diagramLeg: { $set: null }\n          }\n        })\n      case 'NON_REALTIME_ROUTING_RESPONSE':\n        return update(state, {\n          searches: {\n            [searchId]: {\n              nonRealtimeResponse: { $set: action.payload.response }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_REQUEST':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              pending: { $set: true },\n              error: { $set: null }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_ERROR':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              pending: { $set: false },\n              error: { $set: action.payload }\n            }\n          }\n        })\n      case 'BIKE_RENTAL_RESPONSE':\n        return update(state, {\n          overlay: {\n            bikeRental: {\n              stations: { $set: action.payload.stations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'CAR_RENTAL_ERROR':\n        return update(state, {\n          overlay: {\n            carRental: {\n              pending: { $set: false },\n              error: { $set: action.payload }\n            }\n          }\n        })\n      case 'CAR_RENTAL_RESPONSE':\n        return update(state, {\n          overlay: {\n            carRental: {\n              stations: { $set: action.payload.stations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'VEHICLE_RENTAL_ERROR':\n        return update(state, {\n          overlay: {\n            vehicleRental: {\n              pending: { $set: false },\n              error: { $set: action.payload }\n            }\n          }\n        })\n      case 'VEHICLE_RENTAL_RESPONSE':\n        return update(state, {\n          overlay: {\n            vehicleRental: {\n              stations: { $set: action.payload.stations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'SET_USE_REALTIME_RESPONSE':\n        return update(state, {\n          useRealtime: { $set: action.payload.useRealtime }\n        })\n      case 'SET_ACTIVE_ITINERARY':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeItinerary: { $set: action.payload.index },\n                activeLeg: { $set: null },\n                activeStep: { $set: null }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_ACTIVE_LEG':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeLeg: { $set: action.payload.index },\n                activeStep: { $set: null }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_ACTIVE_STEP':\n        if (state.activeSearchId !== null) {\n          return update(state, {\n            searches: {\n              [state.activeSearchId]: {\n                activeStep: { $set: action.payload.index }\n              }\n            }\n          })\n        }\n        return state\n      case 'SET_LOCATION':\n        return update(state, {\n          currentQuery: {\n            [action.payload.locationType]: { $set: action.payload.location }\n          }\n        })\n      case 'CLEAR_LOCATION':\n        return update(state, {\n          currentQuery: { [action.payload.locationType]: { $set: null } }\n        })\n\n      case 'SET_QUERY_PARAM':\n        return update(state, { currentQuery: { $merge: action.payload } })\n\n      case 'CLEAR_ACTIVE_SEARCH':\n        return update(state, { activeSearchId: { $set: null } })\n      case 'SET_ACTIVE_SEARCH':\n        return update(state, { activeSearchId: { $set: action.payload } })\n      case 'CLEAR_DEFAULT_SETTINGS':\n        removeItem('defaultQuery')\n        return update(state, { user: { defaults: { $set: null } } })\n      case 'STORE_DEFAULT_SETTINGS':\n        storeItem('defaultQuery', action.payload)\n        return update(state, { user: { defaults: { $set: action.payload } } })\n      case 'FORGET_PLACE': {\n        // Payload is the place ID.\n        // Recent place IDs contain the string literal 'recent'.\n        if (action.payload.indexOf('recent') !== -1) {\n          const recentPlaces = clone(state.user.recentPlaces)\n          // Remove recent from list of recent places\n          const removeIndex = recentPlaces.findIndex(l => l.id === action.payload)\n          recentPlaces.splice(removeIndex, 1)\n          storeItem('recent', recentPlaces)\n          return removeIndex !== -1\n            ? update(state, { user: { recentPlaces: { $splice: [[removeIndex, 1]] } } })\n            : state\n        } else {\n          const locations = clone(state.user.locations)\n          const removeIndex = locations.findIndex(l => l.id === action.payload)\n          removeItem(action.payload)\n          return removeIndex !== -1\n            ? update(state, { user: { locations: { $splice: [[removeIndex, 1]] } } })\n            : state\n        }\n      }\n      case 'REMEMBER_PLACE': {\n        const { location, type } = action.payload\n        switch (type) {\n          case 'recent': {\n            const recentPlaces = clone(state.user.recentPlaces)\n            const index = recentPlaces.findIndex(l => matchLatLon(l, location))\n            // Replace recent place if duplicate found or add to list.\n            if (index !== -1) recentPlaces.splice(index, 1, location)\n            else recentPlaces.push(location)\n            const sortedPlaces = recentPlaces.sort((a, b) => b.timestamp - a.timestamp)\n            // Only keep up to 5 recent locations\n            // FIXME: Check for duplicates\n            if (recentPlaces.length >= MAX_RECENT_STORAGE) {\n              sortedPlaces.splice(MAX_RECENT_STORAGE)\n            }\n            storeItem('recent', recentPlaces)\n            return update(state, { user: { recentPlaces: { $set: sortedPlaces } } })\n          }\n          default: {\n            const locations = clone(state.user.locations)\n            // Determine if location type (e.g., home or work) already exists in list\n            const index = locations.findIndex(l => l.type === type)\n            if (index !== -1) locations.splice(index, 1, location)\n            else locations.push(location)\n            storeItem(type, location)\n            return update(state, { user: { locations: { $set: locations } } })\n          }\n        }\n      }\n      case 'FORGET_STOP': {\n        // Payload is the stop ID.\n        const favoriteStops = clone(state.user.favoriteStops)\n        // Remove stop from favorites\n        const removeIndex = favoriteStops.findIndex(l => l.id === action.payload)\n        favoriteStops.splice(removeIndex, 1)\n        storeItem('favoriteStops', favoriteStops)\n        return removeIndex !== -1\n          ? update(state, { user: { favoriteStops: { $splice: [[removeIndex, 1]] } } })\n          : state\n      }\n      case 'REMEMBER_STOP': {\n        // Payload is stop data. We want to avoid saving other attributes that\n        // might be contained there (like lists of patterns).\n        const { id, name, lat, lon } = action.payload\n        const stop = {\n          type: 'stop',\n          icon: 'bus',\n          id,\n          name,\n          lat,\n          lon\n        }\n        const favoriteStops = clone(state.user.favoriteStops)\n        if (favoriteStops.length >= MAX_RECENT_STORAGE) {\n          window.alert(`Cannot save more than ${MAX_RECENT_STORAGE} stops. Remove one before adding more.`)\n          return state\n        }\n        const index = favoriteStops.findIndex(s => s.id === stop.id)\n        // Do nothing if duplicate stop found.\n        if (index !== -1) {\n          console.warn(`Stop with id ${stop.id} already exists in favorites.`)\n          return state\n        } else {\n          favoriteStops.unshift(stop)\n        }\n        storeItem('favoriteStops', favoriteStops)\n        return update(state, { user: { favoriteStops: { $set: favoriteStops } } })\n      }\n      case 'TOGGLE_TRACKING': {\n        storeItem('trackRecent', action.payload)\n        let recentPlaces = clone(state.user.recentPlaces)\n        let recentSearches = clone(state.user.recentSearches)\n        if (!action.payload) {\n          // If user disables tracking, remove recent searches and locations.\n          recentPlaces = []\n          recentSearches = []\n          removeItem('recent')\n          removeItem('recentSearches')\n        }\n        return update(state, { user: {\n          trackRecent: { $set: action.payload },\n          recentPlaces: { $set: recentPlaces },\n          recentSearches: { $set: recentSearches }\n        } })\n      }\n      case 'REMEMBER_SEARCH':\n        const searches = clone(state.user.recentSearches)\n        const duplicateIndex = searches.findIndex(s => isEqual(s.query, action.payload.query))\n        // Overwrite duplicate search (so that new timestamp is stored).\n        if (duplicateIndex !== -1) searches[duplicateIndex] = action.payload\n        else searches.unshift(action.payload)\n        const sortedSearches = searches.sort((a, b) => b.timestamp - a.timestamp)\n        // Ensure recent searches do not extend beyong MAX_RECENT_STORAGE\n        if (sortedSearches.length >= MAX_RECENT_STORAGE) {\n          sortedSearches.splice(MAX_RECENT_STORAGE)\n        }\n        storeItem('recentSearches', sortedSearches)\n        return update(state, { user: { searches: { $set: sortedSearches } } })\n      case 'FORGET_SEARCH': {\n        const recentSearches = clone(state.user.recentSearches)\n        const index = recentSearches.findIndex(l => l.id === action.payload)\n        // Remove item from list of recent searches\n        recentSearches.splice(index, 1)\n        storeItem('recentSearches', recentSearches)\n        return index !== -1\n          ? update(state, { user: { recentSearches: { $splice: [[index, 1]] } } })\n          : state\n      }\n      case 'SET_AUTOPLAN':\n        return update(state, {\n          config: { autoPlan: { $set: action.payload.autoPlan } }\n        })\n      case 'SET_MAP_CENTER':\n        return update(state, {\n          config: {\n            map: {\n              initLat: { $set: action.payload.lat },\n              initLon: { $set: action.payload.lon }\n            }\n          }\n        })\n      case 'SET_MAP_ZOOM':\n        return update(state, {\n          config: {\n            map: {\n              initZoom: { $set: action.payload.zoom }\n            }\n          }\n        })\n      case 'SET_ROUTER_ID':\n        const routerId = action.payload || 'default'\n        return update(state, {\n          config: {\n            api: {\n              path: { $set: `/otp/routers/${routerId}` }\n            }\n          }\n        })\n      case 'SHOW_LEG_DIAGRAM':\n        return update(state, {\n          ui: {\n            diagramLeg: { $set: action.payload }\n          }\n        })\n      case 'SET_ELEVATION_POINT':\n        return update(state, {\n          ui: {\n            elevationPoint: { $set: action.payload }\n          }\n        })\n      case 'SET_MAP_POPUP_LOCATION':\n        return update(state, {\n          ui: {\n            mapPopupLocation: { $set: action.payload.location }\n          }\n        })\n      case 'POSITION_FETCHING':\n        return update(state, {\n          location: {\n            currentPosition: { $merge: { fetching: action.payload.type } }\n          }\n        })\n      case 'POSITION_ERROR':\n        return update(state, {\n          location: { currentPosition: { $set: action.payload } }\n        })\n      case 'POSITION_RESPONSE':\n        return update(state, {\n          location: { currentPosition: { $set: action.payload.position } }\n        })\n      case 'ADD_LOCATION_SEARCH':\n        return update(state, {\n          location: { sessionSearches: { $unshift: [action.payload.location] } }\n        })\n\n      case 'NEARBY_STOPS_RESPONSE':\n        const stopLookup = {}\n        action.payload.stops.forEach(s => {\n          stopLookup[s.id] = s\n        })\n        return update(state, {\n          location: {\n            nearbyStops: { $set: action.payload.stops.map(s => s.id) }\n          },\n          transitIndex: { stops: { $merge: stopLookup } }\n        })\n      case 'STOPS_WITHIN_BBOX_RESPONSE':\n        return update(state, {\n          overlay: {\n            transit: {\n              stops: { $set: action.payload.stops },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'CLEAR_STOPS_OVERLAY':\n        return update(state, {\n          overlay: {\n            transit: {\n              stops: { $set: [] },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'ROUTES_AT_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: {\n              [action.payload.stopId]: {\n                routes: { $set: action.payload.routes }\n              }\n            }\n          }\n        })\n      case 'SET_MOBILE_SCREEN':\n        return update(state, { ui: { mobileScreen: { $set: action.payload } } })\n      case 'SET_MAIN_PANEL_CONTENT':\n        return update(state, {\n          ui: {\n            mainPanelContent: { $set: action.payload }\n          }\n        })\n      case 'SET_VIEWED_STOP':\n        if (action.payload) {\n          // If setting to a stop (not null), also set main panel.\n          return update(state, { ui: {\n            mainPanelContent: { $set: MainPanelContent.STOP_VIEWER },\n            viewedStop: { $set: action.payload }\n          } })\n        } else {\n          // Otherwise, just replace viewed stop with null\n          return update(state, { ui: { viewedStop: { $set: action.payload } } })\n        }\n      case 'CLEAR_VIEWED_STOP':\n        return update(state, { ui: { viewedStop: { $set: null } } })\n\n      case 'SET_VIEWED_TRIP':\n        return update(state, { ui: { viewedTrip: { $set: action.payload } } })\n      case 'CLEAR_VIEWED_TRIP':\n        return update(state, { ui: { viewedTrip: { $set: null } } })\n\n      case 'SET_VIEWED_ROUTE':\n        if (action.payload) {\n          // If setting to a route (not null), also set main panel.\n          return update(state, { ui: {\n            mainPanelContent: { $set: MainPanelContent.ROUTE_VIEWER },\n            viewedRoute: { $set: action.payload }\n          } })\n        } else {\n          // Otherwise, just replace viewed route with null\n          return update(state, { ui: { viewedRoute: { $set: action.payload } } })\n        }\n      case 'FIND_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n      case 'FIND_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n      case 'FIND_STOPS_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: { stops: { $set: action.payload.stops } }\n            }\n          }\n        })\n      case 'FIND_STOP_TIMES_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: {\n                stopTimes: { $set: action.payload.stopTimes }\n              }\n            }\n          }\n        })\n      case 'FIND_GEOMETRY_FOR_TRIP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            trips: {\n              [action.payload.tripId]: {\n                geometry: { $set: action.payload.geometry }\n              }\n            }\n          }\n        })\n      case 'FIND_STOP_TIMES_FOR_STOP_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            stops: {\n              [action.payload.stopId]: {\n                stopTimes: { $set: action.payload.stopTimes },\n                stopTimesLastUpdated: { $set: new Date().getTime() }\n              }\n            }\n          }\n        })\n      case 'TOGGLE_AUTO_REFRESH':\n        storeItem('autoRefreshStopTimes', action.payload)\n        return update(state, { user: { autoRefreshStopTimes: { $set: action.payload } } })\n\n      case 'FIND_ROUTES_RESPONSE':\n        // If routes is undefined, initialize it w/ the full payload\n        if (!state.transitIndex.routes) {\n          return update(state, {\n            transitIndex: { routes: { $set: action.payload } }\n          })\n        }\n        // Otherwise, merge in only the routes not already defined\n        const currentRouteIds = Object.keys(state.transitIndex.routes)\n        const newRoutes = Object.keys(action.payload)\n          .filter(key => !currentRouteIds.includes(key))\n          .reduce((res, key) => Object.assign(res, { [key]: action.payload[key] }), {})\n        return update(state, {\n          transitIndex: { routes: { $merge: newRoutes } }\n        })\n      case 'FIND_ROUTE_RESPONSE':\n        // If routes is undefined, initialize it w/ this route only\n        if (!state.transitIndex.routes) {\n          return update(state, {\n            transitIndex: { routes: { $set: { [action.payload.id]: action.payload } } }\n          })\n        }\n        // Otherwise, overwrite only this route\n        return update(state, {\n          transitIndex: {\n            routes: { [action.payload.id]: { $set: action.payload } }\n          }\n        })\n      case 'FIND_PATTERNS_FOR_ROUTE_RESPONSE':\n        const { patterns, routeId } = action.payload\n        // If routes is undefined, initialize it w/ this route only\n        if (!state.transitIndex.routes) {\n          return update(state, {\n            transitIndex: { routes: { $set: { [routeId]: { patterns } } } }\n          })\n        }\n        // Otherwise, overwrite only this route\n        return update(state, {\n          transitIndex: {\n            routes: { [routeId]: { patterns: { $set: patterns } } }\n          }\n        })\n      case 'FIND_GEOMETRY_FOR_PATTERN_RESPONSE':\n        return update(state, {\n          transitIndex: {\n            routes: {\n              [action.payload.routeId]: {\n                patterns: {\n                  [action.payload.patternId]: {\n                    geometry: { $set: action.payload.geometry }\n                  }\n                }\n              }\n            }\n          }\n        })\n      case 'TNC_ETA_RESPONSE':\n        return update(state, {\n          tnc: {\n            etaEstimates: {\n              [action.payload.from]: fromData => {\n                fromData = Object.assign({}, fromData)\n                const estimates = action.payload.estimates || []\n                estimates.forEach(estimate => {\n                  if (!fromData[estimate.company]) {\n                    fromData[estimate.company] = {}\n                  }\n                  fromData[estimate.company][estimate.productId] = Object.assign(\n                    {\n                      estimateTimestamp: new Date()\n                    },\n                    estimate\n                  )\n                })\n                return fromData\n              }\n            }\n          }\n        })\n      case 'TNC_RIDE_RESPONSE':\n        return update(state, {\n          tnc: {\n            rideEstimates: {\n              [action.payload.from]: fromData => {\n                fromData = Object.assign({}, fromData)\n                const { company, rideEstimate, to } = action.payload\n                if (!rideEstimate) {\n                  return fromData\n                }\n                if (!fromData[to]) {\n                  fromData[to] = {}\n                }\n                if (!fromData[to][company]) {\n                  fromData[to][company] = {}\n                }\n                fromData[to][company][rideEstimate.rideType] = Object.assign(\n                  {\n                    estimateTimestamp: new Date()\n                  },\n                  rideEstimate\n                )\n                return fromData\n              }\n            }\n          }\n        })\n\n      case 'PARK_AND_RIDE_RESPONSE':\n        return update(state, {\n          overlay: {\n            parkAndRide: {\n              locations: { $set: action.payload },\n              pending: { $set: false }\n            }\n          }\n        })\n\n      // TODO: can this be broken out into a separate module?\n      case 'ZIPCAR_LOCATIONS_RESPONSE':\n        return update(state, {\n          overlay: {\n            zipcar: {\n              locations: { $set: action.payload.locations },\n              pending: { $set: false }\n            }\n          }\n        })\n      case 'UPDATE_OVERLAY_VISIBILITY':\n        const mapOverlays = clone(state.config.map.overlays)\n        for (let key in action.payload) {\n          const overlay = mapOverlays.find(o => o.name === key)\n          overlay.visible = action.payload[key]\n        }\n        return update(state,\n          { config: { map: { overlays: { $set: mapOverlays } } } }\n        )\n      default:\n        return state\n    }\n  }\n}\n\nexport default createOtpReducer\n"]}