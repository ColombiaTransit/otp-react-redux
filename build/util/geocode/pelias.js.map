{"version":3,"sources":["pelias.js"],"names":["reverse","point","gcConfig","geocoder","MAPZEN_KEY","baseUrl","resolve","reject","apiKey","format","url","then","json","lat","lon","name","address","catch","err"],"mappings":";;;;;;;;;;kBAEwBA,O;;AAFxB;;;;AAEe,SAASA,OAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;AAAA,2BAClBA,SAASC,QADS;AAAA,MACzCC,UADyC,sBACzCA,UADyC;AAAA,MAC7BC,OAD6B,sBAC7BA,OAD6B;;;AAGhD,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,yCAAc;AACZC,cAAQJ,UADI;AAEZH,kBAFY;AAGZQ,cAAQ,IAHI;AAIZC,WAAKL,UAAaA,OAAb,gBAAiC;AAJ1B,KAAd,EAKGM,IALH,CAKQ,UAACC,IAAD,EAAU;AAChBN,cAAQ;AACNO,aAAKZ,MAAMY,GADL;AAENC,aAAKb,MAAMa,GAFL;AAGNC,cAAMH,KAAK,CAAL,EAAQI;AAHR,OAAR;AAKD,KAXD,EAWGC,KAXH,CAWS,UAACC,GAAD,EAAS;AAChBX,aAAOW,GAAP;AACD,KAbD;AAcD,GAfM,CAAP;AAgBD","file":"pelias.js","sourcesContent":["import { reverse as peliasReverse } from 'isomorphic-mapzen-search'\n\nexport default function reverse (point, gcConfig) {\n  const {MAPZEN_KEY, baseUrl} = gcConfig.geocoder\n\n  return new Promise((resolve, reject) => {\n    peliasReverse({\n      apiKey: MAPZEN_KEY,\n      point,\n      format: true,\n      url: baseUrl ? `${baseUrl}/reverse` : null\n    }).then((json) => {\n      resolve({\n        lat: point.lat,\n        lon: point.lon,\n        name: json[0].address\n      })\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n"]}