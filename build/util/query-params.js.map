{"version":3,"sources":["query-params.js"],"names":["queryParams","name","routingTypes","default","itineraryRewrite","fromPlace","value","lat","lon","profileRewrite","from","toPlace","to","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","push","applicable","query","mode","indexOf","selector","label","options","text","maxWalkDistance","maxBikeDistance","opts","splice","optimize"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,cAAc,CAClB,EAAE;AACAC,QAAM,MADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS,IAHX;AAIEC,oBAAkB;AAAA,WAAU,EAAEC,WAAcC,MAAMC,GAApB,SAA2BD,MAAME,GAAnC,EAAV;AAAA,GAJpB;AAKEC,kBAAgB;AAAA,WAAU,EAAEC,MAAM,EAAEH,KAAKD,MAAMC,GAAb,EAAkBC,KAAKF,MAAME,GAA7B,EAAR,EAAV;AAAA;AAChB;AACA;AAPF,CADkB,EAWlB,EAAE;AACAP,QAAM,IADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS,IAHX;AAIEC,oBAAkB;AAAA,WAAU,EAAEO,SAAYL,MAAMC,GAAlB,SAAyBD,MAAME,GAAjC,EAAV;AAAA,GAJpB;AAKEC,kBAAgB;AAAA,WAAU,EAAEG,IAAI,EAAEL,KAAKD,MAAMC,GAAb,EAAkBC,KAAKF,MAAME,GAA7B,EAAN,EAAV;AAAA;AAChB;AACA;AAPF,CAXkB,EAqBlB,EAAE;AACAP,QAAM,MADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS;AAHX,CArBkB,EA2BlB,EAAE;AACAF,QAAM,MADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEC,WAAS;AAHX,CA3BkB,EAiClB,EAAE;AACAF,QAAM,cADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEC,WAAS,KAHX;AAIEC,oBAAkB;AAAA,WAAU,EAAES,UAAWP,UAAU,QAAvB,EAAV;AAAA;AAJpB,CAjCkB,EAwClB,EAAE;AACAL,QAAM,WADR;AAEEC,gBAAc,CAAE,SAAF,CAFhB;AAGEC,WAAS;AAHX,CAxCkB,EA8ClB,EAAE;AACAF,QAAM,SADR;AAEEC,gBAAc,CAAE,SAAF,CAFhB;AAGEC,WAAS;AAHX,CA9CkB,EAoDlB,EAAE;AACAF,QAAM,MADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS,cAHX,EAG2B;AACzBM,kBAAgB,+BAAS;AACvB,QAAMK,cAAc,EAApB;AACA,QAAMC,cAAc,EAApB;AACA,QAAMC,eAAe,EAArB;;AAEA,QAAIV,SAASA,MAAMW,MAAN,GAAe,CAA5B,EAA+B;AAC7BX,YAAMY,KAAN,CAAY,GAAZ,EAAiBC,OAAjB,CAAyB,aAAK;AAC5B,YAAI,0BAAUC,CAAV,CAAJ,EAAkBJ,aAAaK,IAAb,CAAkBD,CAAlB;AAClB,YAAI,6BAAaA,CAAb,CAAJ,EAAqB;AACnBN,sBAAYO,IAAZ,CAAiBD,CAAjB;AACA;AACA,cAAI,CAAC,sBAAMA,CAAN,CAAL,EAAeL,YAAYM,IAAZ,CAAiBD,CAAjB;AAChB;AACF,OAPD;AAQD;;AAED,WAAO,EAAEN,wBAAF,EAAeC,wBAAf,EAA4BC,0BAA5B,EAAP;AACD;AArBH,CApDkB,EA4ElB,EAAE;AACAf,QAAM,uBADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEC,WAAS;AAHX,CA5EkB,EAkFlB,EAAE;AACAF,QAAM,iBADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEoB,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,MAAnB,MAA+B,CAAC,CAAvD;AAAA,GAHd;AAIEtB,WAAS,IAJX,EAIiB;AACfuB,YAAU,UALZ;AAMEC,SAAO,cANT;AAOEC,WAAS,CACP;AACEC,UAAM,WADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAPI,EAUJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAVI,EAaJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAbI,EAgBJ;AACDuB,UAAM,SADL;AAEDvB,WAAO;AAFN,GAhBI,EAmBJ;AACDuB,UAAM,SADL;AAEDvB,WAAO;AAFN,GAnBI;AAPX,CAlFkB,EAmHlB,EAAE;;;;;AAKAL,QAAM,iBALR;AAMEC,gBAAc,CAAE,WAAF,CANhB;AAOEoB,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,SAAnB,MAAkC,CAAC,CAA1D;AAAA,GAPd;AAQEtB,WAAS,IARX,EAQiB;AACfuB,YAAU,UATZ;AAUEC,SAAO,cAVT;AAWEC,WAAS,CACP;AACEC,UAAM,UADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAPI,EAUJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAVI,EAaJ;AACDuB,UAAM,SADL;AAEDvB,WAAO;AAFN,GAbI,EAgBJ;AACDuB,UAAM,SADL;AAEDvB,WAAO;AAFN,GAhBI,EAmBJ;AACDuB,UAAM,SADL;AAEDvB,WAAO;AAFN,GAnBI,EAsBJ;AACDuB,UAAM,UADL;AAEDvB,WAAO;AAFN,GAtBI,CAXX;AAsCEF,oBAAkB;AAAA,WAAU;AAC1B0B,uBAAiBxB,KADS;AAE1B;AACAyB,uBAAiBzB;AAHS,KAAV;AAAA;AAtCpB,CAnHkB,EAgKlB,EAAE;AACAL,QAAM,UADR;AAEEqB,cAAY;AAAA,WAAS,2BAAWC,MAAMC,IAAjB,KAA0B,CAAC,wBAAQD,MAAMC,IAAd,CAApC;AAAA,GAFd;AAGEtB,gBAAc,CAAE,WAAF,CAHhB;AAIEC,WAAS,OAJX;AAKEuB,YAAU,UALZ;AAMEC,SAAO,cANT;AAOEC,WAAS,CACP;AACEC,UAAM,OADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,kBADL;AAEDvB,WAAO;AAFN,GAJI;AAPX,CAhKkB,EAkLlB,EAAE;AACAL,QAAM,cADR;AAEEqB,cAAY;AAAA,WAAS,wBAAQC,MAAMC,IAAd,CAAT;AAAA,GAFd;AAGEtB,gBAAc,CAAE,WAAF,CAHhB;AAIEC,WAAS,MAJX;AAKEuB,YAAU,UALZ;AAMEC,SAAO,cANT;AAOEC,WAAS,wBAAS;AAChB,QAAMI,OAAO,CAAC;AACZH,YAAM,OADM;AAEZvB,aAAO;AAFK,KAAD,EAGV;AACDuB,YAAM,oBADL;AAEDvB,aAAO;AAFN,KAHU,EAMV;AACDuB,YAAM,WADL;AAEDvB,aAAO;AAFN,KANU,CAAb;;AAWA;AACA,QAAI,2BAAWiB,MAAMC,IAAjB,CAAJ,EAA4B;AAC1BQ,WAAKC,MAAL,CAAY,CAAZ,EAAe,CAAf,EAAkB;AAChBJ,cAAM,kBADU;AAEhBvB,eAAO;AAFS,OAAlB;AAID;;AAED,WAAO0B,IAAP;AACD,GA5BH;AA6BE5B,oBAAkB;AAAA,WAAU,EAAE8B,UAAU5B,KAAZ,EAAV;AAAA;AA7BpB,CAlLkB,EAmNlB,EAAE;AACAL,QAAM,aADR;AAEEC,gBAAc,CAAE,SAAF,CAFhB;AAGEC,WAAS,EAHX;AAIEuB,YAAU,UAJZ;AAKEC,SAAO,eALT;AAMEL,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,MAAnB,MAA+B,CAAC,CAAvD;AAAA,GANd;AAOEG,WAAS,CACP;AACEC,UAAM,WADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAPI,EAUJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAVI,EAaJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAbI,EAgBJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAhBI,EAmBJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAnBI;AAPX,CAnNkB,EAoPlB,EAAE;AACAL,QAAM,WADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS,IAHX;AAIEuB,YAAU,UAJZ;AAKEC,SAAO,YALT;AAMEL,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,MAAnB,MAA+B,CAAC,CAAvD;AAAA,GANd;AAOEG,WAAS,CACP;AACEC,UAAM,OADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,OADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,OADL;AAEDvB,WAAO;AAFN,GAPI;AAPX,CApPkB,EAyQlB,EAAE;AACAL,QAAM,aADR;AAEEC,gBAAc,CAAE,SAAF,CAFhB;AAGEC,WAAS,EAHX;AAIEuB,YAAU,UAJZ;AAKEC,SAAO,eALT;AAMEL,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,SAAnB,MAAkC,CAAC,CAA1D;AAAA,GANd;AAOEG,WAAS,CACP;AACEC,UAAM,WADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAPI,EAUJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAVI,EAaJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAbI,EAgBJ;AACDuB,UAAM,YADL;AAEDvB,WAAO;AAFN,GAhBI,EAmBJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAnBI;AAPX,CAzQkB,EA0SlB,EAAE;AACAL,QAAM,WADR;AAEEC,gBAAc,CAAE,WAAF,EAAe,SAAf,CAFhB;AAGEC,WAAS,IAHX;AAIEuB,YAAU,UAJZ;AAKEC,SAAO,eALT;AAMEL,cAAY;AAAA,WAASC,MAAMC,IAAN,IAAcD,MAAMC,IAAN,CAAWC,OAAX,CAAmB,SAAnB,MAAkC,CAAC,CAA1D;AAAA,GANd;AAOEG,WAAS,CACP;AACEC,UAAM,OADR;AAEEvB,WAAO;AAFT,GADO,EAIJ;AACDuB,UAAM,OADL;AAEDvB,WAAO;AAFN,GAJI,EAOJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAPI,EAUJ;AACDuB,UAAM,QADL;AAEDvB,WAAO;AAFN,GAVI;AAPX,CA1SkB,EAkUlB,EAAE;AACAL,QAAM,uBADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEC,WAAS;AAHX,CAlUkB,EAwUlB,EAAE;AACAF,QAAM,WADR;AAEEC,gBAAc,CAAE,WAAF,CAFhB;AAGEC,WAAS;AAHX,CAxUkB,CAApB;;kBA+UeH,W","file":"query-params.js","sourcesContent":["import { getCurrentDate, getCurrentTime } from '../util/time'\nimport { isTransit, isAccessMode, isCar, hasTransit, hasBike } from '../util/itinerary'\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n *\n * routingTypes: array of routing type(s) (ITINERARY, PROFILE, or both) this param applies to\n *\n * applicable: an optional function (accepting the current full query as a\n *   parameter) indicating whether this query parameter is applicable to the query.\n *   (Applicability is assumed if this function is not provided.)\n *\n * default: the default value for this parameter\n *\n * itineraryRewrite: an optional function for translating the key and/or value\n *   for ITINERARY mode only (e.g. 'to' is rewritten as 'toPlace'). Accepts the\n *   intial internal value as a function parameter.\n *\n * profileRewrite: an optional function for translating the value for PROFILE mode\n *\n * label: a text label for for onscreen display. May either be a text string or a\n *   function (accepting the current full query as a parameter) returning a string\n *\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n *\n * options: an array of text/value pairs used with a dropdown selector\n *\n * TODO: validation system for rewrite functions and/or better user documentation\n * TODO: alphabetize below list\n */\n\n// FIXME: Use for parsing URL values?\n// const stringToLocation = string => {\n//   const split = string.split(',')\n//   return split.length === 2\n//     ? {lat: split[0], lon: split[1]}\n//     : {lat: null, lon: null}\n// }\n\nconst queryParams = [\n  { /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n    name: 'from',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ fromPlace: `${value.lat},${value.lon}` }),\n    profileRewrite: value => ({ from: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  { /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n    name: 'to',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ toPlace: `${value.lat},${value.lon}` }),\n    profileRewrite: value => ({ to: { lat: value.lat, lon: value.lon } })\n    // FIXME: Use for parsing URL values?\n    // fromURL: stringToLocation\n  },\n\n  { /* date - the date of travel, in MM-DD-YYYY format */\n    name: 'date',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: getCurrentDate()\n  },\n\n  { /* time - the arrival/departure time for an itinerary trip, in HH:MM format */\n    name: 'time',\n    routingTypes: [ 'ITINERARY' ],\n    default: getCurrentTime()\n  },\n\n  { /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n    name: 'departArrive',\n    routingTypes: [ 'ITINERARY' ],\n    default: 'NOW',\n    itineraryRewrite: value => ({ arriveBy: (value === 'ARRIVE') })\n  },\n\n  { /* startTime - the start time for a profile trip, in HH:MM format */\n    name: 'startTime',\n    routingTypes: [ 'PROFILE' ],\n    default: '07:00'\n  },\n\n  { /* endTime - the end time for a profile trip, in HH:MM format */\n    name: 'endTime',\n    routingTypes: [ 'PROFILE' ],\n    default: '09:00'\n  },\n\n  { /* mode - the allowed modes for a trip, as a comma-separated list */\n    name: 'mode',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 'WALK,TRANSIT', // TODO: make this dependent on routingType?\n    profileRewrite: value => {\n      const accessModes = []\n      const directModes = []\n      const transitModes = []\n\n      if (value && value.length > 0) {\n        value.split(',').forEach(m => {\n          if (isTransit(m)) transitModes.push(m)\n          if (isAccessMode(m)) {\n            accessModes.push(m)\n            // TODO: make configurable whether direct-driving is considered\n            if (!isCar(m)) directModes.push(m)\n          }\n        })\n      }\n\n      return { accessModes, directModes, transitModes }\n    }\n  },\n\n  { /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n    name: 'showIntermediateStops',\n    routingTypes: [ 'ITINERARY' ],\n    default: true\n  },\n\n  { /* maxWalkDistance - the maximum distance in meters the user will walk. */\n    name: 'maxWalkDistance',\n    routingTypes: [ 'ITINERARY' ],\n    applicable: query => query.mode && query.mode.indexOf('WALK') !== -1,\n    default: 1207, // 3/4 mi.\n    selector: 'DROPDOWN',\n    label: 'Maximum Walk',\n    options: [\n      {\n        text: '1/10 mile',\n        value: 160.9\n      }, {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '3/4 mile',\n        value: 1207\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '5 miles',\n        value: 8047\n      }\n    ]\n  },\n\n  { /* maxBikeDistance - the maximum distance in meters the user will bike. Not\n     * actually an OTP parameter (maxWalkDistance doubles for biking) but we\n     * store it separately internally in order to allow different default values,\n     * options, etc.  Translated to 'maxWalkDistance' via the rewrite function.\n     */\n    name: 'maxBikeDistance',\n    routingTypes: [ 'ITINERARY' ],\n    applicable: query => query.mode && query.mode.indexOf('BICYCLE') !== -1,\n    default: 4828, // 3 mi.\n    selector: 'DROPDOWN',\n    label: 'Maximum Bike',\n    options: [\n      {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '3/4 mile',\n        value: 1207\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '3 miles',\n        value: 4828\n      }, {\n        text: '5 miles',\n        value: 8047\n      }, {\n        text: '10 miles',\n        value: 16093\n      }\n    ],\n    itineraryRewrite: value => ({\n      maxWalkDistance: value,\n      // ensures that the value is repopulated when loaded from URL params\n      maxBikeDistance: value\n    })\n  },\n\n  { /* optimize -- how to optimize a trip (non-bike trips) */\n    name: 'optimize',\n    applicable: query => hasTransit(query.mode) && !hasBike(query.mode),\n    routingTypes: [ 'ITINERARY' ],\n    default: 'QUICK',\n    selector: 'DROPDOWN',\n    label: 'Optimize for',\n    options: [\n      {\n        text: 'Speed',\n        value: 'QUICK'\n      }, {\n        text: 'Fewest Transfers',\n        value: 'TRANSFERS'\n      }\n    ]\n  },\n\n  { /* optimizeBike -- how to optimize an bike-based trip */\n    name: 'optimizeBike',\n    applicable: query => hasBike(query.mode),\n    routingTypes: [ 'ITINERARY' ],\n    default: 'SAFE',\n    selector: 'DROPDOWN',\n    label: 'Optimize for',\n    options: query => {\n      const opts = [{\n        text: 'Speed',\n        value: 'QUICK'\n      }, {\n        text: 'Bike-Friendly Trip',\n        value: 'SAFE'\n      }, {\n        text: 'Flat Trip',\n        value: 'FLAT'\n      }]\n\n      // Include transit-specific option, if applicable\n      if (hasTransit(query.mode)) {\n        opts.splice(1, 0, {\n          text: 'Fewest Transfers',\n          value: 'TRANSFERS'\n        })\n      }\n\n      return opts\n    },\n    itineraryRewrite: value => ({ optimize: value })\n  },\n\n\n  { /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n    name: 'maxWalkTime',\n    routingTypes: [ 'PROFILE' ],\n    default: 15,\n    selector: 'DROPDOWN',\n    label: 'Max Walk Time',\n    applicable: query => query.mode && query.mode.indexOf('WALK') !== -1,\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* walkSpeed -- the user's walking speed in m/s */\n    name: 'walkSpeed',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 1.34,\n    selector: 'DROPDOWN',\n    label: 'Walk Speed',\n    applicable: query => query.mode && query.mode.indexOf('WALK') !== -1,\n    options: [\n      {\n        text: '2 MPH',\n        value: 0.89\n      }, {\n        text: '3 MPH',\n        value: 1.34\n      }, {\n        text: '4 MPH',\n        value: 1.79\n      }\n    ]\n  },\n\n  { /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n    name: 'maxBikeTime',\n    routingTypes: [ 'PROFILE' ],\n    default: 20,\n    selector: 'DROPDOWN',\n    label: 'Max Bike Time',\n    applicable: query => query.mode && query.mode.indexOf('BICYCLE') !== -1,\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: 'bikeSpeed',\n    routingTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 3.58,\n    selector: 'DROPDOWN',\n    label: 'Bicycle Speed',\n    applicable: query => query.mode && query.mode.indexOf('BICYCLE') !== -1,\n    options: [\n      {\n        text: '6 MPH',\n        value: 2.68\n      }, {\n        text: '8 MPH',\n        value: 3.58\n      }, {\n        text: '10 MPH',\n        value: 4.47\n      }, {\n        text: '12 MPH',\n        value: 5.36\n      }\n    ]\n  },\n\n  { /* ignoreRealtimeUpdates -- if true, do not use realtime updates in routing */\n    name: 'ignoreRealtimeUpdates',\n    routingTypes: [ 'ITINERARY' ],\n    default: false\n  },\n\n  { /* companies -- tnc companies to query */\n    name: 'companies',\n    routingTypes: [ 'ITINERARY' ],\n    default: null\n  }\n]\n\nexport default queryParams\n"]}