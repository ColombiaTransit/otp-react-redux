{"version":3,"sources":["time.js"],"names":["formatDuration","formatTime","formatStopTime","getCurrentTime","getCurrentDate","seconds","dur","moment","duration","text","hours","minutes","ms","format","startOf"],"mappings":";;;;;QAQgBA,c,GAAAA,c;QAcAC,U,GAAAA,U;QAUAC,c,GAAAA,c;QAQAC,c,GAAAA,c;QAQAC,c,GAAAA,c;;AAhDhB;;;;;;AAEA;;;;;;AAMO,SAASJ,cAAT,CAAyBK,OAAzB,EAAkC;AACvC,MAAMC,MAAMC,iBAAOC,QAAP,CAAgBH,OAAhB,EAAyB,SAAzB,CAAZ;AACA,MAAII,OAAO,EAAX;AACA,MAAIH,IAAII,KAAJ,KAAc,CAAlB,EAAqBD,QAAQH,IAAII,KAAJ,KAAc,OAAtB;AACrBD,UAAQH,IAAIK,OAAJ,KAAgB,MAAxB;AACA,SAAOF,IAAP;AACD;;AAED;;;;;;AAMO,SAASR,UAAT,CAAqBW,EAArB,EAAyB;AAC9B,SAAO,sBAAOA,EAAP,EAAWC,MAAX,CAAkB,QAAlB,CAAP;AACD;;AAED;;;;;;AAMO,SAASX,cAAT,CAAyBG,OAAzB,EAAkC;AACvC,SAAO,wBAASS,OAAT,CAAiB,KAAjB,EAAwBT,OAAxB,CAAgCA,OAAhC,EAAyCQ,MAAzC,CAAgD,QAAhD,CAAP;AACD;;AAED;;;;AAIO,SAASV,cAAT,GAA2B;AAChC,SAAO,wBAASU,MAAT,CAAgB,OAAhB,CAAP;AACD;;AAED;;;;AAIO,SAAST,cAAT,GAA2B;AAChC,SAAO,wBAASS,MAAT,CAAgB,YAAhB,CAAP;AACD","file":"time.js","sourcesContent":["import moment from 'moment'\n\n/**\n * Formats an elapsed time duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDuration (seconds) {\n  const dur = moment.duration(seconds, 'seconds')\n  let text = ''\n  if (dur.hours() > 0) text += dur.hours() + ' hr, '\n  text += dur.minutes() + ' min'\n  return text\n}\n\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime (ms) {\n  return moment(ms).format('h:mm a')\n}\n\n/**\n * Formats a stop time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} seconds time since midnight in seconds\n * @returns {string} formatted text representation\n */\nexport function formatStopTime (seconds) {\n  return moment().startOf('day').seconds(seconds).format('h:mm a')\n}\n\n/**\n * Formats current time for use in OTP query\n * @returns {string} formatted text representation\n */\nexport function getCurrentTime () {\n  return moment().format('HH:mm')\n}\n\n/**\n * Formats current date for use in OTP query\n * @returns {string} formatted text representation\n */\nexport function getCurrentDate () {\n  return moment().format('YYYY-MM-DD')\n}\n"]}