{"version":3,"sources":["time.js"],"names":["getTimeFormat","formatDuration","formatTime","formatStopTime","getCurrentTime","getCurrentDate","config","dateTime","timeFormat","seconds","dur","moment","duration","text","hours","minutes","ms","options","offset","format","startOf"],"mappings":";;;;;QAEgBA,a,GAAAA,a;QAWAC,c,GAAAA,c;QAcAC,U,GAAAA,U;QAWAC,c,GAAAA,c;QAQAC,c,GAAAA,c;QAQAC,c,GAAAA,c;;AAtDhB;;;;;;AAEO,SAASL,aAAT,CAAwBM,MAAxB,EAAgC;AACrC,MAAIA,OAAOC,QAAP,IAAmBD,OAAOC,QAAP,CAAgBC,UAAvC,EAAmD,OAAOF,OAAOC,QAAP,CAAgBC,UAAvB;AACnD,SAAO,OAAP;AACD;;AAED;;;;;;AAMO,SAASP,cAAT,CAAyBQ,OAAzB,EAAkC;AACvC,MAAMC,MAAMC,iBAAOC,QAAP,CAAgBH,OAAhB,EAAyB,SAAzB,CAAZ;AACA,MAAII,OAAO,EAAX;AACA,MAAIH,IAAII,KAAJ,KAAc,CAAlB,EAAqBD,QAAQH,IAAII,KAAJ,KAAc,OAAtB;AACrBD,UAAQH,IAAIK,OAAJ,KAAgB,MAAxB;AACA,SAAOF,IAAP;AACD;;AAED;;;;;;AAMO,SAASX,UAAT,CAAqBc,EAArB,EAAyBC,OAAzB,EAAkC;AACvC,SAAO,sBAAOD,MAAMC,WAAWA,QAAQC,MAAnB,GAA4BD,QAAQC,MAApC,GAA6C,CAAnD,CAAP,EACJC,MADI,CACGF,WAAWA,QAAQE,MAAnB,GAA4BF,QAAQE,MAApC,GAA6C,OADhD,CAAP;AAED;;AAED;;;;;;AAMO,SAAShB,cAAT,CAAyBM,OAAzB,EAAkC;AACvC,SAAO,wBAASW,OAAT,CAAiB,KAAjB,EAAwBX,OAAxB,CAAgCA,OAAhC,EAAyCU,MAAzC,CAAgD,QAAhD,CAAP;AACD;;AAED;;;;AAIO,SAASf,cAAT,GAA2B;AAChC,SAAO,wBAASe,MAAT,CAAgB,OAAhB,CAAP;AACD;;AAED;;;;AAIO,SAASd,cAAT,GAA2B;AAChC,SAAO,wBAASc,MAAT,CAAgB,YAAhB,CAAP;AACD","file":"time.js","sourcesContent":["import moment from 'moment'\n\nexport function getTimeFormat (config) {\n  if (config.dateTime && config.dateTime.timeFormat) return config.dateTime.timeFormat\n  return 'HH:mm'\n}\n\n/**\n * Formats an elapsed time duration for display in narrative\n * TODO: internationalization\n * @param {number} seconds duration in seconds\n * @returns {string} formatted text representation\n */\nexport function formatDuration (seconds) {\n  const dur = moment.duration(seconds, 'seconds')\n  let text = ''\n  if (dur.hours() > 0) text += dur.hours() + ' hr, '\n  text += dur.minutes() + ' min'\n  return text\n}\n\n/**\n * Formats a time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} ms epoch time value in milliseconds\n * @returns {string} formatted text representation\n */\nexport function formatTime (ms, options) {\n  return moment(ms + (options && options.offset ? options.offset : 0))\n    .format(options && options.format ? options.format : 'HH:mm')\n}\n\n/**\n * Formats a stop time value for display in narrative\n * TODO: internationalization/timezone\n * @param {number} seconds time since midnight in seconds\n * @returns {string} formatted text representation\n */\nexport function formatStopTime (seconds) {\n  return moment().startOf('day').seconds(seconds).format('h:mm a')\n}\n\n/**\n * Formats current time for use in OTP query\n * @returns {string} formatted text representation\n */\nexport function getCurrentTime () {\n  return moment().format('HH:mm')\n}\n\n/**\n * Formats current date for use in OTP query\n * @returns {string} formatted text representation\n */\nexport function getCurrentDate () {\n  return moment().format('YYYY-MM-DD')\n}\n"]}