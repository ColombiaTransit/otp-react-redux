{"version":3,"sources":["state.js"],"names":["getActiveSearch","getActiveItineraries","getDefaultQuery","getRealtimeEffects","otpState","searches","activeSearchId","search","useRealtime","response","nonRealtimeResponse","plan","itineraries","getActiveItinerary","length","activeItinerary","hasValidLocation","locationKey","currentQuery","lat","lon","queryIsValid","params","window","qs","parse","location","hash","split","console","log","from","fromPlace","to","toPlace","routingType","name","departArrive","arriveBy","date","time","mode","realtimeItineraries","hasNonRealtimeItineraries","nonRealtimeItineraries","isAffectedByRealtimeData","duration","normalRoutes","legs","filter","leg","route","map","realtimeRoutes","normalDuration","realtimeDuration","routesDiffer","exceedsThreshold","Math","abs","config","realtimeEffectsDisplayThreshold"],"mappings":"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","file":"state.js","sourcesContent":["import qs from 'qs'\nimport isEqual from 'lodash.isequal'\n\nimport { getCurrentTime, getCurrentDate } from '../util/time'\nimport { coordsToString } from '../util/map'\n\n/**\n * Get the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an search object, or null if there is no active search\n */\n\nexport function getActiveSearch (otpState) {\n  return otpState.searches[otpState.activeSearchId]\n}\n\n/**\n * Get the active itineraries for the active search, which is dependent on\n * whether realtime or non-realtime results should be displayed\n * @param {Object} otpState the OTP state object\n * @return {Array}      array of itinerary objects from the OTP plan response,\n *                      or null if there is no active search\n */\nexport function getActiveItineraries (otpState) {\n  const search = getActiveSearch(otpState)\n  const {useRealtime} = otpState\n  // set response to use depending on useRealtime\n  const response = !search\n    ? null\n    : useRealtime ? search.response : search.nonRealtimeResponse\n  if (!response || !response.plan) return null\n  return response.plan.itineraries\n}\n\n/**\n * Get the active itinerary/profile for the active search object\n * @param {Object} otpState the OTP state object\n * @returns {Object} an itinerary object from the OTP plan response, or null if\n *   there is no active search or itinerary\n */\n\nfunction getActiveItinerary (otpState) {\n  const search = getActiveSearch(otpState)\n  const itineraries = getActiveItineraries(otpState)\n  if (!itineraries) return null\n  return itineraries.length > search.activeItinerary && search.activeItinerary >= 0\n    ? itineraries[search.activeItinerary]\n    : null\n}\nexport { getActiveItinerary }\n\n/**\n * Determine if the current query has a valid location, including lat/lon\n * @param {Object} otpState the OTP state object\n * @param {string} locationKey the location key ('from' or 'to')\n * @returns {boolean}\n */\n\nfunction hasValidLocation (otpState, locationKey) {\n  return otpState.currentQuery[locationKey] &&\n    otpState.currentQuery[locationKey].lat &&\n    otpState.currentQuery[locationKey].lon\n}\nexport { hasValidLocation }\n\n/**\n * Determine if the current query is valid\n * @param {Object} otpState the OTP state object\n * @returns {boolean}\n */\n\nfunction queryIsValid (otpState) {\n  return hasValidLocation(otpState, 'from') &&\n    hasValidLocation(otpState, 'to')\n    // TODO: add mode validation\n    // TODO: add date/time validation\n}\nexport { queryIsValid }\n\nexport function getDefaultQuery () {\n  let params = {}\n  if (typeof (window) !== 'undefined') {\n    params = qs.parse(window.location.hash.split('#plan?')[1])\n  }\n  console.log(params)\n  const from = (params.fromPlace && params.fromPlace.split(',')) || []\n  const to = (params.toPlace && params.toPlace.split(',')) || []\n  return {\n    routingType: 'ITINERARY',\n    from: from.length ? {\n      name: coordsToString(from) || null,\n      lat: from[0] || null,\n      lon: from[1] || null\n    } : null,\n    to: to.length ? {\n      name: coordsToString(to) || null,\n      lat: to[0] || null,\n      lon: to[1] || null\n    } : null,\n    departArrive: params.arriveBy === 'true'\n      ? 'ARRIVE'\n      : params.arriveBy === 'false'\n      ? 'DEPART'\n      : 'NOW',\n    date: params.date || getCurrentDate(),\n    time: params.time || getCurrentTime(),\n    mode: params.mode\n  }\n}\n\nexport function getRealtimeEffects (otpState) {\n  const search = getActiveSearch(otpState)\n\n  const realtimeItineraries = search &&\n    search.response &&\n    search.response.plan\n      ? search.response.plan.itineraries\n      : null\n\n  const hasNonRealtimeItineraries = search &&\n    search.nonRealtimeResponse &&\n    search.nonRealtimeResponse.plan\n\n  const nonRealtimeItineraries = hasNonRealtimeItineraries\n    ? search.nonRealtimeResponse.plan.itineraries\n    : null\n\n  const isAffectedByRealtimeData = !!(\n    realtimeItineraries &&\n    hasNonRealtimeItineraries &&\n    // FIXME: Are realtime impacts only indicated by a change in the duration\n    // of the first itinerary\n    realtimeItineraries[0].duration !== nonRealtimeItineraries[0].duration\n  )\n\n  const normalRoutes = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const realtimeRoutes = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].legs.filter(leg => !!leg.route).map(leg => leg.route)\n    : []\n\n  const normalDuration = isAffectedByRealtimeData && nonRealtimeItineraries\n    ? nonRealtimeItineraries[0].duration : 0\n\n  const realtimeDuration = isAffectedByRealtimeData && realtimeItineraries\n    ? realtimeItineraries[0].duration : 0\n  return {\n    isAffectedByRealtimeData,\n    normalRoutes,\n    realtimeRoutes,\n    routesDiffer: !isEqual(normalRoutes, realtimeRoutes),\n    normalDuration,\n    realtimeDuration,\n    exceedsThreshold: Math.abs(normalDuration - realtimeDuration) >= otpState.config.realtimeEffectsDisplayThreshold\n  }\n  // // TESTING: Return this instead to simulate a realtime-affected itinerary.\n  // return {\n  //   isAffectedByRealtimeData: true,\n  //   normalRoutes: ['10', '2', '10'],\n  //   realtimeRoutes: ['1', '2'],\n  //   routesDiffer: true,\n  //   normalDuration: 1000,\n  //   realtimeDuration: 800,\n  //   exceedsThreshold: true\n  // }\n}\n"]}