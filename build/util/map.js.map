{"version":3,"sources":["map.js"],"names":["latlngToString","coordsToString","stringToCoords","constructLocation","itineraryToTransitive","isBikeshareStation","latlng","lat","toFixed","lng","lon","coords","length","map","c","join","str","split","name","itin","includeGeometry","tdata","journeys","streetEdges","places","patterns","routes","stops","streetEdgeId","patternId","journey","journey_id","journey_name","segments","push","place_id","place_lat","legs","from","place_lon","to","forEach","leg","mode","fromPlaceId","bikeShareId","toPlaceId","segment","type","hailedCar","arc","edge_id","geometry","legGeometry","place_name","hasInterStopGeometry","interStopGeometry","intermediateStops","ptnId","pattern","pattern_id","pattern_name","route_id","routeId","stopId","stop_id","stop_name","stop_lat","stop_lon","entries","i","stop","points","agency_id","agencyId","route_short_name","routeShortName","route_long_name","routeLongName","route_type","routeType","route_color","routeColor","from_stop_index","to_stop_index","k","place","lastIndexOf"],"mappings":"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","file":"map.js","sourcesContent":["import { isTransit } from './itinerary'\n\nexport function latlngToString (latlng) {\n  return latlng && `${latlng.lat.toFixed(5)}, ${(latlng.lng || latlng.lon).toFixed(5)}`\n}\n\nexport function coordsToString (coords) {\n  return coords.length && coords.map(c => (+c).toFixed(5)).join(', ')\n}\n\nexport function stringToCoords (str) {\n  return (str && str.split(',').map(c => +c)) || []\n}\n\nexport function constructLocation (latlng) {\n  return {\n    name: latlngToString(latlng),\n    lat: latlng.lat,\n    lon: latlng.lng\n  }\n}\n\nexport function itineraryToTransitive (itin, includeGeometry) {\n  // console.log('itineraryToTransitive', itin);\n  const tdata = {\n    journeys: [],\n    streetEdges: [],\n    places: [],\n    patterns: [],\n    routes: [],\n    stops: []\n  }\n  const routes = {}\n  const stops = {}\n  let streetEdgeId = 0\n  let patternId = 0\n\n  const journey = {\n    journey_id: 'itin',\n    journey_name: 'Iterarary-derived Journey',\n    segments: []\n  }\n\n  // add 'from' and 'to' places to the tdata places array\n  tdata.places.push({\n    place_id: 'from',\n    place_lat: itin.legs[0].from.lat,\n    place_lon: itin.legs[0].from.lon\n  })\n  tdata.places.push({\n    place_id: 'to',\n    place_lat: itin.legs[itin.legs.length - 1].to.lat,\n    place_lon: itin.legs[itin.legs.length - 1].to.lon\n  })\n\n  itin.legs.forEach(leg => {\n    if (leg.mode === 'WALK' || leg.mode === 'BICYCLE' || leg.mode === 'CAR') {\n      const fromPlaceId = leg.from.bikeShareId\n        ? `bicycle_rent_station_${leg.from.bikeShareId}`\n        : `itin_street_${streetEdgeId}_from`\n      const toPlaceId = leg.to.bikeShareId\n        ? `bicycle_rent_station_${leg.to.bikeShareId}`\n        : `itin_street_${streetEdgeId}_to`\n\n      const segment = {\n        type: leg.mode,\n        streetEdges: [streetEdgeId],\n        from: { type: 'PLACE', place_id: fromPlaceId },\n        to: { type: 'PLACE', place_id: toPlaceId }\n      }\n      // For TNC segments, draw using an arc\n      if (leg.mode === 'CAR' && leg.hailedCar) segment.arc = true\n      journey.segments.push(segment)\n\n      tdata.streetEdges.push({\n        edge_id: streetEdgeId,\n        geometry: leg.legGeometry\n      })\n      tdata.places.push({\n        place_id: fromPlaceId,\n        place_name: leg.from.name,\n        place_lat: leg.from.lat,\n        place_lon: leg.from.lon\n      })\n      tdata.places.push({\n        place_id: toPlaceId,\n        place_name: leg.to.name,\n        place_lat: leg.to.lat,\n        place_lon: leg.to.lon\n      })\n      streetEdgeId++\n    }\n    if (isTransit(leg.mode)) {\n      // determine if we have valid inter-stop geometry\n      const hasInterStopGeometry =\n        leg.interStopGeometry &&\n        leg.interStopGeometry.length === leg.intermediateStops.length + 1\n\n      // create leg-specific pattern\n      const ptnId = 'ptn_' + patternId\n      const pattern = {\n        pattern_id: ptnId,\n        pattern_name: 'Pattern ' + patternId,\n        route_id: leg.routeId,\n        stops: []\n      }\n\n      // add 'from' stop to stops dictionary and pattern object\n      stops[leg.from.stopId] = {\n        stop_id: leg.from.stopId,\n        stop_name: leg.from.name,\n        stop_lat: leg.from.lat,\n        stop_lon: leg.from.lon\n      }\n      pattern.stops.push({ stop_id: leg.from.stopId })\n\n      // add intermediate stops to stops dictionary and pattern object\n      for (const [i, stop] of leg.intermediateStops.entries()) {\n        stops[stop.stopId] = {\n          stop_id: stop.stopId,\n          stop_name: stop.name,\n          stop_lat: stop.lat,\n          stop_lon: stop.lon\n        }\n        pattern.stops.push({\n          stop_id: stop.stopId,\n          geometry: hasInterStopGeometry && leg.interStopGeometry[i].points\n        })\n      }\n\n      // add 'to' stop to stops dictionary and pattern object\n      stops[leg.to.stopId] = {\n        stop_id: leg.to.stopId,\n        stop_name: leg.to.name,\n        stop_lat: leg.to.lat,\n        stop_lon: leg.to.lon\n      }\n      pattern.stops.push({\n        stop_id: leg.to.stopId,\n        geometry: hasInterStopGeometry && leg.interStopGeometry[leg.interStopGeometry.length - 1].points\n      })\n\n      // add route to the route dictionary\n      routes[leg.routeId] = {\n        agency_id: leg.agencyId,\n        route_id: leg.routeId,\n        route_short_name: leg.routeShortName || '',\n        route_long_name: leg.routeLongName || '',\n        route_type: leg.routeType,\n        route_color: leg.routeColor\n      }\n\n      // add the pattern to the tdata patterns array\n      tdata.patterns.push(pattern)\n\n      // add the pattern refrerence to the journey object\n      journey.segments.push({\n        type: 'TRANSIT',\n        patterns: [{\n          pattern_id: ptnId,\n          from_stop_index: 0,\n          to_stop_index: (leg.intermediateStops.length + 2) - 1\n        }]\n      })\n\n      patternId++\n    }\n  })\n\n  // add the routes and stops to the tdata arrays\n  for (const k in routes) tdata.routes.push(routes[k])\n  for (const k in stops) tdata.stops.push(stops[k])\n\n  // add the journey to the tdata journeys array\n  tdata.journeys.push(journey)\n\n  // console.log('derived tdata', tdata);\n  return tdata\n}\n\nexport function isBikeshareStation (place) {\n  return place.place_id.lastIndexOf('bicycle_rent_station') !== -1\n}\n"]}