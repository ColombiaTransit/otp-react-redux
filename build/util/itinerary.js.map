{"version":3,"sources":["itinerary.js"],"names":["isTransit","hasTransit","hasCar","hasBike","isWalk","isBicycle","isBicycleRent","isCar","isAccessMode","getMapColor","getStepDirection","getStepStreetName","getLegModeString","getModeIcon","getItineraryBounds","getLegBounds","routeComparator","legLocationAtDistance","legElevationAtDistance","toSentenceCase","getLegMode","getPlaceName","getTNCLocation","transitModes","mode","includes","modesStr","split","get","startsWith","step","relativeDirection","absoluteDirection","toLowerCase","streetName","leg","hailedCar","routeLongName","indexOf","customIcons","modeStr","label","toUpperCase","itinerary","coords","legs","forEach","legCoords","polyline","toGeoJSON","legGeometry","points","coordinates","map","c","a","b","aComp","bComp","sortOrder","isNaN","parseInt","shortName","longName","distance","line","pt","geometry","e","traversed","ptArray","si","steps","length","elevation","ei","elevItem","first","push","second","i","elevDistanceSpan","pct","elevSpan","str","String","charAt","substr","companies","legMode","isTNC","rentedCar","rentedBike","place","address","name","type","location","lat","toFixed","lon"],"mappings":"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","file":"itinerary.js","sourcesContent":["import React from 'react'\nimport { latLngBounds } from 'leaflet'\nimport polyline from '@mapbox/polyline'\nimport turfAlong from 'turf-along'\n\nimport ModeIcon from '../components/icons/mode-icon'\n\n/**\n * @param  {string}  mode\n * @return {boolean}\n */\n\nexport const transitModes = ['TRAM', 'BUS', 'SUBWAY', 'FERRY', 'RAIL', 'GONDOLA']\n\nexport function isTransit (mode) {\n  return transitModes.includes(mode) || mode === 'TRANSIT'\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit (modesStr) {\n  for (const mode of modesStr.split(',')) {\n    if (isTransit(mode)) return true\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isCar(mode)) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasBike (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isBicycle(mode) || isBicycleRent(mode)) return true\n    }\n  }\n  return false\n}\n\n\nexport function isWalk (mode) {\n  mode = mode || this.get('mode')\n  return mode === 'WALK'\n}\n\nexport function isBicycle (mode) {\n  mode = mode || this.get('mode')\n  return mode === 'BICYCLE'\n}\n\nexport function isBicycleRent (mode) {\n  mode = mode || this.get('mode')\n  return mode === 'BICYCLE_RENT'\n}\n\nexport function isCar (mode) {\n  mode = mode || this.get('mode')\n  return mode.startsWith('CAR')\n}\n\nexport function isAccessMode (mode) {\n  return isWalk(mode) || isBicycle(mode) || isBicycleRent(mode) || isCar(mode)\n}\n\nexport function getMapColor (mode) {\n  mode = mode || this.get('mode')\n  if (mode === 'WALK') return '#444'\n  if (mode === 'BICYCLE') return '#0073e5'\n  if (mode === 'SUBWAY') return '#f00'\n  if (mode === 'RAIL') return '#b00'\n  if (mode === 'BUS') return '#080'\n  if (mode === 'TRAM') return '#800'\n  if (mode === 'FERRY') return '#008'\n  if (mode === 'CAR') return '#444'\n  return '#aaa'\n}\n\n// TODO: temporary code; handle via migrated OTP i18n language table\nexport function getStepDirection (step) {\n  switch (step.relativeDirection) {\n    case 'DEPART': return 'Head ' + step.absoluteDirection.toLowerCase()\n    case 'LEFT': return 'Left'\n    case 'HARD_LEFT': return 'Hard left'\n    case 'SLIGHTLY_LEFT': return 'Slight left'\n    case 'CONTINUE': return 'Continue'\n    case 'SLIGHTLY_RIGHT': return 'Slight right'\n    case 'RIGHT': return 'Right'\n    case 'HARD_RIGHT': return 'Hard right'\n    case 'CIRCLE_CLOCKWISE': return 'Follow circle clockwise'\n    case 'CIRCLE_COUNTERCLOCKWISE': return 'Follow circle counterclockwise'\n    case 'ELEVATOR': return 'Take elevator'\n    case 'UTURN_LEFT': return 'Left U-turn'\n    case 'UTURN_RIGHT': return 'Right U-turn'\n  }\n  return step.relativeDirection\n}\n\nexport function getStepStreetName (step) {\n  if (step.streetName === 'road') return 'Unnamed Road'\n  if (step.streetName === 'path') return 'Unnamed Path'\n  return step.streetName\n}\n\nexport function getLegModeString (leg) {\n  switch (leg.mode) {\n    case 'BICYCLE_RENT': return 'Biketown'\n    case 'CAR': return leg.hailedCar ? 'Ride' : 'Drive'\n    case 'GONDOLA': return 'Aerial Tram'\n    case 'TRAM':\n      if (leg.routeLongName.toLowerCase().indexOf('streetcar') !== -1) return 'Streetcar'\n      return 'Light Rail'\n  }\n  return toSentenceCase(leg.mode)\n}\n\nexport function getModeIcon (mode, customIcons) {\n  let modeStr = mode.mode || mode\n\n  // Special handling for CAR_HAIL, which can have company-specific icons\n  if (modeStr === 'CAR_HAIL') {\n    modeStr = `CAR_HAIL_${mode.label.toUpperCase()}`\n  }\n\n  // Check if there is a custom icon for this mode\n  if (customIcons && modeStr in customIcons) {\n    return customIcons[modeStr]\n  }\n\n  // Use default car icon for any car-based modes that didn't have custom icon\n  if (modeStr.startsWith('CAR')) modeStr = 'CAR'\n\n  // Otherwise, return the default icon\n  return <ModeIcon mode={modeStr} />\n}\n\nexport function getItineraryBounds (itinerary) {\n  let coords = []\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]])\n    coords = [...coords, ...legCoords]\n  })\n  return latLngBounds(coords)\n}\n\nexport function getLegBounds (leg) {\n  return latLngBounds(polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]])\n  )\n}\n\nexport function routeComparator (a, b) {\n  let aComp, bComp\n  if (a.sortOrder !== null && b.sortOrder !== null) {\n    aComp = a.sortOrder\n    bComp = b.sortOrder\n  } else if (!isNaN(parseInt(a.shortName)) && !isNaN(parseInt(b.shortName))) {\n    aComp = parseInt(a.shortName)\n    bComp = parseInt(b.shortName)\n  } else {\n    aComp = a.shortName || a.longName\n    bComp = b.shortName || b.longName\n  }\n  if (aComp < bComp) return -1\n  if (aComp > bComp) return 1\n  return 0\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance (leg, distance) {\n  if (!leg.legGeometry) return null\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points)\n    const pt = turfAlong(line, distance, 'meters')\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [\n        pt.geometry.coordinates[1],\n        pt.geometry.coordinates[0]\n      ]\n    }\n  } catch (e) { }\n\n  return null\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance (leg, distance) {\n  // Iterate through the leg steps, constructing a combined profile for this leg\n  let traversed = 0\n  const ptArray = []\n  for (let si = 0; si < leg.steps.length; si++) {\n    const step = leg.steps[si]\n    if (step.elevation && step.elevation.length > 0) {\n      for (let ei = 0; ei < step.elevation.length; ei++) {\n        const elevItem = step.elevation[ei]\n        if (elevItem.first > step.length) continue\n        ptArray.push({\n          first: traversed + elevItem.first,\n          second: elevItem.second\n        })\n      }\n    }\n    traversed += step.distance\n  }\n\n  // Iterate through the combined elevation profile\n  traversed = 0\n  for (let i = 1; i < ptArray.length; i++) {\n    const elevDistanceSpan = ptArray[i].first - ptArray[i - 1].first\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      const pct = (distance - traversed) / elevDistanceSpan\n      const elevSpan = ptArray[i].second - ptArray[i - 1].second\n      return ptArray[i - 1].second + elevSpan * pct\n    }\n    traversed += elevDistanceSpan\n  }\n\n  return null\n}\n\nexport function toSentenceCase (str) {\n  if (str == null) {\n    return ''\n  }\n  str = String(str)\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()\n}\n\n// Temporary hack for getting TNC details\nexport function getLegMode (companies, leg) {\n  let legMode = leg.mode\n  let isTNC = false\n  if (legMode === 'CAR' && leg.rentedCar) {\n    legMode = {\n      mode: 'CAR_RENT'\n    }\n  } else if (legMode === 'CAR' && companies) {\n    legMode = {\n      label: companies,\n      mode: 'CAR_HAIL'\n    }\n    isTNC = true\n  } else if (legMode === 'BICYCLE' && leg.rentedBike) {\n    legMode = {\n      mode: 'BICYCLE_RENT'\n    }\n  }\n\n  return {\n    legMode,\n    isTNC\n  }\n}\n\nexport function getPlaceName (place) {\n  // If address is provided (i.e. for carshare station, use it)\n  return place.address ? place.address.split(',')[0] : place.name\n}\n\nexport function getTNCLocation (leg, type) {\n  const location = leg[type]\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`\n}\n"]}