{"version":3,"sources":["itinerary.js"],"names":["getTransitModes","isTransit","hasTransit","hasCar","hasBike","isWalk","isBicycle","isBicycleRent","isCar","isAccessMode","getMapColor","getStepDirection","getStepStreetName","getLegModeString","getModeIcon","getItineraryBounds","getLegBounds","routeComparator","legLocationAtDistance","legElevationAtDistance","getElevationProfile","getTextWidth","toSentenceCase","getLegMode","getPlaceName","getTNCLocation","calculatePhysicalActivity","calculateFares","getTimeZoneOffset","transitModes","config","modes","map","tm","mode","includes","modesStr","split","startsWith","get","step","relativeDirection","absoluteDirection","toLowerCase","streetName","leg","hailedCar","routeLongName","indexOf","customIcons","modeStr","company","toUpperCase","itinerary","coords","legs","forEach","legCoords","polyline","toGeoJSON","legGeometry","points","coordinates","c","a","b","aComp","bComp","sortOrder","isNaN","parseInt","shortName","longName","distance","line","pt","geometry","e","traversed","unshift","i","length","start","elevDistanceSpan","console","warn","pct","elevSpan","steps","unitConversion","minElev","maxElev","gain","loss","previous","stepIndex","elevation","elev","diff","second","first","convertedElevation","push","text","font","canvas","document","createElement","context","getContext","metrics","measureText","width","str","String","charAt","substr","companies","legMode","isTNC","rentedCar","rentedBike","place","address","name","type","location","lat","toFixed","lon","walkDuration","bikeDuration","duration","caloriesBurned","transitFare","symbol","dollarsToString","dollars","centsToString","cents","Math","pow","fare","regular","reg","currency","defaultFractionDigits","minTNCFare","maxTNCFare","tncData","maxCost","minCost","dstOffset","Date","startTime","getTimezoneOffset","agencyTimeZoneOffset"],"mappings":"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","file":"itinerary.js","sourcesContent":["import React from 'react'\nimport { latLngBounds } from 'leaflet'\nimport polyline from '@mapbox/polyline'\nimport turfAlong from 'turf-along'\n\nimport ModeIcon from '../components/icons/mode-icon'\n\n// All OTP transit modes\nexport const transitModes = ['TRAM', 'BUS', 'SUBWAY', 'FERRY', 'RAIL', 'GONDOLA']\n\n/**\n * @param  {config} config OTP-RR configuration object\n * @return {Array}  List of all transit modes defined in config; otherwise default mode list\n */\n\nexport function getTransitModes (config) {\n  if (!config || !config.modes || !config.modes.transitModes) return transitModes\n  return config.modes.transitModes.map(tm => tm.mode)\n}\n\nexport function isTransit (mode) {\n  return transitModes.includes(mode) || mode === 'TRANSIT'\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are transit modes\n */\nexport function hasTransit (modesStr) {\n  for (const mode of modesStr.split(',')) {\n    if (isTransit(mode)) return true\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasCar (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isCar(mode)) return true\n    }\n  }\n  return false\n}\n\n/**\n * @param  {string}  modesStr a comma-separated list of OTP modes\n * @return {boolean} whether any of the modes are car-based modes\n */\nexport function hasBike (modesStr) {\n  if (modesStr) {\n    for (const mode of modesStr.split(',')) {\n      if (isBicycle(mode) || isBicycleRent(mode)) return true\n    }\n  }\n  return false\n}\n\nexport function isWalk (mode) {\n  if (!mode) return false\n\n  return mode === 'WALK'\n}\n\nexport function isBicycle (mode) {\n  if (!mode) return false\n\n  return mode === 'BICYCLE'\n}\n\nexport function isBicycleRent (mode) {\n  if (!mode) return false\n\n  return mode === 'BICYCLE_RENT'\n}\n\nexport function isCar (mode) {\n  if (!mode) return false\n  return mode.startsWith('CAR')\n}\n\nexport function isAccessMode (mode) {\n  return isWalk(mode) || isBicycle(mode) || isBicycleRent(mode) || isCar(mode)\n}\n\nexport function getMapColor (mode) {\n  mode = mode || this.get('mode')\n  if (mode === 'WALK') return '#444'\n  if (mode === 'BICYCLE') return '#0073e5'\n  if (mode === 'SUBWAY') return '#f00'\n  if (mode === 'RAIL') return '#b00'\n  if (mode === 'BUS') return '#080'\n  if (mode === 'TRAM') return '#800'\n  if (mode === 'FERRY') return '#008'\n  if (mode === 'CAR') return '#444'\n  return '#aaa'\n}\n\n// TODO: temporary code; handle via migrated OTP i18n language table\nexport function getStepDirection (step) {\n  switch (step.relativeDirection) {\n    case 'DEPART': return 'Head ' + step.absoluteDirection.toLowerCase()\n    case 'LEFT': return 'Left'\n    case 'HARD_LEFT': return 'Hard left'\n    case 'SLIGHTLY_LEFT': return 'Slight left'\n    case 'CONTINUE': return 'Continue'\n    case 'SLIGHTLY_RIGHT': return 'Slight right'\n    case 'RIGHT': return 'Right'\n    case 'HARD_RIGHT': return 'Hard right'\n    case 'CIRCLE_CLOCKWISE': return 'Follow circle clockwise'\n    case 'CIRCLE_COUNTERCLOCKWISE': return 'Follow circle counterclockwise'\n    case 'ELEVATOR': return 'Take elevator'\n    case 'UTURN_LEFT': return 'Left U-turn'\n    case 'UTURN_RIGHT': return 'Right U-turn'\n  }\n  return step.relativeDirection\n}\n\nexport function getStepStreetName (step) {\n  if (step.streetName === 'road') return 'Unnamed Road'\n  if (step.streetName === 'path') return 'Unnamed Path'\n  return step.streetName\n}\n\nexport function getLegModeString (leg) {\n  switch (leg.mode) {\n    case 'BICYCLE_RENT': return 'Biketown'\n    case 'CAR': return leg.hailedCar ? 'Ride' : 'Drive'\n    case 'GONDOLA': return 'Aerial Tram'\n    case 'TRAM':\n      if (leg.routeLongName.toLowerCase().indexOf('streetcar') !== -1) return 'Streetcar'\n      return 'Light Rail'\n  }\n  return toSentenceCase(leg.mode)\n}\n\nexport function getModeIcon (mode, customIcons) {\n  let modeStr = mode.mode || mode\n\n  // Special handling for company-specific icons\n  if (mode.company) {\n    modeStr = `${modeStr}_${mode.company.toUpperCase()}`\n  }\n\n  // Check if there is a custom icon for this mode\n  if (customIcons && modeStr in customIcons) {\n    return customIcons[modeStr]\n  }\n\n  // Use default car icon for any car-based modes that didn't have custom icon\n  if (modeStr.startsWith('CAR')) modeStr = 'CAR'\n\n  // Otherwise, return the default icon\n  return <ModeIcon mode={modeStr} />\n}\n\nexport function getItineraryBounds (itinerary) {\n  let coords = []\n  itinerary.legs.forEach(leg => {\n    const legCoords = polyline\n      .toGeoJSON(leg.legGeometry.points)\n      .coordinates.map(c => [c[1], c[0]])\n    coords = [...coords, ...legCoords]\n  })\n  return latLngBounds(coords)\n}\n\nexport function getLegBounds (leg) {\n  return latLngBounds(polyline\n    .toGeoJSON(leg.legGeometry.points)\n    .coordinates.map(c => [c[1], c[0]])\n  )\n}\n\nexport function routeComparator (a, b) {\n  let aComp, bComp\n  if (a.sortOrder !== null && b.sortOrder !== null) {\n    aComp = a.sortOrder\n    bComp = b.sortOrder\n  } else if (!isNaN(parseInt(a.shortName)) && !isNaN(parseInt(b.shortName))) {\n    aComp = parseInt(a.shortName)\n    bComp = parseInt(b.shortName)\n  } else {\n    aComp = a.shortName || a.longName\n    bComp = b.shortName || b.longName\n  }\n  if (aComp < bComp) return -1\n  if (aComp > bComp) return 1\n  return 0\n}\n\n/* Returns an interpolated lat-lon at a specified distance along a leg */\n\nexport function legLocationAtDistance (leg, distance) {\n  if (!leg.legGeometry) return null\n\n  try {\n    const line = polyline.toGeoJSON(leg.legGeometry.points)\n    const pt = turfAlong(line, distance, 'meters')\n    if (pt && pt.geometry && pt.geometry.coordinates) {\n      return [\n        pt.geometry.coordinates[1],\n        pt.geometry.coordinates[0]\n      ]\n    }\n  } catch (e) { }\n\n  return null\n}\n\n/* Returns an interpolated elevation at a specified distance along a leg */\n\nexport function legElevationAtDistance (points, distance) {\n  // Iterate through the combined elevation profile\n  let traversed = 0\n  // If first point distance is not zero, insert starting point at zero with\n  // null elevation. Encountering this value should trigger the warning below.\n  if (points[0][0] > 0) {\n    points.unshift([0, null])\n  }\n  for (let i = 1; i < points.length; i++) {\n    const start = points[i - 1]\n    const elevDistanceSpan = points[i][0] - start[0]\n    if (distance >= traversed && distance <= traversed + elevDistanceSpan) {\n      // Distance falls within this point and the previous one;\n      // compute & return iterpolated elevation value\n      if (start[1] === null) {\n        console.warn('Elevation value does not exist for distance.', distance, traversed)\n        return null\n      }\n      const pct = (distance - traversed) / elevDistanceSpan\n      const elevSpan = points[i][1] - start[1]\n      return start[1] + elevSpan * pct\n    }\n    traversed += elevDistanceSpan\n  }\n  console.warn('Elevation value does not exist for distance.', distance, traversed)\n  return null\n}\n\n// Iterate through the steps, building the array of elevation points and\n// keeping track of the minimum and maximum elevations reached\nexport function getElevationProfile (steps, unitConversion = 1) {\n  let minElev = 100000\n  let maxElev = -100000\n  let traversed = 0\n  let gain = 0\n  let loss = 0\n  let previous = null\n  const points = []\n  steps.forEach((step, stepIndex) => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance\n      return\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i]\n      if (previous) {\n        const diff = (elev.second - previous.second) * unitConversion\n        if (diff > 0) gain += diff\n        else loss += diff\n      }\n      if (i === 0 && elev.first !== 0) {\n        // console.warn(`No elevation data available for step ${stepIndex}-${i} at beginning of segment`, elev)\n      }\n      const convertedElevation = elev.second * unitConversion\n      if (convertedElevation < minElev) minElev = convertedElevation\n      if (convertedElevation > maxElev) maxElev = convertedElevation\n      points.push([traversed + elev.first, elev.second])\n      // Insert \"filler\" point if the last point in elevation profile does not\n      // reach the full distance of the step.\n      if (i === step.elevation.length - 1 && elev.first !== step.distance) {\n        // points.push([traversed + step.distance, elev.second])\n      }\n      previous = elev\n    }\n    traversed += step.distance\n  })\n  return { maxElev, minElev, points, traversed, gain, loss }\n}\n\n/**\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\n *\n * @param {string} text The text to be rendered.\n * @param {string} font The css font descriptor that text is to be rendered with (e.g. \"bold 14px verdana\").\n *\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\n */\nexport function getTextWidth (text, font = '22px Arial') {\n  // re-use canvas object for better performance\n  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'))\n  var context = canvas.getContext('2d')\n  context.font = font\n  var metrics = context.measureText(text)\n  return metrics.width\n}\n\nexport function toSentenceCase (str) {\n  if (str == null) {\n    return ''\n  }\n  str = String(str)\n  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase()\n}\n\n// Temporary hack for getting TNC details\n// TODO: do we still need this?\nexport function getLegMode (companies, leg) {\n  let legMode = leg.mode\n  let isTNC = false\n  if (legMode === 'CAR' && leg.rentedCar) {\n    legMode = {\n      company: companies,\n      mode: 'CAR_RENT'\n    }\n  } else if (legMode === 'CAR' && companies) {\n    legMode = {\n      company: companies,\n      mode: 'CAR_HAIL'\n    }\n    isTNC = true\n  } else if (legMode === 'BICYCLE' && leg.rentedBike) {\n    legMode = {\n      mode: 'BICYCLE_RENT'\n    }\n  }\n\n  return {\n    legMode,\n    isTNC\n  }\n}\n\nexport function getPlaceName (place) {\n  // If address is provided (i.e. for carshare station, use it)\n  return place.address ? place.address.split(',')[0] : place.name\n}\n\nexport function getTNCLocation (leg, type) {\n  const location = leg[type]\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`\n}\n\nexport function calculatePhysicalActivity (itinerary) {\n  let walkDuration = 0\n  let bikeDuration = 0\n  for (const leg of itinerary.legs) {\n    if (leg.mode.startsWith('WALK')) walkDuration += leg.duration\n    if (leg.mode.startsWith('BICYCLE')) bikeDuration += leg.duration\n  }\n  const caloriesBurned =\n    walkDuration / 3600 * 280 +\n    bikeDuration / 3600 * 290\n  return {\n    bikeDuration,\n    caloriesBurned,\n    walkDuration\n  }\n}\n\nexport function calculateFares (itinerary) {\n  let transitFare = 0\n  let symbol = '$' // default to USD\n  let dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`\n  let centsToString = cents => `${symbol}${(cents / Math.pow(10, 2)).toFixed(2)}`\n  if (itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular) {\n    const reg = itinerary.fare.fare.regular\n    symbol = reg.currency.symbol\n    transitFare = reg.cents\n    centsToString = cents => `${symbol}${(cents / Math.pow(10, reg.currency.defaultFractionDigits)).toFixed(reg.currency.defaultFractionDigits)}`\n    dollarsToString = dollars => `${symbol}${dollars.toFixed(2)}`\n  }\n\n  // Process any TNC fares\n  let minTNCFare = 0\n  let maxTNCFare = 0\n  for (const leg of itinerary.legs) {\n    if (leg.mode === 'CAR' && leg.hailedCar && leg.tncData) {\n      const { maxCost, minCost } = leg.tncData\n      // TODO: Support non-USD\n      minTNCFare += minCost\n      maxTNCFare += maxCost\n    }\n  }\n  return {\n    centsToString,\n    dollarsToString,\n    maxTNCFare,\n    minTNCFare,\n    transitFare\n  }\n}\n\nexport function getTimeZoneOffset (itinerary) {\n  if (!itinerary.legs || !itinerary.legs.length) return 0\n\n  // Determine if there is a DST offset between now and the itinerary start date\n  const dstOffset = new Date(itinerary.startTime).getTimezoneOffset() - new Date().getTimezoneOffset()\n\n  return itinerary.legs[0].agencyTimeZoneOffset + (new Date().getTimezoneOffset() + dstOffset) * 60000\n}\n"]}