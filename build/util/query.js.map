{"version":3,"sources":["query.js"],"names":["getQueryParamProperty","ensureSingleAccessMode","setUrlSearch","getUrlParams","updateOtpUrlParams","updateUiUrlParams","getUiUrlParams","getJSONFromStorage","getTripOptionsFromQuery","isNotDefaultQuery","getDefaultQuery","defaultParams","paramInfo","property","query","queryModes","accessCount","filter","m","length","firstAccess","find","push","params","base","window","location","href","split","history","pushState","qs","stringify","parse","otpParams","state","key","indexOf","forEach","uiParams","startsWith","otpState","activeSearch","ui_activeItinerary","activeItinerary","name","nullIfNotFound","itemAsString","localStorage","getItem","json","JSON","e","console","warn","keepPlace","options","time","departArrive","date","from","to","config","activeModes","mode","defaultModes","concat","queryIsDifferent","modesEqual","sort","every","value","index","queryParams","qp","param","routingTypes","includes","routingType","applicable","default","defaultQuery"],"mappings":"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","file":"query.js","sourcesContent":["import qs from 'qs'\n\nimport { getTransitModes, isAccessMode } from './itinerary'\nimport queryParams from './query-params'\nimport { getActiveSearch } from './state'\n\n/* The list of default parameters considered in the settings panel */\n\nexport const defaultParams = [\n  'wheelchair',\n  'maxWalkDistance',\n  'maxWalkTime',\n  'walkSpeed',\n  'maxBikeDistance',\n  'maxBikeTime',\n  'bikeSpeed',\n  'optimize',\n  'optimizeBike'\n]\n\n/* A function to retrieve a property value from an entry in the query-params\n * table, checking for either a static value or a function */\n\nexport function getQueryParamProperty (paramInfo, property, query) {\n  return typeof paramInfo[property] === 'function'\n    ? paramInfo[property](query)\n    : paramInfo[property]\n}\n\nexport function ensureSingleAccessMode (queryModes) {\n  // Count the number of access modes\n  const accessCount = queryModes.filter(m => isAccessMode(m)).length\n\n  // If multiple access modes are specified, keep only the first one\n  if (accessCount > 1) {\n    const firstAccess = queryModes.find(m => isAccessMode(m))\n    queryModes = queryModes.filter(m => !isAccessMode(m) || m === firstAccess)\n\n  // If no access modes are specified, add 'WALK' as the default\n  } else if (accessCount === 0) {\n    queryModes.push('WALK')\n  }\n\n  return queryModes\n}\n\n/**\n * Update the browser/URL history with new parameters\n * NOTE: This has not been tested for profile-based journeys.\n * FIXME: Should we be using react-router-redux for this?\n */\n\nexport function setUrlSearch (params) {\n  const base = window.location.href.split('?')[0]\n  window.history.pushState(params, '', `${base}?${qs.stringify(params)}`)\n}\n\nexport function getUrlParams () {\n  return qs.parse(window.location.href.split('?')[1])\n}\n\n/**\n * Update the OTP Query parameters in the URL. Leaves any other existing URL\n * parameters unchanged.\n */\n\nexport function updateOtpUrlParams (otpParams) {\n  const params = {}\n\n  // Get all OTP-specific params, which will be retained unchanged in the URL\n  if (window.history.state) {\n    Object.keys(window.history.state)\n      .filter(key => key.indexOf('_') !== -1)\n      .forEach(key => { params[key] = window.history.state[key] })\n  }\n\n  // Merge in the provided OTP params and update the URL\n  setUrlSearch(Object.assign(params, otpParams))\n}\n\n/**\n * Update the UI-state parameters in the URL. Leaves any other existing URL\n * parameters unchanged.\n */\n\nexport function updateUiUrlParams (uiParams) {\n  const params = {}\n\n  // Get all non-OTP params, which will be retained unchanged in the URL\n  if (window.history.state) {\n    Object.keys(window.history.state)\n      .filter(key => !key.startsWith('ui_'))\n      .forEach(key => { params[key] = window.history.state[key] })\n  }\n\n  // Merge in the provided UI params and update the URL\n  setUrlSearch(Object.assign(params, uiParams))\n}\n\n/**\n * Assemble any UI-state properties to be tracked via URL into a single object\n * TODO: Expand to include additional UI properties\n */\n\nexport function getUiUrlParams (otpState) {\n  const activeSearch = getActiveSearch(otpState)\n  const uiParams = {\n    ui_activeItinerary: activeSearch ? activeSearch.activeItinerary : 0\n  }\n  return uiParams\n}\n\nexport function getJSONFromStorage (name, nullIfNotFound = false) {\n  let itemAsString\n  try {\n    itemAsString = window.localStorage.getItem(name)\n    const json = JSON.parse(itemAsString)\n    if (json) return json\n    else return nullIfNotFound ? null : {}\n  } catch (e) {\n    // Catch any errors associated with parsing bad JSON.\n    console.warn(e, itemAsString)\n    return nullIfNotFound ? null : {}\n  }\n}\n\nexport function getTripOptionsFromQuery (query, keepPlace = false) {\n  const options = Object.assign({}, query)\n  // Delete time/date options and from/to\n  delete options.time\n  delete options.departArrive\n  delete options.date\n  if (!keepPlace) {\n    delete options.from\n    delete options.to\n  }\n  return options\n}\n\n/**\n * Determines whether the specified query differs from the default query, i.e.,\n * whether the user has modified any trip options (including mode) from their\n * default values.\n */\nexport function isNotDefaultQuery (query, config) {\n  const activeModes = query.mode.split(',')\n  const defaultModes = getTransitModes(config).concat(['WALK'])\n  let queryIsDifferent = false\n  const modesEqual = (activeModes.length === defaultModes.length) &&\n    activeModes.sort().every((value, index) => { return value === defaultModes.sort()[index] })\n\n  if (!modesEqual) {\n    queryIsDifferent = true\n  } else {\n    defaultParams.forEach(param => {\n      const paramInfo = queryParams.find(qp => qp.name === param)\n      // Check that the parameter applies to the specified routingType\n      if (!paramInfo.routingTypes.includes(query.routingType)) return\n      // Check that the applicability test (if provided) is satisfied\n      if (typeof paramInfo.applicable === 'function' &&\n        !paramInfo.applicable(query, config)) return\n      if (query[param] !== paramInfo.default) {\n        queryIsDifferent = true\n      }\n    })\n  }\n  return queryIsDifferent\n}\n\nexport function getDefaultQuery () {\n  const defaultQuery = { routingType: 'ITINERARY' }\n  queryParams.filter(qp => 'default' in qp).forEach(qp => {\n    defaultQuery[qp.name] = qp.default\n  })\n  return defaultQuery\n}\n"]}