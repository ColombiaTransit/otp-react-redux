{"version":3,"sources":["query.js"],"names":["ensureSingleAccessMode","setUrlSearch","updateOtpUrlParams","updateUiUrlParams","getUiUrlParams","queryModes","accessCount","filter","m","length","firstAccess","find","push","params","base","window","location","href","split","history","pushState","qs","stringify","otpParams","state","key","indexOf","forEach","uiParams","startsWith","otpState","activeSearch","ui_activeItinerary","activeItinerary"],"mappings":";;;;;;;;;;;;;;QAKgBA,sB,GAAAA,sB;QAuBAC,Y,GAAAA,Y;QAUAC,kB,GAAAA,kB;QAmBAC,iB,GAAAA,iB;QAmBAC,c,GAAAA,c;;AA5EhB;;;;AAEA;;AACA;;;;AAEO,SAASJ,sBAAT,CAAiCK,UAAjC,EAA6C;AAClD;AACA,MAAMC,cAAcD,WAAWE,MAAX,CAAkB;AAAA,WAAK,6BAAaC,CAAb,CAAL;AAAA,GAAlB,EAAwCC,MAA5D;;AAEA;AACA,MAAIH,cAAc,CAAlB,EAAqB;AACnB,QAAMI,cAAcL,WAAWM,IAAX,CAAgB;AAAA,aAAK,6BAAaH,CAAb,CAAL;AAAA,KAAhB,CAApB;AACAH,iBAAaA,WAAWE,MAAX,CAAkB;AAAA,aAAK,CAAC,6BAAaC,CAAb,CAAD,IAAoBA,MAAME,WAA/B;AAAA,KAAlB,CAAb;;AAEF;AACC,GALD,MAKO,IAAIJ,gBAAgB,CAApB,EAAuB;AAC5BD,eAAWO,IAAX,CAAgB,MAAhB;AACD;;AAED,SAAOP,UAAP;AACD;;AAED;;;;;;AAMO,SAASJ,YAAT,CAAuBY,MAAvB,EAA+B;AACpC,MAAMC,OAAOC,OAAOC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAb;AACAH,SAAOI,OAAP,CAAeC,SAAf,CAAyBP,MAAzB,EAAiC,EAAjC,EAAwCC,IAAxC,SAAgDO,aAAGC,SAAH,CAAaT,MAAb,CAAhD;AACD;;AAED;;;;;AAKO,SAASX,kBAAT,CAA6BqB,SAA7B,EAAwC;AAC7C,MAAMV,SAAS,EAAf;;AAEA;AACA,MAAIE,OAAOI,OAAP,CAAeK,KAAnB,EAA0B;AACxB,wBAAYT,OAAOI,OAAP,CAAeK,KAA3B,EACGjB,MADH,CACU;AAAA,aAAOkB,IAAIC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA7B;AAAA,KADV,EAEGC,OAFH,CAEW,eAAO;AAAEd,aAAOY,GAAP,IAAcV,OAAOI,OAAP,CAAeK,KAAf,CAAqBC,GAArB,CAAd;AAAyC,KAF7D;AAGD;;AAED;AACAxB,eAAa,sBAAcY,MAAd,EAAsBU,SAAtB,CAAb;AACD;;AAED;;;;;AAKO,SAASpB,iBAAT,CAA4ByB,QAA5B,EAAsC;AAC3C,MAAMf,SAAS,EAAf;;AAEA;AACA,MAAIE,OAAOI,OAAP,CAAeK,KAAnB,EAA0B;AACxB,wBAAYT,OAAOI,OAAP,CAAeK,KAA3B,EACGjB,MADH,CACU;AAAA,aAAO,CAACkB,IAAII,UAAJ,CAAe,KAAf,CAAR;AAAA,KADV,EAEGF,OAFH,CAEW,eAAO;AAAEd,aAAOY,GAAP,IAAcV,OAAOI,OAAP,CAAeK,KAAf,CAAqBC,GAArB,CAAd;AAAyC,KAF7D;AAGD;;AAED;AACAxB,eAAa,sBAAcY,MAAd,EAAsBe,QAAtB,CAAb;AACD;;AAED;;;;;AAKO,SAASxB,cAAT,CAAyB0B,QAAzB,EAAmC;AACxC,MAAMC,eAAe,4BAAgBD,QAAhB,CAArB;AACA,MAAMF,WAAW;AACfI,wBAAoBD,eAAeA,aAAaE,eAA5B,GAA8C;AADnD,GAAjB;AAGA,SAAOL,QAAP;AACD","file":"query.js","sourcesContent":["import qs from 'qs'\n\nimport { isAccessMode } from './itinerary'\nimport { getActiveSearch } from './state'\n\nexport function ensureSingleAccessMode (queryModes) {\n  // Count the number of access modes\n  const accessCount = queryModes.filter(m => isAccessMode(m)).length\n\n  // If multiple access modes are specified, keep only the first one\n  if (accessCount > 1) {\n    const firstAccess = queryModes.find(m => isAccessMode(m))\n    queryModes = queryModes.filter(m => !isAccessMode(m) || m === firstAccess)\n\n  // If no access modes are specified, add 'WALK' as the default\n  } else if (accessCount === 0) {\n    queryModes.push('WALK')\n  }\n\n  return queryModes\n}\n\n/**\n * Update the browser/URL history with new parameters\n * NOTE: This has not been tested for profile-based journeys.\n * FIXME: Should we be using react-router-redux for this?\n */\n\nexport function setUrlSearch (params) {\n  const base = window.location.href.split('?')[0]\n  window.history.pushState(params, '', `${base}?${qs.stringify(params)}`)\n}\n\n/**\n * Update the OTP Query parameters in the URL. Leaves any other existing URL\n * parameters unchanged.\n */\n\nexport function updateOtpUrlParams (otpParams) {\n  const params = {}\n\n  // Get all non-OTP params, which will be retained unchanged in the URL\n  if (window.history.state) {\n    Object.keys(window.history.state)\n      .filter(key => key.indexOf('_') !== -1)\n      .forEach(key => { params[key] = window.history.state[key] })\n  }\n\n  // Merge in the provided OTP params and update the URL\n  setUrlSearch(Object.assign(params, otpParams))\n}\n\n/**\n * Update the UI-state parameters in the URL. Leaves any other existing URL\n * parameters unchanged.\n */\n\nexport function updateUiUrlParams (uiParams) {\n  const params = {}\n\n  // Get all non-OTP params, which will be retained unchanged in the URL\n  if (window.history.state) {\n    Object.keys(window.history.state)\n      .filter(key => !key.startsWith('ui_'))\n      .forEach(key => { params[key] = window.history.state[key] })\n  }\n\n  // Merge in the provided UI params and update the URL\n  setUrlSearch(Object.assign(params, uiParams))\n}\n\n/**\n * Assemble any UI-state properties to be tracked via URL into a single object\n * TODO: Expand to include additional UI properties\n */\n\nexport function getUiUrlParams (otpState) {\n  const activeSearch = getActiveSearch(otpState)\n  const uiParams = {\n    ui_activeItinerary: activeSearch ? activeSearch.activeItinerary : 0\n  }\n  return uiParams\n}\n"]}