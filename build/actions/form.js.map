{"version":3,"sources":["form.js"],"names":["setQueryParam","parseUrlQueryString","formChanged","settingQueryParam","changingForm","payload","dispatch","getState","queryString","params","qs","parse","substring","planParams","forEach","key","startsWith","planParamsToQuery","query","from","fromPlace","length","name","lat","lon","to","toPlace","departArrive","arriveBy","date","time","debouncedPlanTrip","lastDebouncePlanTimeMs","otpState","otp","currentQuery","format","config","autoPlan","debouncePlanTimeMs"],"mappings":"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","file":"form.js","sourcesContent":["import debounce from 'lodash.debounce'\nimport qs from 'qs'\nimport moment from 'moment'\nimport { createAction } from 'redux-actions'\n\nimport { routingQuery } from './api'\nimport { coordsToString, stringToCoords } from '../util/map'\nimport { queryIsValid } from '../util/state'\nimport { getCurrentTime, getCurrentDate } from '../util/time'\n\nexport const settingQueryParam = createAction('SET_QUERY_PARAM')\nexport const changingForm = createAction('FORM_CHANGED')\n\n/**\n * Action to update any specified query parameter. Replaces previous series of\n * parameter-specific actions.\n */\nexport function setQueryParam (payload) {\n  return function (dispatch, getState) {\n    dispatch(settingQueryParam(payload))\n    dispatch(formChanged())\n  }\n}\n\nexport function parseUrlQueryString (queryString) {\n  return function (dispatch, getState) {\n    // Trim the leading question mark\n    const params = qs.parse(queryString.substring(1))\n    // Filter out the OTP (i.e. non-UI) params and set the initial query\n    const planParams = {}\n    Object.keys(params).forEach(key => {\n      if (!key.startsWith('ui_')) planParams[key] = params[key]\n    })\n    // Convert strings to numbers/objects and dispatch\n    dispatch(setQueryParam(planParamsToQuery(planParams)))\n  }\n}\n\nfunction planParamsToQuery (params) {\n  const query = {}\n  for (var key in params) {\n    switch (key) {\n      case 'fromPlace':\n        const from = stringToCoords(params.fromPlace)\n        query.from = from.length ? {\n          name: coordsToString(from) || null,\n          lat: from[0] || null,\n          lon: from[1] || null\n        } : null\n        break\n      case 'toPlace':\n        const to = stringToCoords(params.toPlace)\n        query.to = to.length ? {\n          name: coordsToString(to) || null,\n          lat: to[0] || null,\n          lon: to[1] || null\n        } : null\n        break\n      case 'arriveBy':\n        query.departArrive = params.arriveBy === 'true'\n          ? 'ARRIVE'\n          : params.arriveBy === 'false'\n          ? 'DEPART'\n          : 'NOW'\n        break\n      case 'date':\n        query.date = params.date || getCurrentDate()\n        break\n      case 'time':\n        query.time = params.time || getCurrentTime()\n        break\n      default:\n        query[key] = params[key]\n    }\n  }\n  return query\n}\n\nlet debouncedPlanTrip  // store as variable here, so it can be reused.\nlet lastDebouncePlanTimeMs\n\nexport function formChanged () {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    // If departArrive is set to 'NOW', update the query time to current\n    if (otpState.currentQuery && otpState.currentQuery.departArrive === 'NOW') {\n      dispatch(settingQueryParam({ time: moment().format('HH:mm') }))\n    }\n\n    dispatch(changingForm())\n    const {autoPlan, debouncePlanTimeMs} = otpState.config\n    // check if a trip plan should be made\n    if (autoPlan && queryIsValid(otpState)) {\n      // trip plan should be made\n\n      // check if debouncing function needs to be (re)created\n      if (!debouncedPlanTrip || lastDebouncePlanTimeMs !== debouncePlanTimeMs) {\n        debouncedPlanTrip = debounce(() => dispatch(routingQuery()), debouncePlanTimeMs)\n        lastDebouncePlanTimeMs = debouncePlanTimeMs\n      }\n      debouncedPlanTrip()\n    }\n  }\n}\n"]}