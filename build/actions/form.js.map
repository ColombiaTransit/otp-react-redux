{"version":3,"sources":["form.js"],"names":["setQueryParam","parseUrlQueryString","formChanged","settingQueryParam","changingForm","payload","dispatch","getState","queryString","params","qs","parse","substring","planParams","forEach","key","startsWith","planParamsToQuery","parseLocationString","value","parts","split","coordinates","name","length","lat","lon","query","from","fromPlace","to","toPlace","departArrive","arriveBy","date","time","debouncedPlanTrip","lastDebouncePlanTimeMs","otpState","otp","currentQuery","format","config","autoPlan","debouncePlanTimeMs"],"mappings":"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","file":"form.js","sourcesContent":["import debounce from 'lodash.debounce'\nimport qs from 'qs'\nimport moment from 'moment'\nimport { createAction } from 'redux-actions'\n\nimport { routingQuery } from './api'\nimport { coordsToString, stringToCoords } from '../util/map'\nimport { queryIsValid } from '../util/state'\nimport { getCurrentTime, getCurrentDate } from '../util/time'\n\nexport const settingQueryParam = createAction('SET_QUERY_PARAM')\nexport const changingForm = createAction('FORM_CHANGED')\n\n/**\n * Action to update any specified query parameter. Replaces previous series of\n * parameter-specific actions.\n */\nexport function setQueryParam (payload) {\n  return function (dispatch, getState) {\n    dispatch(settingQueryParam(payload))\n    dispatch(formChanged())\n  }\n}\n\nexport function parseUrlQueryString (queryString) {\n  return function (dispatch, getState) {\n    // Trim the leading question mark\n    const params = qs.parse(queryString.substring(1))\n    // Filter out the OTP (i.e. non-UI) params and set the initial query\n    const planParams = {}\n    Object.keys(params).forEach(key => {\n      if (!key.startsWith('ui_')) planParams[key] = params[key]\n    })\n    // Convert strings to numbers/objects and dispatch\n    dispatch(setQueryParam(planParamsToQuery(planParams)))\n  }\n}\n\n/**\n * OTP allows passing a location in the form '123 Main St::lat,lon', so we check\n * for the double colon and parse the coordinates accordingly.\n */\nfunction parseLocationString (value) {\n  const parts = value.split('::')\n  const coordinates = parts[1]\n    ? stringToCoords(parts[1])\n    : stringToCoords(parts[0])\n  const name = parts[1]\n    ? parts[0]\n    : coordsToString(coordinates)\n  return coordinates.length === 2 ? {\n    name: name || null,\n    lat: coordinates[0] || null,\n    lon: coordinates[1] || null\n  } : null\n}\n\nfunction planParamsToQuery (params) {\n  const query = {}\n  for (var key in params) {\n    switch (key) {\n      case 'fromPlace':\n        query.from = parseLocationString(params.fromPlace)\n        break\n      case 'toPlace':\n        query.to = parseLocationString(params.toPlace)\n        break\n      case 'arriveBy':\n        query.departArrive = params.arriveBy === 'true'\n          ? 'ARRIVE'\n          : params.arriveBy === 'false'\n            ? 'DEPART'\n            : 'NOW'\n        break\n      case 'date':\n        query.date = params.date || getCurrentDate()\n        break\n      case 'time':\n        query.time = params.time || getCurrentTime()\n        break\n      default:\n        query[key] = params[key]\n    }\n  }\n  return query\n}\n\nlet debouncedPlanTrip // store as variable here, so it can be reused.\nlet lastDebouncePlanTimeMs\n\nexport function formChanged () {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n    // If departArrive is set to 'NOW', update the query time to current\n    if (otpState.currentQuery && otpState.currentQuery.departArrive === 'NOW') {\n      dispatch(settingQueryParam({ time: moment().format('HH:mm') }))\n    }\n\n    dispatch(changingForm())\n    const {autoPlan, debouncePlanTimeMs} = otpState.config\n    // check if a trip plan should be made\n    if (autoPlan && queryIsValid(otpState)) {\n      // trip plan should be made\n\n      // check if debouncing function needs to be (re)created\n      if (!debouncedPlanTrip || lastDebouncePlanTimeMs !== debouncePlanTimeMs) {\n        debouncedPlanTrip = debounce(() => dispatch(routingQuery()), debouncePlanTimeMs)\n        lastDebouncePlanTimeMs = debouncePlanTimeMs\n      }\n      debouncedPlanTrip()\n    }\n  }\n}\n"]}