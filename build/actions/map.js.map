{"version":3,"sources":["map.js"],"names":["clearLocation","setLocation","setLocationToCurrent","switchLocations","setMapPopupLocationAndGeocode","clearingLocation","settingLocation","switchingLocations","payload","dispatch","getState","otpState","otp","reverseGeocode","location","config","geocoder","then","type","catch","console","warn","err","currentPosition","error","coords","lat","latitude","lon","longitude","name","category","currentQuery","from","to","showLegDiagram","setElevationPoint","setMapPopupLocation"],"mappings":"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","file":"map.js","sourcesContent":["import { createAction } from 'redux-actions'\nimport { reverse } from '../util/geocoder'\n\nimport { formChanged } from './form'\n\n/* SET_LOCATION action creator. Updates a from or to location in the store\n *\n * payload format: {\n *   type: 'from' or 'to'\n *   location: {\n *     name: (string),\n *     lat: (number)\n *     lat: (number)\n *   }\n */\n\nexport const clearingLocation = createAction('CLEAR_LOCATION')\nexport const settingLocation = createAction('SET_LOCATION')\nexport const switchingLocations = createAction('SWITCH_LOCATIONS')\n\nexport function clearLocation (payload) {\n  return function (dispatch, getState) {\n    dispatch(clearingLocation(payload))\n  }\n}\n\nexport function setLocation (payload) {\n  return function (dispatch, getState) {\n    const otpState = getState().otp\n\n    // reverse geocode point location if requested\n    if (payload.reverseGeocode) {\n      reverse(payload.location, otpState.config.geocoder).then((location) => {\n        dispatch(settingLocation({\n          type: payload.type,\n          location\n        }))\n      }).catch(err => {\n        dispatch(settingLocation({\n          type: payload.type,\n          location: payload.location\n        }))\n        console.warn(err)\n      })\n    } else {\n      // update the location in the store\n      dispatch(settingLocation(payload))\n    }\n  }\n}\n\n/* payload is simply { type: 'from'|'to' }; location filled in automatically */\n\nexport function setLocationToCurrent (payload) {\n  return function (dispatch, getState) {\n    const currentPosition = getState().otp.location.currentPosition\n    if (currentPosition.error || !currentPosition.coords) return\n    payload.location = {\n      lat: currentPosition.coords.latitude,\n      lon: currentPosition.coords.longitude,\n      name: '(Current Location)',\n      category: 'CURRENT_LOCATION'\n    }\n    dispatch(settingLocation(payload))\n  }\n}\n\nexport function switchLocations () {\n  return function (dispatch, getState) {\n    const {from, to} = getState().otp.currentQuery\n    dispatch(settingLocation({\n      type: 'from',\n      location: to\n    }))\n    dispatch(settingLocation({\n      type: 'to',\n      location: from\n    }))\n  }\n}\n\nexport const showLegDiagram = createAction('SHOW_LEG_DIAGRAM')\n\nexport const setElevationPoint = createAction('SET_ELEVATION_POINT')\n\nexport const setMapPopupLocation = createAction('SET_MAP_POPUP_LOCATION')\n\nexport function setMapPopupLocationAndGeocode (payload) {\n  return function (dispatch, getState) {\n    dispatch(setMapPopupLocation(payload))\n    reverse(payload.location, getState().otp.config.geocoder).then((location) => {\n      dispatch(setMapPopupLocation({ location }))\n    }).catch(err => {\n      console.warn(err)\n    })\n  }\n}\n"]}