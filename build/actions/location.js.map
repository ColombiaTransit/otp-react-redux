{"version":3,"sources":["location.js"],"names":["getCurrentPosition","receivedPositionError","fetchingPosition","receivedPositionResponse","setAsType","dispatch","getState","navigator","geolocation","type","position","console","log","error","message","enableHighAccuracy","addLocationSearch"],"mappings":";;;;;;;;;;;;;;;QAQgBA,kB,GAAAA,kB;;AARhB;;AAEA;;;;AAEO,IAAMC,wDAAwB,gCAAa,gBAAb,CAA9B;AACA,IAAMC,8CAAmB,gCAAa,mBAAb,CAAzB;AACA,IAAMC,8DAA2B,gCAAa,mBAAb,CAAjC;;AAEA,SAASH,kBAAT,GAA+C;AAAA,MAAlBI,SAAkB,uEAAN,IAAM;;AACpD;AAAA,wFAAO,iBAAgBC,QAAhB,EAA0BC,QAA1B;AAAA;AAAA;AAAA;AAAA;AACL,kBAAIC,UAAUC,WAAd,EAA2B;AACzBH,yBAASH,iBAAiB,EAACO,MAAML,SAAP,EAAjB,CAAT;AACAG,0BAAUC,WAAV,CAAsBR,kBAAtB;AACE;AACA,oCAAY;AACV,sBAAIU,QAAJ,EAAc;AACZC,4BAAQC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B,EAAqCN,SAArC;AACAC,6BAASF,yBAAyB,EAAEO,kBAAF,EAAzB,CAAT;AACA,wBAAIN,SAAJ,EAAe;AACbO,8BAAQC,GAAR,CAAY,sCAAZ;AACAP,+BAAS,+BAAqB,EAACI,MAAML,SAAP,EAArB,CAAT;AACD;AACF,mBAPD,MAOO;AACLC,6BAASJ,sBAAsB,EAACY,OAAO,EAACC,SAAS,gCAAV,EAAR,EAAtB,CAAT;AACD;AACF,iBAbH;AAcE;AACA,iCAAS;AACPH,0BAAQC,GAAR,CAAY,gCAAZ,EAA8CC,KAA9C;AACAR,2BAASJ,sBAAsB,EAACY,YAAD,EAAtB,CAAT;AACD,iBAlBH;AAmBE;AACA,kBAAEE,oBAAoB,IAAtB,EApBF;AAsBD,eAxBD,MAwBO;AACLJ,wBAAQC,GAAR,CAAY,gCAAZ;AACAP,yBAASJ,sBAAsB,EAACY,OAAO,EAACC,SAAS,2CAAV,EAAR,EAAtB,CAAT;AACD;;AA5BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA8BD;;AAEM,IAAME,gDAAoB,gCAAa,qBAAb,CAA1B","file":"location.js","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport { setLocationToCurrent } from './map'\n\nexport const receivedPositionError = createAction('POSITION_ERROR')\nexport const fetchingPosition = createAction('POSITION_FETCHING')\nexport const receivedPositionResponse = createAction('POSITION_RESPONSE')\n\nexport function getCurrentPosition (setAsType = null) {\n  return async function (dispatch, getState) {\n    if (navigator.geolocation) {\n      dispatch(fetchingPosition({type: setAsType}))\n      navigator.geolocation.getCurrentPosition(\n        // On success\n        position => {\n          if (position) {\n            console.log('current loc', position, setAsType)\n            dispatch(receivedPositionResponse({ position }))\n            if (setAsType) {\n              console.log('setting location to current position')\n              dispatch(setLocationToCurrent({type: setAsType}))\n            }\n          } else {\n            dispatch(receivedPositionError({error: {message: 'Unknown error getting position'}}))\n          }\n        },\n        // On error\n        error => {\n          console.log('error getting current position', error)\n          dispatch(receivedPositionError({error}))\n        },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    } else {\n      console.log('current position not supported')\n      dispatch(receivedPositionError({error: {message: 'Geolocation not supported by your browser'}}))\n    }\n  }\n}\n\nexport const addLocationSearch = createAction('ADD_LOCATION_SEARCH')\n"]}