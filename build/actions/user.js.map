{"version":3,"sources":["user.js"],"names":["setCurrentUser","setPathBeforeSignIn","getStateForNewUser","auth0User","auth0UserId","sub","email","hasConsentedToTerms","isEmailVerified","email_verified","notificationChannel","phoneNumber","recentLocations","savedLocations","storeTripHistory","fetchOrInitializeUser","auth","dispatch","getState","otp","accessToken","user","config","persistence","otp_middleware","result","resultData","data","isNewAccount","status","alert","createOrUpdateUser","userData","otpMiddleware","loggedInUser","JSON","stringify"],"mappings":"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","sourcesContent":["import { createAction } from 'redux-actions'\n\nimport { addUser, fetchUser, updateUser } from '../util/middleware'\nimport { isNewUser } from '../util/user'\n\nconst setCurrentUser = createAction('SET_CURRENT_USER')\nexport const setPathBeforeSignIn = createAction('SET_PATH_BEFORE_SIGNIN')\n\nfunction getStateForNewUser (auth0User) {\n  return {\n    auth0UserId: auth0User.sub,\n    email: auth0User.email,\n    hasConsentedToTerms: false, // User must agree to terms.\n    isEmailVerified: auth0User.email_verified,\n    notificationChannel: 'email',\n    phoneNumber: '',\n    recentLocations: [],\n    savedLocations: [],\n    storeTripHistory: false // User must opt in.\n  }\n}\n\n/**\n * Fetches user preferences to state.user, or set initial values under state.user if no user has been loaded.\n */\nexport function fetchOrInitializeUser (auth) {\n  return async function (dispatch, getState) {\n    const { otp } = getState()\n    const { accessToken, user } = auth\n\n    try {\n      const result = await fetchUser(\n        otp.config.persistence.otp_middleware,\n        accessToken\n      )\n\n      // Beware! On AWS API gateway, if a user is not found in the middleware\n      // (e.g. they just created their Auth0 password but have not completed the account setup form yet),\n      // the call above will return, for example:\n      // {\n      //    status: 'success',\n      //    data: {\n      //      \"result\": \"ERR\",\n      //      \"message\": \"No user with id=000000 found.\",\n      //      \"code\": 404,\n      //      \"detail\": null\n      //    }\n      // }\n      //\n      // The same call to a middleware instance that is not behind an API gateway\n      // will return:\n      // {\n      //    status: 'error',\n      //    message: 'Error get-ing user...'\n      // }\n      // TODO: Improve AWS response.\n\n      const resultData = result.data\n      const isNewAccount = result.status === 'error' || (resultData && resultData.result === 'ERR')\n\n      if (!isNewAccount) {\n        // TODO: Move next line somewhere else.\n        if (resultData.savedLocations === null) resultData.savedLocations = []\n        dispatch(setCurrentUser({ accessToken, user: resultData }))\n      } else {\n        dispatch(setCurrentUser({ accessToken, user: getStateForNewUser(user) }))\n      }\n    } catch (error) {\n      // TODO: improve error handling.\n      alert(`An error was encountered:\\n${error}`)\n    }\n  }\n}\n\n/**\n * Updates (or creates) a user entry in the middleware,\n * then, if that was successful, updates the redux state with that user.\n */\nexport function createOrUpdateUser (userData) {\n  return async function (dispatch, getState) {\n    const { otp, user } = getState()\n    const { otp_middleware: otpMiddleware = null } = otp.config.persistence\n\n    if (otpMiddleware) {\n      const { accessToken, loggedInUser } = user\n\n      let result\n      if (isNewUser(loggedInUser)) {\n        result = await addUser(otpMiddleware, accessToken, userData)\n      } else {\n        result = await updateUser(otpMiddleware, accessToken, userData)\n      }\n\n      // TODO: improve the UI feedback messages for this.\n      if (result.status === 'success' && result.data) {\n        // Update application state with the user entry as saved\n        // (as returned) by the middleware.\n        const userData = result.data\n        dispatch(setCurrentUser({ accessToken, user: userData }))\n\n        alert('Your preferences have been saved.')\n      } else {\n        alert(`An error was encountered:\\n${JSON.stringify(result)}`)\n      }\n    }\n  }\n}\n"]}