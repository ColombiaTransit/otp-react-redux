{"version":3,"sources":["index.js"],"names":["operatorIndexForRoute","operators","route","index","findIndex","o","id","toLowerCase","agencyId","split","order","selectBasicRoutes","state","otp","transitIndex","routes","Object","values","sort","routeComparator","map","agency","getSortedRouteIds","config","console","log","agencySortedRoutes","length","a","b","r"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA,SAASA,qBAAT,CAAgCC,SAAhC,EAA2CC,KAA3C,EAAkD;AAChD,MAAMC,KAAK,GAAGF,SAAS,CAACG,SAAV,CAAoB,UAAAC,CAAC;AAAA,WACjCA,CAAC,IACCA,CAAC,CAACC,EAAF,CAAKC,WAAL,OAAuBL,KAAK,CAACM,QAAN,CAAeC,KAAf,CAAqB,GAArB,EAA0B,CAA1B,EAA6BF,WAA7B,EAFQ;AAAA,GAArB,CAAd;AAGA,MAAIJ,KAAK,KAAK,CAAC,CAAX,IAAgB,OAAOF,SAAS,CAACE,KAAD,CAAT,CAAiBO,KAAxB,KAAkC,WAAtD,EAAmE,OAAOT,SAAS,CAACE,KAAD,CAAT,CAAiBO,KAAxB,CAAnE,KACK,OAAO,CAAP;AACN;;AAED,IAAMC,iBAAiB,GAAG,8BACxB,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,GAAN,CAAUC,YAAV,CAAuBC,MAA3B;AAAA,CADmB,EAExB,UAAAA,MAAM;AAAA,SAAIC,MAAM,CAACC,MAAP,CAAcF,MAAM,IAAI,EAAxB,EACPG,IADO,CACFC,0BADE,EAEPC,GAFO,CAEH,UAAAlB,KAAK,EAAI;AAAA,QACJmB,MADI,GACWnB,KADX,CACJmB,MADI;AAAA,QACIf,EADJ,GACWJ,KADX,CACII,EADJ;AAEZ,WAAO;AACLA,MAAAA,EAAE,EAAFA,EADK;AAELE,MAAAA,QAAQ,EAAEa,MAAM,GAAGA,MAAM,CAACf,EAAV,GAAe;AAF1B,KAAP;AAID,GARO,CAAJ;AAAA,CAFkB,CAA1B;AAaO,IAAMgB,iBAAiB,GAAG,8BAC/B,CAACX,iBAAD,EAAoB,UAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,GAAN,CAAUU,MAAV,CAAiBtB,SAArB;AAAA,CAAzB,CAD+B,EAE/B,UAACc,MAAD,EAASd,SAAT,EAAuB;AACrB,MAAI,CAACc,MAAL,EAAa,OAAO,EAAP;AACbS,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,MAAMC,kBAAkB,GAAGzB,SAAS,CAAC0B,MAAV,GAAmB,CAAnB,GACvBZ,MAAM,CACLG,IADD,CACM,UAACU,CAAD,EAAIC,CAAJ;AAAA,WAAU7B,qBAAqB,CAACC,SAAD,EAAY2B,CAAZ,CAArB,GAAsC5B,qBAAqB,CAACC,SAAD,EAAY4B,CAAZ,CAArE;AAAA,GADN,CADuB,GAGvBd,MAHJ;AAIA,SAAOW,kBAAkB,CAACN,GAAnB,CAAuB,UAAAU,CAAC;AAAA,WAAIA,CAAC,CAACxB,EAAN;AAAA,GAAxB,CAAP;AACD,CAV8B,CAA1B","sourcesContent":["import { createSelector } from 'reselect'\n\nimport { routeComparator } from '../util/itinerary'\n\nfunction operatorIndexForRoute (operators, route) {\n  const index = operators.findIndex(o =>\n    o &&\n      o.id.toLowerCase() === route.agencyId.split(':')[0].toLowerCase())\n  if (index !== -1 && typeof operators[index].order !== 'undefined') return operators[index].order\n  else return 0\n}\n\nconst selectBasicRoutes = createSelector(\n  state => state.otp.transitIndex.routes,\n  routes => Object.values(routes || [])\n    .sort(routeComparator)\n    .map(route => {\n      const { agency, id } = route\n      return {\n        id,\n        agencyId: agency ? agency.id : ''\n      }\n    })\n)\n\nexport const getSortedRouteIds = createSelector(\n  [selectBasicRoutes, state => state.otp.config.operators],\n  (routes, operators) => {\n    if (!routes) return []\n    console.log('selecting routes')\n    const agencySortedRoutes = operators.length > 0\n      ? routes\n        .sort((a, b) => operatorIndexForRoute(operators, a) - operatorIndexForRoute(operators, b))\n      : routes\n    return agencySortedRoutes.map(r => r.id)\n  }\n)\n"]}