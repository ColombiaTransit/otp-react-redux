{"version":3,"sources":["query-params.js"],"names":["queryParams","name","planTypes","default","itineraryRewrite","fromPlace","value","lat","lon","profileRewrite","from","toPlace","to","arriveBy","accessModes","directModes","transitModes","length","split","forEach","m","push","selector","label","options","text"],"mappings":"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","file":"query-params.js","sourcesContent":["import { getCurrentDate, getCurrentTime } from '../util/time'\nimport { isTransit, isAccessMode, isCar } from '../util/itinerary'\n\n/**\n * name: the default name of the parameter used for internal reference and API calls\n * planTypes: array of plan type(s) (ITINERARY, PROFILE, or both) this param applies to\n * default: the default value for this param\n * itineraryRewrite: an optional function for translating the value for the plan API only\n * profileRewrite: an optional function for translating the value for the profile API only\n * label: a text label for for onscreen display\n * selector: the default type of UI selector to use in the form. Can be one of:\n *   - DROPDOWN: a standard drop-down menu selector\n * options: an array of text/value pairs used with a dropdown selector\n */\n\nconst queryParams = [\n  { /* from - the trip origin. stored internally as a location (lat/lon/name) object  */\n    name: 'from',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ fromPlace: `${value.lat},${value.lon}` }),\n    profileRewrite: value => ({ from: { lat: value.lat, lon: value.lon } })\n  },\n\n  { /* to - the trip destination. stored internally as a location (lat/lon/name) object  */\n    name: 'to',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: null,\n    itineraryRewrite: value => ({ toPlace: `${value.lat},${value.lon}` }),\n    profileRewrite: value => ({ to: { lat: value.lat, lon: value.lon } })\n  },\n\n  { /* date - the date of travel, in MM-DD-YYYY format */\n    name: 'date',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: getCurrentDate()\n  },\n\n  { /* time - the arrival/departure time for an itinerary trip, in HH:MM format */\n    name: 'time',\n    planTypes: [ 'ITINERARY' ],\n    default: getCurrentTime()\n  },\n\n  { /* departArrive - whether this is a depart-at, arrive-by, or leave-now trip */\n    name: 'departArrive',\n    planTypes: [ 'ITINERARY' ],\n    default: 'NOW',\n    itineraryRewrite: value => ({ arriveBy: (value === 'ARRIVE') })\n  },\n\n  { /* startTime - the start time for a profile trip, in HH:MM format */\n    name: 'startTime',\n    planTypes: [ 'PROFILE' ],\n    default: '07:00'\n  },\n\n  { /* endTime - the end time for a profile trip, in HH:MM format */\n    name: 'endTime',\n    planTypes: [ 'PROFILE' ],\n    default: '09:00'\n  },\n\n  { /* mode - the allowed modes for a trip, as a comma-separated list */\n    name: 'mode',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 'TRAM,BUS,GONDOLA,WALK,BICYCLE,BICYCLE_RENT',\n    profileRewrite: value => {\n      const accessModes = []\n      const directModes = []\n      const transitModes = []\n\n      if (value && value.length > 0) {\n        value.split(',').forEach(m => {\n          if (isTransit(m)) transitModes.push(m)\n          if (isAccessMode(m)) {\n            accessModes.push(m)\n            // TODO: make configurable whether direct-driving is considered\n            if (!isCar(m)) directModes.push(m)\n          }\n        })\n      }\n\n      return { accessModes, directModes, transitModes }\n    }\n  },\n\n  { /* showIntermediateStops - whether response should include intermediate stops for transit legs */\n    name: 'showIntermediateStops',\n    planTypes: [ 'ITINERARY' ],\n    default: true\n  },\n\n  { /* maxWalkDistance - the maximum distance in meters the user will walk */\n    name: 'maxWalkDistance',\n    planTypes: [ 'ITINERARY' ],\n    default: 402.3,\n    selector: 'DROPDOWN',\n    label: 'Maximum Walk',\n    options: [\n      {\n        text: '1/10 mile',\n        value: 160.9\n      }, {\n        text: '1/4 mile',\n        value: 402.3\n      }, {\n        text: '1/2 mile',\n        value: 804.7\n      }, {\n        text: '1 mile',\n        value: 1609\n      }, {\n        text: '2 miles',\n        value: 3219\n      }, {\n        text: '5 miles',\n        value: 8047\n      }\n    ]\n  },\n\n  { /* optimize -- how to optimize an itinerary trip */\n    name: 'optimize',\n    planTypes: [ 'ITINERARY' ],\n    default: 'QUICK',\n    selector: 'DROPDOWN',\n    label: 'Optimize for',\n    options: [\n      {\n        text: 'Speed',\n        value: 'QUICK'\n      }, {\n        text: 'Transfers',\n        value: 'TRANSFERS'\n      }\n    ]\n  },\n\n  { /* maxWalkTime -- the maximum time the user will spend walking in minutes */\n    name: 'maxWalkTime',\n    planTypes: [ 'PROFILE' ],\n    default: 15,\n    selector: 'DROPDOWN',\n    label: 'Max Walk Time',\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* walkSpeed -- the user's walking speed in m/s */\n    name: 'walkSpeed',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 1.34,\n    selector: 'DROPDOWN',\n    label: 'Walk Speed',\n    options: [\n      {\n        text: '2 MPH',\n        value: 0.89\n      }, {\n        text: '3 MPH',\n        value: 1.34\n      }, {\n        text: '4 MPH',\n        value: 1.79\n      }\n    ]\n  },\n\n  { /* maxBikeTime -- the maximum time the user will spend biking in minutes */\n    name: 'maxBikeTime',\n    planTypes: [ 'PROFILE' ],\n    default: 20,\n    selector: 'DROPDOWN',\n    label: 'Max Bike Time',\n    options: [\n      {\n        text: '5 minutes',\n        value: 5\n      }, {\n        text: '10 minutes',\n        value: 10\n      }, {\n        text: '15 minutes',\n        value: 15\n      }, {\n        text: '20 minutes',\n        value: 20\n      }, {\n        text: '30 minutes',\n        value: 30\n      }, {\n        text: '45 minutes',\n        value: 45\n      }, {\n        text: '1 hour',\n        value: 60\n      }\n    ]\n  },\n\n  { /* bikeSpeed -- the user's bikeSpeed speed in m/s */\n    name: 'bikeSpeed',\n    planTypes: [ 'ITINERARY', 'PROFILE' ],\n    default: 3.58,\n    selector: 'DROPDOWN',\n    label: 'Bicycle Speed',\n    options: [\n      {\n        text: '6 MPH',\n        value: 2.68\n      }, {\n        text: '8 MPH',\n        value: 3.58\n      }, {\n        text: '10 MPH',\n        value: 4.47\n      }, {\n        text: '12 MPH',\n        value: 5.36\n      }\n    ]\n  }\n]\n\nexport default queryParams\n"]}