{"version":3,"sources":["favorite-locations-pane.js"],"names":["fancyAddLocationCss","StyledAddon","InputGroup","Addon","NewLocationAddon","NewLocationFormControl","FormControl","isHome","loc","type","isWork","notHomeOrWork","FavoriteLocationsPane","e","value","target","trim","length","props","userData","onUserDataChange","savedLocations","newLocations","concat","push","address","icon","location","isValueEmpty","nonEmptyLocation","homeLocation","find","workLocation","filter","effectiveLocations","map","index","_handleAddressChange","_handleAddNewLocation","Component","PropTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import memoize from 'lodash.memoize'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport {\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  InputGroup\n} from 'react-bootstrap'\nimport FontAwesome from 'react-fontawesome'\nimport styled from 'styled-components'\n\n// Styles.\nconst fancyAddLocationCss = `\n  background-color: #337ab7;\n  color: #fff;\n`\nconst StyledAddon = styled(InputGroup.Addon)`\n  min-width: 40px;\n`\nconst NewLocationAddon = styled(StyledAddon)`\n  ${fancyAddLocationCss}\n`\nconst NewLocationFormControl = styled(FormControl)`\n  ${fancyAddLocationCss}\n  ::placeholder {\n    color: #fff;\n  }\n  &:focus {\n    background-color: unset;\n    color: unset;\n    ::placeholder {\n      color: unset;\n    }\n  }\n`\n\n// Helper filter functions.\nconst isHome = loc => loc.type === 'home'\nconst isWork = loc => loc.type === 'work'\nconst notHomeOrWork = loc => loc.type !== 'home' && loc.type !== 'work'\n\n/**\n * User's saved locations editor.\n */\nclass FavoriteLocationsPane extends Component {\n  static propTypes = {\n    onUserDataChange: PropTypes.func.isRequired,\n    userData: PropTypes.object.isRequired\n  }\n\n  _handleAddNewLocation = e => {\n    const value = e.target.value || ''\n    if (value.trim().length > 0) {\n      const { userData, onUserDataChange } = this.props\n      const { savedLocations } = userData\n\n      // Create a new array for savedLocations.\n      const newLocations = [].concat(savedLocations)\n\n      newLocations.push({\n        address: value.trim(),\n        icon: 'map-marker',\n        type: 'custom'\n      })\n\n      // Event onChange will trigger after this and before rerender,\n      // so DO empty the input box value so the user can enter their next location.\n      e.target.value = null\n\n      onUserDataChange({ savedLocations: newLocations })\n    }\n  }\n\n  _handleAddressChange = memoize(\n    location => e => {\n      const { userData, onUserDataChange } = this.props\n      const { savedLocations } = userData\n      const value = e.target.value\n      const isValueEmpty = !value || value === ''\n      const nonEmptyLocation = isValueEmpty ? null : location\n\n      // Update location address, ohterwise it stalls the input box.\n      location.address = value\n\n      // Create a new array for savedLocations.\n      let newLocations = []\n\n      // Add home/work as first entries to the new state only if\n      // - user edited home/work to non-empty, or\n      // - user edited another location and home/work is in savedLocations.\n      const homeLocation = (isHome(location) && nonEmptyLocation) || savedLocations.find(isHome)\n      if (homeLocation) newLocations.push(homeLocation)\n\n      const workLocation = (isWork(location) && nonEmptyLocation) || savedLocations.find(isWork)\n      if (workLocation) newLocations.push(workLocation)\n\n      // Add the rest if it is not home or work\n      // and if the new address of this one is not null or empty.\n      newLocations = newLocations.concat(savedLocations\n        .filter(notHomeOrWork)\n        .filter(loc => loc !== location || !isValueEmpty)\n      )\n\n      onUserDataChange({ savedLocations: newLocations })\n    }\n  )\n\n  render () {\n    const { userData } = this.props\n    const { savedLocations } = userData\n\n    // Build an 'effective' list of locations for display,\n    // where at least one 'home' and one 'work', are always present even if blank.\n    // In theory there could be multiple home or work locations.\n    // Just pick the first one.\n    const homeLocation = savedLocations.find(isHome) || {\n      address: null,\n      icon: 'home',\n      type: 'home'\n    }\n    const workLocation = savedLocations.find(isWork) || {\n      address: null,\n      icon: 'briefcase',\n      type: 'work'\n    }\n\n    const effectiveLocations = [\n      homeLocation,\n      workLocation,\n      ...savedLocations.filter(notHomeOrWork)\n    ]\n\n    return (\n      <div>\n        <ControlLabel>Add the places you frequent often to save time planning trips:</ControlLabel>\n\n        {effectiveLocations.map((loc, index) => (\n          <FormGroup key={index}>\n            <InputGroup>\n              <StyledAddon title={loc.type}>\n                <FontAwesome name={loc.icon} />\n              </StyledAddon>\n              <FormControl\n                onChange={this._handleAddressChange(loc)}\n                placeholder={`Add ${loc.type}`}\n                type='text'\n                value={loc.address} />\n            </InputGroup>\n          </FormGroup>\n        ))}\n\n        {/* For adding a location. */}\n        <FormGroup>\n          <InputGroup>\n            <NewLocationAddon>\n              <FontAwesome name='plus' />\n            </NewLocationAddon>\n            <NewLocationFormControl\n              onBlur={this._handleAddNewLocation}\n              placeholder='Add another place'\n              type='text'\n            />\n          </InputGroup>\n        </FormGroup>\n      </div>\n    )\n  }\n}\n\nexport default FavoriteLocationsPane\n"]}