{"version":3,"sources":["mode-button.js"],"names":["ModeButton","props","active","enabled","icons","label","mode","onClick","inlineLabel","showPlusTransit","height","iconSize","iconColor","modeStr","buttonStyle","width","border","backgroundColor","borderRadius","textAlign","display","verticalAlign","color","margin","fontSize","fill","marginLeft","fontWeight","Component","propTypes","PropTypes","bool","string","any","object","func"],"mappings":"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","file":"mode-button.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\n\nimport { getModeIcon, isTransit } from '../../util/itinerary'\n\nexport default class ModeButton extends Component {\n  static propTypes = {\n    active: PropTypes.bool,\n    label: PropTypes.string,\n    mode: PropTypes.any, // currently a mode object or string\n    icons: PropTypes.object,\n    onClick: PropTypes.func\n  }\n\n  render () {\n    const {active, enabled, icons, label, mode, onClick, inlineLabel, showPlusTransit} = this.props\n    const height = this.props.height || 48\n    const iconSize = height - 20\n\n    const iconColor = enabled ? '#000' : '#ccc'\n    const modeStr = mode.mode || mode\n    const buttonStyle = { height }\n\n    if (modeStr !== 'TRANSIT' && isTransit(modeStr)) {\n      buttonStyle.width = height\n      buttonStyle.border = `2px solid ${enabled ? (active ? '#000' : '#bbb') : '#ddd'}`\n      if (active && enabled) buttonStyle.backgroundColor = '#fff'\n      buttonStyle.borderRadius = height / 2\n    } else {\n      buttonStyle.border = active ? '2px solid #000' : '1px solid #bbb'\n      if (active) buttonStyle.backgroundColor = '#add8e6'\n    }\n\n    return (\n      <div className={`mode-button-container ${enabled ? 'enabled' : 'disabled'}`} style={{ height: height + (inlineLabel ? 8 : 24), textAlign: 'center' }}>\n        <button\n          className='mode-button'\n          onClick={onClick}\n          title={label}\n          style={buttonStyle}\n          disabled={!enabled}\n        >\n          {/* Show the 'plus' and general transit icons, if enabled */}\n          {showPlusTransit && (\n            <span>\n              <div style={{ display: 'inline-block', width: iconSize, height: iconSize, verticalAlign: 'middle' }}>\n                {enabled\n                  ? getModeIcon('TRANSIT', icons)\n                  : <div style={{ width: iconSize, height: iconSize, backgroundColor: iconColor, borderRadius: iconSize / 2 }} />\n                }\n              </div>\n              <i className='fa fa-plus' style={{ verticalAlign: 'middle', color: iconColor, margin: '0px 5px', fontSize: 14 }} />\n            </span>\n          )}\n\n          {/* Show the primary mode icon */}\n          <div\n            className='mode-icon'\n            style={{ display: 'inline-block', fill: iconColor, width: iconSize, height: iconSize, verticalAlign: 'middle' }}>\n            {getModeIcon(mode, icons)}\n          </div>\n\n\n          {/* Show the inline label, if enabled */}\n          {inlineLabel && <span style={{ fontSize: iconSize * 0.8, marginLeft: 10, verticalAlign: 'middle', fontWeight: active ? 600 : 300 }}>{label}</span>}\n        </button>\n\n        {/* If not in inline-label mode, label directly below the button */}\n        {!inlineLabel && <div className='mode-label' style={{ color: iconColor, fontWeight: active ? 600 : 300 }}>{label}</div>}\n      </div>\n    )\n  }\n}\n"]}