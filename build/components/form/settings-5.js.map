{"version":3,"sources":["settings-5.js"],"names":["SettingsSelectorPanel","props","_setTransit","_lastTransitMode","setQueryParam","mode","_setWalkOnly","_setSoloMode","_setBikeOnly","_setOwnBike","nonBikeModes","queryModes","filter","m","startsWith","join","_setRentedBike","_setAccessMode","slice","modeStr","queryParamUpdate","push","companies","company","toUpperCase","state","activePanel","Boolean","includes","transitModes","length","icons","modeHasTransit","label","accessModes","bikeOptions","iconWidth","action","tabRowHeight","tabButtonStyle","height","width","border","background","padding","textAlign","position","bottom","left","right","backgroundColor","zIndex","top","borderLeft","borderTop","borderRight","borderBottom","display","marginRight","verticalAlign","fontSize","fontWeight","marginTop","map","k","_modeIsActive","_toggleTransitMode","margin","marginBottom","float","option","color","letterSpacing","textTransform","fill","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","routingType","modeGroups","config","split","mapDispatchToProps"],"mappings":"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","file":"settings-5.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { getModeIcon, isAccessMode, hasBike, isTransit, hasTransit } from '../../util/itinerary'\nimport GeneralSettingsPanel from './general-settings-panel'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const {companies, queryModes} = this.props\n    if (mode.mode === 'CAR_HAIL') {\n      return Boolean(companies && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m.startsWith(mode.mode)) return true\n    }\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setTransit = () => {\n    if (this._lastTransitMode) {\n      // returning to transit from active mode\n      this.props.setQueryParam({ mode: this._lastTransitMode })\n      this._lastTransitMode = null\n    } else {\n      this.props.setQueryParam({ mode: 'WALK,TRAM,BUS,RAIL,GONDOLA' })\n    }\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _setOwnBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE,' + nonBikeModes.join(',') })\n  }\n\n  _setRentedBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE_RENT,' + nonBikeModes.join(',') })\n  }\n\n  _toggleTransitMode (mode) {\n    const modeStr = mode.mode || mode\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = queryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _setAccessMode = (mode) => {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n    const queryParamUpdate = {}\n\n    queryModes = queryModes.filter(m => !isAccessMode(m))\n    queryModes.push(modeStr)\n\n    // do extra stuff if mode selected was a TNC\n    queryParamUpdate.companies = modeStr === 'CAR_HAIL' ? mode.company.toUpperCase() : null\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { mode, icons, queryModes } = this.props\n\n    const modeHasTransit = hasTransit(mode)\n\n    const transitModes = [\n      {\n        mode: 'BUS',\n        label: 'Bus'\n      },\n      {\n        mode: 'TRAM',\n        label: 'MAX & Streetcar'\n      },\n      {\n        mode: 'RAIL',\n        label: 'Wes'\n      },\n      {\n        mode: 'GONDOLA',\n        label: 'Aerial Tram'\n      }\n    ]\n\n    const accessModes = [\n      {\n        mode: 'WALK',\n        label: 'Walk + Transit'\n      },\n      {\n        mode: 'BICYCLE',\n        label: 'Bike + Transit'\n      },\n      {\n        mode: 'CAR_PARK',\n        label: 'Park & Ride'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'UBER',\n        label: 'Uber + Transit'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'LYFT',\n        label: 'Lyft + Transit'\n      },\n      {\n        mode: 'CAR_RENT',\n        label: 'car2go + Transit'\n      }\n    ]\n\n    const bikeOptions = [\n      {\n        mode: 'BICYCLE',\n        label: 'Own Bike',\n        iconWidth: 18,\n        action: this._setOwnBike\n      },\n      {\n        mode: 'BICYCLE_RENT',\n        label: 'Biketown',\n        iconWidth: 36,\n        action: this._setRentedBike\n      }\n    ]\n\n    /*const sideButtonStyle = {\n      height: 30,\n      lineHeight: '1.1',\n      fontSize: 12,\n      borderLeft: '1px solid #f0f0f0',\n      textAlign: 'center',\n      padding: '6px 0px'\n    }*/\n\n    const tabRowHeight = 40\n\n    const tabButtonStyle = {\n      height: '100%',\n      width: '100%',\n      border: 'none',\n      background: 'none',\n      padding: 'none',\n      textAlign: 'center'\n    }\n\n    return (\n      <div className='settings-selector-panel'>\n        {/* Trip type (Transit / Walk Only / Bike Only) selector */}\n        <Row className='button-row'>\n          <Col xs={12}>\n            <div style={{ position: 'relative', height: 40 }}>\n              <div style={{ position: 'absolute', bottom: 0, left: 0, right: 0, height: 1, backgroundColor: '#888', zIndex: 10 }} />\n              <div style={{ position: 'absolute', bottom: 0, left: 20, top: 0, width: 150, borderLeft: '1px solid #888', borderTop: '1px solid #888', borderRight: '1px solid #888', borderBottom: modeHasTransit ? 'none' : '1px solid #888', backgroundColor: '#f0f0f0', zIndex: 20 }}>\n                <button\n                  style={tabButtonStyle}\n                  onClick={this._setTransit}\n                >\n                  <div>\n                    <div style={{ display: 'inline-block', marginRight: 10, width: 18, height: 18, verticalAlign: 'middle' }}>{getModeIcon('TRANSIT', icons)}</div>\n                    <div style={{ display: 'inline-block', fontSize: 18, fontWeight: 500, verticalAlign: 'middle' }}>Take Transit</div>\n                  </div>\n                </button>\n              </div>\n\n              <div style={{ position: 'absolute', bottom: 0, right: 70, top: 0, width: 40, borderLeft: '1px solid #888', borderTop: '1px solid #888', borderRight: '1px solid #888', borderBottom: mode === 'WALK' ? 'none' : '1px solid #888', backgroundColor: '#f0f0f0', zIndex: 20 }}>\n                <button\n                  style={tabButtonStyle}\n                  onClick={this._setWalkOnly}\n                >\n                  <div style={{ display: 'inline-block', width: 15, height: 15 }}>{getModeIcon('WALK', icons)}</div>\n                  <div style={{ fontSize: 10, marginTop: -4 }}>Only</div>\n                </button>\n              </div>\n              <div style={{ position: 'absolute', bottom: 0, right: 20, top: 0, width: 40, borderLeft: '1px solid #888', borderTop: '1px solid #888', borderRight: '1px solid #888', borderBottom: !modeHasTransit && hasBike(mode) ? 'none' : '1px solid #888', backgroundColor: '#f0f0f0', zIndex: 20 }}>\n                <button\n                  style={tabButtonStyle}\n                  onClick={this._setBikeOnly}\n                >\n                    <div style={{ display: 'inline-block', width: 15, height: 15 }}>{getModeIcon('BICYCLE', icons)}</div>\n                    <div style={{ fontSize: 10, marginTop: -4 }}>Only</div>\n                </button>\n              </div>\n            </div>\n            {/*<button\n              style={tabButtonStyle}\n              onClick={this._setBikeOnly}\n            >\n              <div style={{ display: 'inline-block', marginRight: 5, width: 12, height: 12, verticalAlign: 'middle' }}>{getModeIcon('BICYCLE', icons)}</div>\n              <span style={{ verticalAlign: 'middle' }}>Bike Only</span>\n            </button>*/}\n          </Col>\n        </Row>\n\n        <div className='modes-panel'>\n          {/* transit access mode selector */}\n          <Row className='mode-group-row'>\n            {accessModes.map((mode, k) => {\n              return <Col xs={4} key={k}>\n                <ModeButton\n                  enabled={modeHasTransit}\n                  active={modeHasTransit && this._modeIsActive(mode)}\n                  icons={icons}\n                  mode={mode}\n                  height={46}\n                  label={mode.label}\n                  showPlusTransit\n                  onClick={() => this._setAccessMode(mode)}\n                />\n              </Col>\n            })}\n          </Row>\n\n          {/* transit mode selector */}\n          <Row className='mode-group-row'>\n            {/*<div className='group-header'>\n              <div className='group-name'>Transit</div>\n            </div>*/}\n            {transitModes.map((mode, k) => {\n              return (\n                <Col xs={3} key={k}>\n                  <ModeButton\n                    enabled={modeHasTransit}\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    label={mode.label}\n                    showCheck\n                    height={56}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  />\n                </Col>\n              )\n            })}\n          </Row>\n\n        </div>\n\n        {/* general settings */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n            {hasBike(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label' style={{ float: 'left' }}>Use</div>\n              <div style={{ textAlign: 'right' }}>\n                <ButtonGroup>\n                  {bikeOptions.map((option, k) => {\n                    return (\n                      <Button key={k}\n                        style={{ backgroundColor: queryModes.includes(option.mode) ? '#000' : '#aaa', color: '#fff', letterSpacing: 1, textTransform: 'uppercase', fontSize: 12 }}\n                        onClick={option.action}\n                      >\n                        <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#fff', verticalAlign: 'middle', marginRight: 10 }}>\n                          {getModeIcon(option.mode, icons)}\n                        </div>\n                        <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                      </Button>\n                    )\n                  })}\n                </ButtonGroup>\n              </div>\n            </div>)}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    mode,\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}