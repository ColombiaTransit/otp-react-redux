{"version":3,"sources":["error-message.js"],"names":["ErrorMessage","props","error","errorMessages","currentQuery","message","msg","msgConfig","find","m","id","modes","mode","includes","Component","propTypes","PropTypes","object","mapStateToProps","state","ownProps","activeSearch","otp","response","config","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;IAEMA,Y;;;;;;;;;;6BAKM;AAAA,mBACuC,KAAKC,KAD5C;AAAA,UACAC,KADA,UACAA,KADA;AAAA,UACOC,aADP,UACOA,aADP;AAAA,UACsBC,YADtB,UACsBA,YADtB;;AAER,UAAI,CAACF,KAAL,EAAY,OAAO,IAAP;;AAEZ,UAAIG,UAAUH,MAAMI,GAApB;AACA;AACA,UAAIH,aAAJ,EAAmB;AACjB,YAAMI,YAAYJ,cAAcK,IAAd,CAAmB;AAAA,iBAAKC,EAAEC,EAAF,KAASR,MAAMQ,EAApB;AAAA,SAAnB,CAAlB;AACA,YAAIH,SAAJ,EAAe;AACb,cAAIA,UAAUI,KAAd,EAAqB;AAAA;AAAA;AAAA;;AAAA;AACnB,8DAAmBJ,UAAUI,KAA7B,4GAAoC;AAAA,oBAAzBC,IAAyB;;AAClC,oBAAIR,aAAaQ,IAAb,CAAkBC,QAAlB,CAA2BD,IAA3B,CAAJ,EAAsC;AACpCP,4BAAUE,UAAUD,GAApB;AACA;AACD;AACF;AANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpB,WAPD,MAOOD,UAAUE,UAAUD,GAApB;AACR;AACF;;AAED,aACE;AAAA;AAAA,UAAK,WAAU,eAAf;AACE;AAAA;AAAA,YAAK,WAAU,QAAf;AACE,+CAAG,WAAU,0BAAb,GADF;AAAA;AAAA,SADF;AAIE;AAAA;AAAA,YAAK,WAAU,SAAf;AAA0BD;AAA1B,SAJF;AAKE,sCAAC,mBAAD,IAAW,aAAa,CAAC,YAAD,CAAxB;AALF,OADF;AASD;;;EAlCwBS,gB,UAClBC,S,GAAY;AACjBb,SAAOc,iBAAUC;AADA,C;;AAoCrB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,eAAe,4BAAgBF,MAAMG,GAAtB,CAArB;AACA,SAAO;AACLpB,WAAOmB,gBAAgBA,aAAaE,QAA7B,IAAyCF,aAAaE,QAAb,CAAsBrB,KADjE;AAELE,kBAAce,MAAMG,GAAN,CAAUlB,YAFnB;AAGLD,mBAAegB,MAAMG,GAAN,CAAUE,MAAV,CAAiBrB;AAH3B,GAAP;AAKD,CAPD;;AASA,IAAMsB,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWN,QAAX,EAAwB;AACjD,SAAO,EAAP;AACD,CAFD;;kBAIe,yBAAQF,eAAR,EAAyBO,kBAAzB,EAA6CzB,YAA7C,C","file":"error-message.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport TripTools from '../narrative/trip-tools'\n\nimport { getActiveSearch } from '../../util/state'\n\nclass ErrorMessage extends Component {\n  static propTypes = {\n    error: PropTypes.object\n  }\n\n  render () {\n    const { error, errorMessages, currentQuery } = this.props\n    if (!error) return null\n\n    let message = error.msg\n    // check for configuration-defined message override\n    if (errorMessages) {\n      const msgConfig = errorMessages.find(m => m.id === error.id)\n      if (msgConfig) {\n        if (msgConfig.modes) {\n          for (const mode of msgConfig.modes) {\n            if (currentQuery.mode.includes(mode)) {\n              message = msgConfig.msg\n              break\n            }\n          }\n        } else message = msgConfig.msg\n      }\n    }\n\n    return (\n      <div className='error-message'>\n        <div className='header'>\n          <i className='fa fa-exclamation-circle' /> Could Not Plan Trip\n        </div>\n        <div className='message'>{message}</div>\n        <TripTools buttonTypes={['START_OVER']} />\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    error: activeSearch && activeSearch.response && activeSearch.response.error,\n    currentQuery: state.otp.currentQuery,\n    errorMessages: state.otp.config.errorMessages\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorMessage)\n"]}