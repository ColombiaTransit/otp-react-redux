{"version":3,"sources":["dropdown-selector.js"],"names":["DropdownSelector","_onQueryParamChange","evt","val","target","value","props","setQueryParam","name","isNaN","parseFloat","label","options","marginBottom","map","o","i","text","Component","propTypes","PropTypes","string","oneOfType","number","array","func","mapStateToProps","state","ownProps","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;IAEMA,gB;;;;;;;;;;;;;;gOAYJC,mB,GAAsB,UAACC,GAAD,EAAS;AAC7B,UAAMC,MAAMD,IAAIE,MAAJ,CAAWC,KAAvB;AACA,YAAKC,KAAL,CAAWC,aAAX,mCACG,MAAKD,KAAL,CAAWE,IADd,EACqBC,MAAMN,GAAN,IAAaA,GAAb,GAAmBO,WAAWP,GAAX,CADxC;AAGD,K;;;;;6BAES;AAAA,mBAC0B,KAAKG,KAD/B;AAAA,UACAD,KADA,UACAA,KADA;AAAA,UACOM,KADP,UACOA,KADP;AAAA,UACcC,OADd,UACcA,OADd;;;AAGR,aACE;AAAC,4BAAD;AAAA;AACE;AAAC,mCAAD;AAAA,YAAW,OAAO,EAACC,cAAc,MAAf,EAAlB,EAA0C,WAAU,oBAApD;AACE;AAAC,+BAAD;AAAA;AACE;AAAC,iCAAD;AAAA,gBAAK,IAAI,CAAT,EAAY,WAAU,eAAtB;AAAuCF;AAAvC,aADF;AAEE;AAAC,iCAAD;AAAA,gBAAK,IAAI,CAAT;AACE;AAAC,2CAAD;AAAA;AACE,kCAAe,QADjB;AAEE,yBAAON,KAFT;AAGE,4BAAU,KAAKJ;AAHjB;AAKGW,wBAAQE,GAAR,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBACX;AAAA;AAAA,sBAAQ,KAAKA,CAAb,EAAgB,OAAOD,EAAEV,KAAzB;AAAiCU,sBAAEE;AAAnC,mBADW;AAAA,iBAAZ;AALH;AADF;AAFF;AADF;AADF,OADF;AAoBD;;;EA1C4BC,gB,UACtBC,S,GAAY;AACjBX,QAAMY,iBAAUC,MADC;AAEjBhB,SAAOe,iBAAUE,SAAV,CAAoB,CACzBF,iBAAUC,MADe,EAEzBD,iBAAUG,MAFe,CAApB,CAFU;AAMjBZ,SAAOS,iBAAUC,MANA;AAOjBT,WAASQ,iBAAUI,KAPF;AAQjBjB,iBAAea,iBAAUK;AARR,C;;;AA4CrB,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO,EAAP;AACD,CAFD;;AAIA,IAAMC,qBAAqB,EAAEtB,kCAAF,EAA3B;;kBAEe,yBAAQmB,eAAR,EAAyBG,kBAAzB,EAA6C7B,gBAA7C,C","file":"dropdown-selector.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\nimport { Form, FormGroup, FormControl, Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { setQueryParam } from '../../actions/form'\n\nclass DropdownSelector extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    label: PropTypes.string,\n    options: PropTypes.array,\n    setQueryParam: PropTypes.func\n  }\n\n  _onQueryParamChange = (evt) => {\n    const val = evt.target.value\n    this.props.setQueryParam({\n      [this.props.name]: isNaN(val) ? val : parseFloat(val)\n    })\n  }\n\n  render () {\n    const { value, label, options } = this.props\n\n    return (\n      <Form>\n        <FormGroup style={{marginBottom: '15px'}} className='date-time-selector'>\n          <Row>\n            <Col xs={6} className='setting-label'>{label}</Col>\n            <Col xs={6}>\n              <FormControl\n                componentClass='select'\n                value={value}\n                onChange={this._onQueryParamChange}\n              >\n                {options.map((o, i) => (\n                  <option key={i} value={o.value}>{o.text}</option>\n                ))}\n              </FormControl>\n            </Col>\n          </Row>\n        </FormGroup>\n      </Form>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownSelector)\n"]}