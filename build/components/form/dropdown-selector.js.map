{"version":3,"sources":["dropdown-selector.js"],"names":["DropdownSelector","_onQueryParamChange","evt","val","target","value","props","setQueryParam","name","isNaN","parseFloat","label","options","map","o","i","text","Component","propTypes","PropTypes","string","oneOfType","number","array","func","mapStateToProps","state","ownProps","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;IAEMA,gB;;;;;;;;;;;;;;gOAYJC,mB,GAAsB,UAACC,GAAD,EAAS;AAC7B,UAAMC,MAAMD,IAAIE,MAAJ,CAAWC,KAAvB;AACA,YAAKC,KAAL,CAAWC,aAAX,mCACG,MAAKD,KAAL,CAAWE,IADd,EACqBC,MAAMN,GAAN,IAAaA,GAAb,GAAmBO,WAAWP,GAAX,CADxC;AAGD,K;;;;;6BAES;AAAA,mBAC0B,KAAKG,KAD/B;AAAA,UACAD,KADA,UACAA,KADA;AAAA,UACOM,KADP,UACOA,KADP;AAAA,UACcC,OADd,UACcA,OADd;;;AAGR,aACE;AAAC,2BAAD;AAAA;AACE;AAAC,6BAAD;AAAA,YAAK,IAAI,CAAT,EAAY,WAAU,eAAtB;AAAuCD;AAAvC,SADF;AAEE;AAAC,6BAAD;AAAA,YAAK,IAAI,CAAT;AACE;AAAC,gCAAD;AAAA;AACE;AAAC,uCAAD;AAAA,gBAAW,WAAU,6BAArB;AACE;AAAC,2CAAD;AAAA;AACE,6BAAU,mBADZ;AAEE,kCAAe,QAFjB;AAGE,yBAAON,KAHT;AAIE,4BAAU,KAAKJ;AAJjB;AAMGW,wBAAQC,GAAR,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,yBACX;AAAA;AAAA,sBAAQ,KAAKA,CAAb,EAAgB,OAAOD,EAAET,KAAzB;AAAiCS,sBAAEE;AAAnC,mBADW;AAAA,iBAAZ;AANH;AADF;AADF;AADF;AAFF,OADF;AAqBD;;;EA3C4BC,gB,UACtBC,S,GAAY;AACjBV,QAAMW,iBAAUC,MADC;AAEjBf,SAAOc,iBAAUE,SAAV,CAAoB,CACzBF,iBAAUC,MADe,EAEzBD,iBAAUG,MAFe,CAApB,CAFU;AAMjBX,SAAOQ,iBAAUC,MANA;AAOjBR,WAASO,iBAAUI,KAPF;AAQjBhB,iBAAeY,iBAAUK;AARR,C;;;AA6CrB,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO,EAAP;AACD,CAFD;;AAIA,IAAMC,qBAAqB,EAAErB,kCAAF,EAA3B;;kBAEe,yBAAQkB,eAAR,EAAyBG,kBAAzB,EAA6C5B,gBAA7C,C","file":"dropdown-selector.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\nimport { Form, FormGroup, FormControl, Row, Col } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { setQueryParam } from '../../actions/form'\n\nclass DropdownSelector extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    label: PropTypes.string,\n    options: PropTypes.array,\n    setQueryParam: PropTypes.func\n  }\n\n  _onQueryParamChange = (evt) => {\n    const val = evt.target.value\n    this.props.setQueryParam({\n      [this.props.name]: isNaN(val) ? val : parseFloat(val)\n    })\n  }\n\n  render () {\n    const { value, label, options } = this.props\n\n    return (\n      <Row>\n        <Col xs={6} className='setting-label'>{label}</Col>\n        <Col xs={6}>\n          <Form>\n            <FormGroup className='dropdown-selector-container'>\n              <FormControl\n                className='dropdown-selector'\n                componentClass='select'\n                value={value}\n                onChange={this._onQueryParamChange}\n              >\n                {options.map((o, i) => (\n                  <option key={i} value={o.value}>{o.text}</option>\n                ))}\n              </FormControl>\n            </FormGroup>\n          </Form>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownSelector)\n"]}