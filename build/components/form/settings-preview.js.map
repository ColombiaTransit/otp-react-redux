{"version":3,"sources":["settings-preview.js"],"names":["SettingsPreview","props","config","query","caret","editButtonText","showDot","button","onClick","clear","Component","propTypes","PropTypes","string","compressed","bool","element","icons","object","showCaret","func","companies","modeGroups","array","queryModes","defaultProps","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;IAEMA,e;;;;;;;;;;6BAoBM;AAAA,mBACyC,KAAKC,KAD9C;AAAA,UACAC,MADA,UACAA,MADA;AAAA,UACQC,KADR,UACQA,KADR;AAAA,UACeC,KADf,UACeA,KADf;AAAA,UACsBC,cADtB,UACsBA,cADtB;AAER;;AACA,UAAIC,UAAU,8BAAkBH,KAAlB,EAAyBD,MAAzB,CAAd;AACA,UAAMK,SACJ;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAC,gCAAD;AAAA,YAAQ,SAAS,KAAKN,KAAL,CAAWO,OAA5B;AACGH,wBADH;AACmBD,mBAAS;AAAA;AAAA;AAAA;AAAO,iDAAG,4BAA0BA,KAA7B;AAAP;AAD5B,SADF;AAIGE,mBAAW,uCAAK,WAAU,KAAf;AAJd,OADF;;AASA,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf,EAAkC,SAAS,KAAKL,KAAL,CAAWO,OAAtD;AACE;AAAA;AAAA,YAAK,WAAU,SAAf;AAAA;AAAwC,mDAAxC;AAAA;AAAA,SADF;AAEGD,cAFH;AAGE,+CAAK,OAAO,EAAEE,OAAO,MAAT,EAAZ;AAHF,OADF;AAOD;;;EAxC2BC,gB,UACrBC,S,GAAY;AACjB;AACAP,SAAOQ,iBAAUC,MAFA;AAGjBC,cAAYF,iBAAUG,IAHL;AAIjBV,kBAAgBO,iBAAUI,OAJT;AAKjBC,SAAOL,iBAAUM,MALA;AAMjBC,aAAWP,iBAAUG,IANJ;AAOjBP,WAASI,iBAAUQ,IAPF;;AASjB;AACAC,aAAWT,iBAAUC,MAVJ;AAWjBS,cAAYV,iBAAUW,KAXL;AAYjBC,cAAYZ,iBAAUW;AAZL,C,SAeZE,Y,GAAe;AACpBpB,kBAAgB,qCAAG,WAAU,cAAb;AADI,C;;;AA2BxB,IAAMqB,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACL1B,YAAQyB,MAAME,GAAN,CAAU3B,MADb;AAELC,WAAOwB,MAAME,GAAN,CAAUC;AAFZ,GAAP;AAID,CALD;;AAOA,IAAMC,qBAAqB,EAA3B;;kBAEe,yBAAQL,eAAR,EAAyBK,kBAAzB,EAA6C/B,eAA7C,C","file":"settings-preview.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { isNotDefaultQuery } from '../../util/query'\n\nclass SettingsPreview extends Component {\n  static propTypes = {\n    // component props\n    caret: PropTypes.string,\n    compressed: PropTypes.bool,\n    editButtonText: PropTypes.element,\n    icons: PropTypes.object,\n    showCaret: PropTypes.bool,\n    onClick: PropTypes.func,\n\n    // application state\n    companies: PropTypes.string,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array\n  }\n\n  static defaultProps = {\n    editButtonText: <i className='fa fa-pencil' />\n  }\n\n  render () {\n    const { config, query, caret, editButtonText } = this.props\n    // Show dot indicator if the current query differs from the default query.\n    let showDot = isNotDefaultQuery(query, config)\n    const button = (\n      <div className='button-container'>\n        <Button onClick={this.props.onClick}>\n          {editButtonText}{caret && <span> <i className={`fa fa-caret-${caret}`} /></span>}\n        </Button>\n        {showDot && <div className='dot' />}\n      </div>\n    )\n\n    return (\n      <div className='settings-preview' onClick={this.props.onClick}>\n        <div className='summary'>Transit Options<br />&amp; Preferences</div>\n        {button}\n        <div style={{ clear: 'both' }} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPreview)\n"]}