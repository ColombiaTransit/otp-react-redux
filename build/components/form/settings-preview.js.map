{"version":3,"sources":["settings-preview.js"],"names":["SettingsPreview","props","caret","companies","editButtonText","icons","modeGroups","queryModes","totalModeCount","forEach","g","modes","length","selectedModeCount","selectedModes","map","mode","label","button","onClick","compressed","clear","Component","propTypes","PropTypes","string","bool","element","object","showCaret","func","array","defaultProps","mapStateToProps","state","ownProps","otp","config","currentQuery","split","mapDispatchToProps"],"mappings":"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","file":"settings-preview.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { getModeIcon } from '../../util/itinerary'\n\nclass SettingsPreview extends Component {\n  static propTypes = {\n    // component props\n    caret: PropTypes.string,\n    compressed: PropTypes.bool,\n    editButtonText: PropTypes.element,\n    icons: PropTypes.object,\n    showCaret: PropTypes.bool,\n    onClick: PropTypes.func,\n\n    // application state\n    companies: PropTypes.string,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array\n  }\n\n  static defaultProps = {\n    editButtonText: <i className='fa fa-pencil' />\n  }\n\n  render () {\n    const { caret, companies, editButtonText, icons, modeGroups, queryModes } = this.props\n\n    let totalModeCount = 0\n    modeGroups.forEach(g => { totalModeCount += g.modes.length })\n\n    const selectedModeCount = this.props.queryModes.length\n\n    const selectedModes = (\n      <div className='selected-modes'>\n        {selectedModeCount === totalModeCount\n          ? <div className='all-selected'>All Modes Selected</div>\n          : (\n            <div className='some-selected'>\n              <div className='some-selected-label'>{selectedModeCount} Modes Selected</div>\n              <div className='some-selected-modes'>\n                {queryModes.map(mode => {\n                  return <div className='mode-icon' key={mode}>\n                    {getModeIcon(\n                        mode === 'CAR_HAIL'\n                          ? {\n                            mode: 'CAR_HAIL',\n                            label: companies\n                          }\n                          : mode,\n                      icons\n                      )\n                    }\n                  </div>\n                })}\n              </div>\n            </div>\n          )\n        }\n      </div>\n    )\n\n    const button = (\n      <div className='button-container'>\n        <Button className='settings-button' onClick={this.props.onClick}>\n          {editButtonText}{caret && <span> <i className={`fa fa-caret-${caret}`} /></span>}\n        </Button>\n      </div>\n    )\n\n    return this.props.compressed\n      ? /* 'compressed' layout -- button is below selected mode preview */ (\n        <div className='settings-preview compressed'>\n          {selectedModes}\n          {button}\n        </div>\n      ) : /* 'wide' layout -- button and selected mode preview are side-by-side  */ (\n        <div className='settings-preview wide'>\n          {button}\n          {selectedModes}\n          <div style={{ clear: 'both' }} />\n        </div>\n      )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {config, currentQuery} = state.otp\n  const {companies, mode} = currentQuery\n  return {\n    companies,\n    modeGroups: config.modeGroups,\n    queryModes: mode.split(',')\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPreview)\n"]}