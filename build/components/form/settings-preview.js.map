{"version":3,"sources":["settings-preview.js"],"names":["SettingsPreview","props","config","query","caret","editButtonText","activeModes","mode","split","defaultModes","concat","showDot","modesEqual","length","sort","every","value","index","defaultParams","forEach","paramInfo","queryParams","find","qp","name","param","routingTypes","includes","routingType","applicable","default","button","onClick","clear","Component","propTypes","PropTypes","string","compressed","bool","element","icons","object","showCaret","func","companies","modeGroups","array","queryModes","defaultProps","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;AACA;;;;AACA;;;;IAEMA,e;;;;;;;;;;6BAoBM;AAAA,mBACyC,KAAKC,KAD9C;AAAA,UACAC,MADA,UACAA,MADA;AAAA,UACQC,KADR,UACQA,KADR;AAAA,UACeC,KADf,UACeA,KADf;AAAA,UACsBC,cADtB,UACsBA,cADtB;;;AAGR,UAAMC,cAAcH,MAAMI,IAAN,CAAWC,KAAX,CAAiB,GAAjB,CAApB;AACA,UAAMC,eAAe,gCAAgBP,MAAhB,EAAwBQ,MAAxB,CAA+B,CAAC,MAAD,CAA/B,CAArB;;AAEA,UAAIC,UAAU,KAAd;AACA,UAAMC,aAAcN,YAAYO,MAAZ,KAAuBJ,aAAaI,MAArC,IACjBP,YAAYQ,IAAZ,GAAmBC,KAAnB,CAAyB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAAE,eAAOD,UAAUP,aAAaK,IAAb,GAAoBG,KAApB,CAAjB;AAA6C,OAA1F,CADF;;AAGA,UAAI,CAACL,UAAL,EAAiBD,UAAU,IAAV,CAAjB,KACK;AACHO,6BAAcC,OAAd,CAAsB,iBAAS;AAC7B,cAAMC,YAAYC,sBAAYC,IAAZ,CAAiB;AAAA,mBAAMC,GAAGC,IAAH,KAAYC,KAAlB;AAAA,WAAjB,CAAlB;AACA;AACA,cAAI,CAACL,UAAUM,YAAV,CAAuBC,QAAvB,CAAgCxB,MAAMyB,WAAtC,CAAL,EAAyD;;AAEzD;AACA,cAAI,OAAOR,UAAUS,UAAjB,KAAgC,UAAhC,IACF,CAACT,UAAUS,UAAV,CAAqB1B,KAArB,EAA4BD,MAA5B,CADH,EACwC;;AAExC,cAAIC,MAAMsB,KAAN,MAAiBL,UAAUU,OAA/B,EAAwC;AACtCnB,sBAAU,IAAV;AACA;AACD;AACF,SAbD;AAcD;;AAED,UAAMoB,SACJ;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAC,gCAAD;AAAA,YAAQ,SAAS,KAAK9B,KAAL,CAAW+B,OAA5B;AACG3B,wBADH;AACmBD,mBAAS;AAAA;AAAA;AAAA;AAAO,iDAAG,4BAA0BA,KAA7B;AAAP;AAD5B,SADF;AAIGO,mBAAW,uCAAK,WAAU,KAAf;AAJd,OADF;;AASA,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAA;AAAA,YAAK,WAAU,SAAf;AAAA;AAA+B,mDAA/B;AAAA;AAAA,SADF;AAEGoB,cAFH;AAGE,+CAAK,OAAO,EAAEE,OAAO,MAAT,EAAZ;AAHF,OADF;AAOD;;;EAhE2BC,gB,UACrBC,S,GAAY;AACjB;AACA/B,SAAOgC,iBAAUC,MAFA;AAGjBC,cAAYF,iBAAUG,IAHL;AAIjBlC,kBAAgB+B,iBAAUI,OAJT;AAKjBC,SAAOL,iBAAUM,MALA;AAMjBC,aAAWP,iBAAUG,IANJ;AAOjBP,WAASI,iBAAUQ,IAPF;;AASjB;AACAC,aAAWT,iBAAUC,MAVJ;AAWjBS,cAAYV,iBAAUW,KAXL;AAYjBC,cAAYZ,iBAAUW;AAZL,C,SAeZE,Y,GAAe;AACpB5C,kBAAgB,qCAAG,WAAU,cAAb;AADI,C;;;AAmDxB,IAAM6C,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLlD,YAAQiD,MAAME,GAAN,CAAUnD,MADb;AAELC,WAAOgD,MAAME,GAAN,CAAUC;AAFZ,GAAP;AAID,CALD;;AAOA,IAAMC,qBAAqB,EAA3B;;kBAEe,yBAAQL,eAAR,EAAyBK,kBAAzB,EAA6CvD,eAA7C,C","file":"settings-preview.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { getTransitModes } from '../../util/itinerary'\nimport queryParams from '../../util/query-params'\nimport { defaultParams } from '../../util/query'\n\nclass SettingsPreview extends Component {\n  static propTypes = {\n    // component props\n    caret: PropTypes.string,\n    compressed: PropTypes.bool,\n    editButtonText: PropTypes.element,\n    icons: PropTypes.object,\n    showCaret: PropTypes.bool,\n    onClick: PropTypes.func,\n\n    // application state\n    companies: PropTypes.string,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array\n  }\n\n  static defaultProps = {\n    editButtonText: <i className='fa fa-pencil' />\n  }\n\n  render () {\n    const { config, query, caret, editButtonText } = this.props\n\n    const activeModes = query.mode.split(',')\n    const defaultModes = getTransitModes(config).concat(['WALK'])\n\n    let showDot = false\n    const modesEqual = (activeModes.length === defaultModes.length) &&\n      activeModes.sort().every((value, index) => { return value === defaultModes.sort()[index] })\n\n    if (!modesEqual) showDot = true\n    else {\n      defaultParams.forEach(param => {\n        const paramInfo = queryParams.find(qp => qp.name === param)\n        // Check that the parameter applies to the specified routingType\n        if (!paramInfo.routingTypes.includes(query.routingType)) return\n\n        // Check that the applicability test (if provided) is satisfied\n        if (typeof paramInfo.applicable === 'function' &&\n          !paramInfo.applicable(query, config)) return\n\n        if (query[param] !== paramInfo.default) {\n          showDot = true\n          return\n        }\n      })\n    }\n\n    const button = (\n      <div className='button-container'>\n        <Button onClick={this.props.onClick}>\n          {editButtonText}{caret && <span> <i className={`fa fa-caret-${caret}`} /></span>}\n        </Button>\n        {showDot && <div className='dot' />}\n      </div>\n    )\n\n    return (\n      <div className='settings-preview'>\n        <div className='summary'>Travel<br />Options</div>\n        {button}\n        <div style={{ clear: 'both' }} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPreview)\n"]}