{"version":3,"sources":["settings-selector-panel.js"],"names":["SettingsSelectorPanel","props","_setWalkOnly","_setSoloMode","_setBikeOnly","_addBikeModeToQueryModes","bikeMode","queryModes","setQueryParam","nonBikeModes","filter","m","startsWith","mode","join","_setOwnBike","_setRentedBike","_getStoredSettings","window","localStorage","getItem","_toggleStoredSettings","options","query","clearDefaultSettings","storeDefaultSettings","_resetForm","resetForm","_setAccessMode","slice","modeStr","queryParamUpdate","_lastTransitMode","split","length","config","push","companies","company","toUpperCase","state","activePanel","Boolean","includes","transitModes","icons","modeHasTransit","modes","accessModes","bicycleModes","queryIsDefault","rememberIsDisabled","marginBottom","_modeIsActive","map","k","label","fontSize","margin","textAlign","classNames","marginTop","marginLeft","marginRight","_toggleTransitMode","display","fill","width","height","verticalAlign","clear","float","option","action","iconWidth","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","defaults","routingType","modeGroups","mapDispatchToProps"],"mappings":"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","file":"settings-selector-panel.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Col, Button } from 'react-bootstrap'\n\nimport {\n  clearDefaultSettings,\n  resetForm,\n  setQueryParam,\n  storeDefaultSettings\n} from '../../actions/form'\nimport ModeButton from './mode-button'\nimport Icon from '../narrative/icon'\nimport {\n  getModeIcon,\n  isAccessMode,\n  hasBike,\n  isTransit,\n  hasTransit,\n  getTransitModes\n} from '../../util/itinerary'\nimport { getTripOptionsFromQuery, isNotDefaultQuery } from '../../util/query'\nimport GeneralSettingsPanel from './general-settings-panel'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const { companies, queryModes } = this.props\n    if (mode.mode === 'CAR_HAIL' || mode.mode === 'CAR_RENT') {\n      return Boolean(companies && mode.company && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m === mode.mode) return true\n    }\n    // All transit modes are selected\n    // if (isTransit(mode.mode) && queryModes.indexOf('TRANSIT') !== -1) return true\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _addBikeModeToQueryModes = (bikeMode) => {\n    const { queryModes, setQueryParam } = this.props\n    const nonBikeModes = queryModes.filter(m => !m.startsWith('BICYCLE'))\n    setQueryParam({ mode: [...nonBikeModes, bikeMode].join(',') })\n  }\n\n  _setOwnBike = () => this._addBikeModeToQueryModes('BICYCLE')\n\n  _setRentedBike = () => this._addBikeModeToQueryModes('BICYCLE_RENT')\n\n  _toggleTransitMode (mode) {\n    const modeStr = mode.mode || mode\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = queryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _getStoredSettings = () => window.localStorage.getItem('otp.defaultQuery')\n\n  _toggleStoredSettings = () => {\n    const options = getTripOptionsFromQuery(this.props.query)\n    if (this._getStoredSettings()) this.props.clearDefaultSettings()\n    else this.props.storeDefaultSettings(options)\n  }\n\n  _resetForm = () => this.props.resetForm()\n\n  _setAccessMode = (mode) => {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n\n    // Create object to contain multiple parameter updates if needed (i.e. 'mode', 'compainies')\n    const queryParamUpdate = {}\n\n    if (this._lastTransitMode) {\n      // Restore previous transit selection, if present\n      queryModes = this._lastTransitMode.split(',').filter(m => !isAccessMode(m))\n      this._lastTransitMode = null\n    } else {\n      // Otherwise, retain any currently selected transit modes\n      queryModes = queryModes.filter(m => !isAccessMode(m))\n    }\n\n    // If no transit modes selected, select all\n    if (!queryModes || queryModes.length === 0) {\n      queryModes = getTransitModes(this.props.config)\n    }\n\n    // Add the access mode\n    queryModes.push(modeStr)\n\n    // Do extra stuff if mode selected was a TNC\n    queryParamUpdate.companies = (modeStr === 'CAR_HAIL' || modeStr === 'CAR_RENT')\n      ? mode.company.toUpperCase()\n      : null\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { config, mode, icons, query, queryModes } = this.props\n\n    const modeHasTransit = hasTransit(mode)\n    // TODO: make configurable\n    const { transitModes, accessModes, bicycleModes } = config.modes\n    // Do not permit remembering trip options if they do not differ from the\n    // defaults and nothing has been stored\n    const queryIsDefault = !isNotDefaultQuery(query, config)\n    const rememberIsDisabled = queryIsDefault && !this._getStoredSettings()\n    return (\n      <div className='settings-selector-panel'>\n        <div className='modes-panel'>\n          <div style={{ marginBottom: '5px' }} className='pull-right'>\n            <Button\n              bsStyle='link'\n              bsSize='xsmall'\n              disabled={rememberIsDisabled}\n              onClick={this._toggleStoredSettings}\n            >{this._getStoredSettings()\n                ? <span><Icon type='times' /> Forget my options</span>\n                : <span><Icon type='lock' /> Remember trip options</span>\n              }</Button>\n            <Button\n              bsStyle='link'\n              bsSize='xsmall'\n              disabled={queryIsDefault}\n              onClick={this._resetForm}\n            >\n              <Icon type='undo' />{' '}\n              Restore{this._getStoredSettings() ? ' my' : ''} defaults\n            </Button>\n          </div>\n          {/* Take Transit button */}\n          <Row className='mode-group-row'>\n            <Col xs={12}>\n              <ModeButton\n                enabled\n                active={modeHasTransit && this._modeIsActive({ mode: 'WALK' })}\n                icons={icons}\n                mode={'TRANSIT'}\n                height={54}\n                label={'Take Transit'}\n                inlineLabel\n                onClick={() => this._setAccessMode('WALK')}\n              />\n            </Col>\n          </Row>\n\n          {/* transit access mode selector */}\n          <Row className='mode-group-row'>\n            {accessModes.map((mode, k) => {\n              return <Col xs={4} key={k}>\n                <ModeButton\n                  enabled\n                  active={modeHasTransit && this._modeIsActive(mode)}\n                  icons={icons}\n                  mode={mode}\n                  height={46}\n                  label={mode.label}\n                  showPlusTransit\n                  onClick={() => this._setAccessMode(mode)}\n                />\n              </Col>\n            })}\n          </Row>\n\n          <Row className='mode-group-row'>\n            <Col xs={2} />\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={mode === 'WALK'}\n                icons={icons}\n                mode={'WALK'}\n                height={36}\n                label={'Walk Only'}\n                inlineLabel\n                onClick={this._setWalkOnly}\n              />\n            </Col>\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={!modeHasTransit && hasBike(mode)}\n                icons={icons}\n                mode={'BICYCLE'}\n                height={36}\n                label={'Bike Only'}\n                inlineLabel\n                onClick={this._setBikeOnly}\n              />\n            </Col>\n            <Col xs={2} />\n          </Row>\n\n          {/* Transit mode selector */}\n          {/* <Row className='mode-group-row'>\n            <Col xs={12}>\n              <div className='group-header'>\n                <div className='group-name' style={{ color: modeHasTransit ? '#000' : '#ccc' }}>Filter Transit Modes</div>\n              </div>\n            </Col>\n            <Col xs={12} style={{ textAlign: 'center' }}>\n              {transitModes.map((mode, k) => {\n                return (<div style={{ display: 'inline-block', width: 64 }} key={k}>\n                  <ModeButton\n                    enabled={modeHasTransit}\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    label={mode.label}\n                    showCheck\n                    height={44}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  />\n                </div>)\n              })}\n            </Col>\n          </Row> */}\n\n        </div>\n\n        {/* Travel Preferences */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n\n            {/* The transit mode selected */}\n            {hasTransit(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label'>Use</div>\n              <div style={{ textAlign: 'left' }}>\n                {transitModes.map((mode, k) => {\n                  let classNames = ['select-button']\n                  if (this._modeIsActive(mode)) classNames.push('active')\n                  return <Button key={mode.mode}\n                    className={classNames.join(' ')}\n                    style={{ marginTop: 3, marginBottom: 3, marginLeft: 0, marginRight: 5 }}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  >\n                    <div\n                      className='mode-icon'\n                      style={{ display: 'inline-block', fill: '#000', width: 16, height: 16, marginRight: 5, verticalAlign: 'middle' }}>\n                      {getModeIcon(mode, icons)}\n                    </div>\n                    {mode.label}\n                  </Button>\n                })}\n              </div>\n              <div style={{ clear: 'both' }} />\n            </div>)}\n\n            {/* The bike trip type selector */}\n            {hasBike(mode) && !hasTransit(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label' style={{ float: 'left' }}>Use</div>\n              <div style={{ textAlign: 'right' }}>\n                {bicycleModes.map((option, k) => {\n                  let action = this._setOwnBike\n                  if (option.mode === 'BICYCLE_RENT') action = this._setRentedBike\n                  let classNames = ['select-button']\n                  if (queryModes.includes(option.mode)) classNames.push('active')\n                  // TODO: Handle different bikeshare networks\n                  return (\n                    <Button key={k}\n                      className={classNames.join(' ')}\n                      onClick={action}\n                    >\n                      <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#000', verticalAlign: 'middle', marginRight: 10 }}>\n                        {getModeIcon(option.mode, icons)}\n                      </div>\n                      <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                    </Button>\n                  )\n                })}\n              </div>\n            </div>)}\n\n            {/* Other general settings */}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { config, currentQuery, defaults } = state.otp\n  const { companies, mode, routingType } = currentQuery\n  return {\n    defaults,\n    query: currentQuery,\n    config,\n    mode,\n    companies,\n    modeGroups: config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = {\n  clearDefaultSettings,\n  resetForm,\n  setQueryParam,\n  storeDefaultSettings\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}