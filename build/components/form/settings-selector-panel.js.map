{"version":3,"sources":["settings-selector-panel.js"],"names":["SettingsSelectorPanel","props","_setWalkOnly","_setSoloMode","_setBikeOnly","_setOwnBike","nonBikeModes","queryModes","filter","m","startsWith","setQueryParam","mode","join","_setRentedBike","_setAccessMode","slice","modeStr","queryParamUpdate","_lastTransitMode","split","length","config","push","companies","company","toUpperCase","state","activePanel","Boolean","includes","transitModes","icons","modeHasTransit","modes","accessModes","bicycleModes","_modeIsActive","map","k","label","fontSize","margin","marginBottom","textAlign","classNames","marginTop","marginLeft","marginRight","_toggleTransitMode","display","fill","width","height","verticalAlign","clear","float","option","action","iconWidth","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","routingType","modeGroups","mapDispatchToProps"],"mappings":"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","file":"settings-selector-panel.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { getModeIcon, isAccessMode, hasBike, isTransit, hasTransit, getTransitModes } from '../../util/itinerary'\nimport GeneralSettingsPanel from './general-settings-panel'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const {companies, queryModes} = this.props\n    if (mode.mode === 'CAR_HAIL' || mode.mode === 'CAR_RENT') {\n      return Boolean(companies && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m === mode.mode) return true\n    }\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _setOwnBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE,' + nonBikeModes.join(',') })\n  }\n\n  _setRentedBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE_RENT,' + nonBikeModes.join(',') })\n  }\n\n  _toggleTransitMode (mode) {\n    const modeStr = mode.mode || mode\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = queryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _setAccessMode = (mode) => {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n\n    // Create object to contain multiple parameter updates if needed (i.e. 'mode', 'compainies')\n    const queryParamUpdate = {}\n\n    if (this._lastTransitMode) {\n      // Restore previous transit selection, if present\n      queryModes = this._lastTransitMode.split(',').filter(m => !isAccessMode(m))\n      this._lastTransitMode = null\n    } else {\n      // Otherwise, retain any currently selected transit modes\n      queryModes = queryModes.filter(m => !isAccessMode(m))\n    }\n\n    // If no transit modes selected, select all\n    if (!queryModes || queryModes.length === 0) queryModes = getTransitModes(this.props.config)\n\n    // Add the access mode\n    queryModes.push(modeStr)\n\n    // Set the companies parameter if mode selected was a TNC or car rental\n    queryParamUpdate.companies = (\n      modeStr === 'CAR_HAIL' || modeStr === 'CAR_RENT'\n    ) ? mode.company.toUpperCase() : null\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { config, mode, icons, queryModes } = this.props\n\n    const modeHasTransit = hasTransit(mode)\n\n    // TODO: make configurable\n    const { transitModes, accessModes, bicycleModes } = config.modes\n\n    return (\n      <div className='settings-selector-panel'>\n        <div className='modes-panel'>\n          {/* Take Transit button */}\n          <Row className='mode-group-row'>\n            <Col xs={12}>\n              <ModeButton\n                enabled\n                active={modeHasTransit && this._modeIsActive({ mode: 'WALK' })}\n                icons={icons}\n                mode={'TRANSIT'}\n                height={54}\n                label={'Take Transit'}\n                inlineLabel\n                onClick={() => this._setAccessMode('WALK')}\n              />\n            </Col>\n          </Row>\n\n          {/* transit access mode selector */}\n          <Row className='mode-group-row'>\n            {accessModes.map((mode, k) => {\n              return <Col xs={4} key={k}>\n                <ModeButton\n                  enabled\n                  active={modeHasTransit && this._modeIsActive(mode)}\n                  icons={icons}\n                  mode={mode}\n                  height={46}\n                  label={mode.label}\n                  showPlusTransit\n                  onClick={() => this._setAccessMode(mode)}\n                />\n              </Col>\n            })}\n          </Row>\n\n          <Row className='mode-group-row'>\n            <Col xs={2} />\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={mode === 'WALK'}\n                icons={icons}\n                mode={'WALK'}\n                height={36}\n                label={'Walk Only'}\n                inlineLabel\n                onClick={this._setWalkOnly}\n              />\n            </Col>\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={!modeHasTransit && hasBike(mode)}\n                icons={icons}\n                mode={'BICYCLE'}\n                height={36}\n                label={'Bike Only'}\n                inlineLabel\n                onClick={this._setBikeOnly}\n              />\n            </Col>\n            <Col xs={2} />\n          </Row>\n\n          {/* Transit mode selector */}\n          {/*<Row className='mode-group-row'>\n            <Col xs={12}>\n              <div className='group-header'>\n                <div className='group-name' style={{ color: modeHasTransit ? '#000' : '#ccc' }}>Filter Transit Modes</div>\n              </div>\n            </Col>\n            <Col xs={12} style={{ textAlign: 'center' }}>\n              {transitModes.map((mode, k) => {\n                return (<div style={{ display: 'inline-block', width: 64 }} key={k}>\n                  <ModeButton\n                    enabled={modeHasTransit}\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    label={mode.label}\n                    showCheck\n                    height={44}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  />\n                </div>)\n              })}\n            </Col>\n          </Row>*/}\n\n        </div>\n\n        {/* Travel Preferences */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n\n            {/* The transit mode selected */}\n            {hasTransit(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label'>Use</div>\n              <div style={{ textAlign: 'left' }}>\n                {transitModes.map((mode, k) => {\n                  let classNames = ['select-button']\n                  if (this._modeIsActive(mode)) classNames.push('active')\n                  return <Button key={mode.mode}\n                    className={classNames.join(' ')}\n                    style={{ marginTop: 3, marginBottom: 3, marginLeft: 0, marginRight: 5 }}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  >\n                    <div\n                      className='mode-icon'\n                      style={{ display: 'inline-block', fill: '#000', width: 16, height: 16, marginRight: 5, verticalAlign: 'middle' }}>\n                      {getModeIcon(mode, icons)}\n                    </div>\n                    {mode.label}\n                  </Button>\n                })}\n              </div>\n              <div style={{ clear: 'both' }} />\n            </div>)}\n\n            {/* The bike trip type selector */}\n            {hasBike(mode) && !hasTransit(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label' style={{ float: 'left' }}>Use</div>\n              <div style={{ textAlign: 'right' }}>\n                {bicycleModes.map((option, k) => {\n                  let action = this._setOwnBike\n                  if (option.mode === 'BICYCLE_RENT') action = this._setRentedBike\n                  let classNames = ['select-button']\n                  if (queryModes.includes(option.mode)) classNames.push('active')\n                  // TODO: Handle different bikeshare networks\n                  return (\n                    <Button key={k}\n                      className={classNames.join(' ')}\n                      onClick={action}\n                    >\n                      <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#000', verticalAlign: 'middle', marginRight: 10 }}>\n                        {getModeIcon(option.mode, icons)}\n                      </div>\n                      <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                    </Button>\n                  )\n                })}\n              </div>\n            </div>)}\n\n            {/* Other general settings */}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    config: state.otp.config,\n    mode,\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}