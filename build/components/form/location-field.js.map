{"version":3,"sources":["location-field.js"],"names":["LocationField","props","_geocodeAutocomplete","text","config","geocoder","MAPZEN_KEY","baseUrl","boundary","focusPoint","apiKey","sources","url","then","result","setState","geocodedFeatures","features","catch","err","console","error","_onClearButtonClick","type","clearLocation","value","ReactDOM","findDOMNode","formControl","focus","_onDropdownToggle","v","e","targetIsInput","target","className","indexOf","_getFormControlClassname","menuVisible","state","_onTextInputChange","evt","_onTextInputClick","currentPosition","onClick","coords","findNearbyStops","lat","latitude","lon","longitude","max","maxNearbyStops","_onKeyDown","activeIndex","key","menuItemCount","locationSelected","locationSelectedLookup","_geocodeSearch","preventDefault","_useCurrentLocation","getCurrentPosition","setLocationToCurrent","fetchingLocation","_geolocationAlert","window","alert","location","host","message","hideExistingValue","name","nextProps","static","format","log","length","warn","onLocationSelected","setLocation","label","showClearButton","isStatic","suppressNearby","nearbyStops","slice","sessionSearches","menuItems","itemIndex","optionIcon","optionTitle","currentLocationOption","createOption","push","concat","map","lonlat","fromCoordinates","feature","geometry","coordinates","properties","_setLocation","addLocationSearch","option","stop","stopsIndex","stopId","createTransitStopOption","placeholder","fetching","textControl","ctl","clearButton","width","InputGroup","Button","Component","propTypes","PropTypes","object","bool","string","array","func","defaultProps","itemKey","icon","title","onSelect","isActive","float","marginLeft","paddingTop","fontSize","dist","code","routes","route","i","shortName","longName","clear","mapStateToProps","ownProps","otp","currentQuery","transitIndex","stops","mapDispatchToProps"],"mappings":"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","file":"location-field.js","sourcesContent":["import lonlat from '@conveyal/lonlat'\nimport React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport { FormGroup, FormControl, InputGroup, DropdownButton, MenuItem } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { autocomplete, search } from 'isomorphic-mapzen-search'\nimport { throttle } from 'throttle-debounce'\n\nimport LocationIcon from '../icons/location-icon'\nimport { setLocation, setLocationToCurrent, clearLocation } from '../../actions/map'\nimport { addLocationSearch, getCurrentPosition } from '../../actions/location'\nimport { findNearbyStops } from '../../actions/api'\nimport { distanceStringImperial } from '../../util/distance'\n\nclass LocationField extends Component {\n  static propTypes = {\n    config: PropTypes.object,\n    currentPosition: PropTypes.object,\n    hideExistingValue: PropTypes.bool,\n    location: PropTypes.object,\n    label: PropTypes.string,\n    nearbyStops: PropTypes.array,\n    sessionSearches: PropTypes.array,\n    showClearButton: PropTypes.bool,\n    static: PropTypes.bool, // show autocomplete options as fixed/inline element rather than dropdown\n    stopsIndex: PropTypes.object,\n    type: PropTypes.string, // replace with locationType?\n\n    // callbacks\n    onClick: PropTypes.func,\n    onLocationSelected: PropTypes.func,\n\n    // dispatch\n    addLocationSearch: PropTypes.func,\n    clearLocation: PropTypes.func,\n    setLocation: PropTypes.func,\n    setLocationToCurrent: PropTypes.func\n  }\n\n  static defaultProps = {\n    showClearButton: true\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: props.location !== null && !props.hideExistingValue\n        ? props.location.name\n        : '',\n      menuVisible: false,\n      geocodedFeatures: [],\n      activeIndex: null\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (this.props.location !== nextProps.location) {\n      this.setState({\n        value: nextProps.location !== null ? nextProps.location.name : '',\n        geocodedFeatures: []\n      })\n    }\n  }\n\n  componentDidMount () {\n    if (this.props.static) {\n      ReactDOM.findDOMNode(this.formControl).focus()\n    }\n  }\n\n  _geocodeAutocomplete = throttle(1000, (text) => {\n    const {MAPZEN_KEY, baseUrl, boundary, focusPoint} = this.props.config.geocoder\n    autocomplete({\n      apiKey: MAPZEN_KEY,\n      boundary,\n      focusPoint,\n      sources: null,\n      text,\n      url: baseUrl ? `${baseUrl}/autocomplete` : null\n    }).then((result) => {\n      this.setState({ geocodedFeatures: result.features })\n    }).catch((err) => {\n      console.error(err)\n    })\n  })\n\n  _geocodeSearch (text) {\n    const { MAPZEN_KEY, baseUrl, boundary, focusPoint } = this.props.config.geocoder\n    search({\n      apiKey: MAPZEN_KEY,\n      boundary,\n      focusPoint,\n      text,\n      sources: null,\n      url: baseUrl ? `${baseUrl}/search` : null,\n      format: false // keep as returned GeoJSON\n    }).then((result) => {\n      console.log(`search results (query=${text})`, result)\n      if (result.features.length > 0) {\n        // Only replace geocode items if results were found\n        this.setState({ geocodedFeatures: result.features })\n      } else {\n        console.warn('No results found for geocode search. Not replacing results.')\n      }\n    }).catch((err) => {\n      console.error(err)\n    })\n  }\n\n  _getFormControlClassname () {\n    return this.props.type + '-form-control'\n  }\n\n  _onClearButtonClick = () => {\n    const { type } = this.props\n    this.props.clearLocation({ type })\n    this.setState({\n      value: '',\n      geocodedFeatures: []\n    })\n    ReactDOM.findDOMNode(this.formControl).focus()\n  }\n\n  _onDropdownToggle = (v, e) => {\n    // if clicked on input form control, keep dropdown open; otherwise, toggle\n    const targetIsInput =\n      e.target.className.indexOf(this._getFormControlClassname()) !== -1\n    const menuVisible = targetIsInput ? true : !this.state.menuVisible\n    this.setState({ menuVisible })\n  }\n\n  _onTextInputChange = (evt) => {\n    this.setState({ value: evt.target.value })\n    this._geocodeAutocomplete(evt.target.value)\n  }\n\n  _onTextInputClick = () => {\n    const { config, currentPosition, onClick } = this.props\n    if (typeof onClick === 'function') onClick()\n    this.setState({ menuVisible: true })\n    if (currentPosition && currentPosition.coords) {\n      this.props.findNearbyStops({\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude,\n        max: config.geocoder.maxNearbyStops || 4\n      })\n    }\n  }\n\n  _onKeyDown = (evt) => {\n    const { activeIndex } = this.state\n\n    switch (evt.key) {\n      // 'Down' arrow key pressed: move selected menu item down by one position\n      case 'ArrowDown':\n        if (activeIndex === this.menuItemCount - 1) {\n          this.setState({ activeIndex: null })\n          break\n        }\n        this.setState({\n          activeIndex: activeIndex === null\n            ? 0\n            : activeIndex + 1\n        })\n        break\n\n      // 'Up' arrow key pressed: move selection up by one position\n      case 'ArrowUp':\n        if (activeIndex === 0) {\n          this.setState({ activeIndex: null })\n          break\n        }\n        this.setState({\n          activeIndex: activeIndex === null\n            ? this.menuItemCount - 1\n            : activeIndex - 1\n        })\n        break\n\n      // 'Enter' keypress serves two purposes:\n      //  - If pressed when typing in search string, switch from 'autocomplete'\n      //    to 'search' geocoding\n      //  - If pressed when dropdown results menu is active, apply the location\n      //    associated with current selected menu item\n      case 'Enter':\n        if (typeof activeIndex === 'number') { // Menu is active\n          // Retrieve location selection handler from lookup object and invoke\n          const locationSelected = this.locationSelectedLookup[activeIndex]\n          if (locationSelected) locationSelected()\n\n          // Clear selection & hide the menu\n          this.setState({\n            menuVisible: false,\n            activeIndex: null\n          })\n        } else { // Menu not active; get geocode 'search' results\n          this._geocodeSearch(evt.target.value)\n        }\n\n        // Suppress default 'Enter' behavior which causes page to reload\n        evt.preventDefault()\n        break\n\n      // Any other key pressed: clear active selection\n      default:\n        this.setState({ activeIndex: null })\n    }\n  }\n\n  _setLocation (location) {\n    if (typeof this.props.onLocationSelected === 'function') {\n      this.props.onLocationSelected(location)\n    }\n    this.props.setLocation({\n      type: this.props.type,\n      location\n    })\n  }\n\n  _useCurrentLocation = () => {\n    const {currentPosition, getCurrentPosition, setLocationToCurrent, type} = this.props\n    if (currentPosition.coords) {\n      // We already have geolocation coordinates\n      setLocationToCurrent({ type })\n    } else {\n      // Call geolocation.getCurrentPosition and set as from/to type\n      this.setState({fetchingLocation: true})\n      getCurrentPosition(type)\n    }\n  }\n\n  /**\n   * Provide alert to user with reason for geolocation error\n   */\n  _geolocationAlert = () => {\n    window.alert(\n      `Geolocation either has been disabled for ${window.location.host} or is not available in your browser.\\n\\nReason: ${this.props.currentPosition.error.message || 'Unknown reason'}`\n    )\n  }\n\n  render () {\n    const {\n      currentPosition,\n      label,\n      showClearButton,\n      static: isStatic,\n      suppressNearby,\n      type,\n      nearbyStops\n    } = this.props\n\n    const { activeIndex } = this.state\n\n    let geocodedFeatures = this.state.geocodedFeatures\n    if (geocodedFeatures.length > 5) geocodedFeatures = geocodedFeatures.slice(0, 5)\n\n    let sessionSearches = this.props.sessionSearches\n    if (sessionSearches.length > 5) sessionSearches = sessionSearches.slice(0, 5)\n\n    // Assemble menu contents, to be displayed either as dropdown or static panel.\n    // Menu items are created in four phases: (1) the current location, (2) any\n    // geocoder search results; (3) nearby transit stops; and (4) saved searches\n\n    let menuItems = [] // array of menu items for display (may include non-selectable items e.g. dividers/headings)\n    let itemIndex = 0 // the index of the current location-associated menu item (excluding non-selectable items)\n    this.locationSelectedLookup = {} // maps itemIndex to a location selection handler (for use by the _onKeyDown method)\n\n    /* 1) Process the current location */\n    let locationSelected, optionIcon, optionTitle\n\n    if (!currentPosition.error) { // current position detected successfully\n      locationSelected = this._useCurrentLocation\n      optionIcon = 'location-arrow'\n      optionTitle = 'Use Current Location'\n    } else { // error detecting current position\n      locationSelected = this._geolocationAlert\n      optionIcon = 'ban'\n      optionTitle = 'Current location not available'\n    }\n\n    // Add to the selection handler lookup (for use in _onKeyDown)\n    this.locationSelectedLookup[itemIndex] = locationSelected\n\n    if (!suppressNearby) {\n      // Create and add the option item to the menu items array\n      const currentLocationOption = createOption(optionIcon, optionTitle, locationSelected, itemIndex === activeIndex)\n      menuItems.push(currentLocationOption)\n      itemIndex++\n    }\n\n    /* 2) Process geocode search result option(s) */\n    if (geocodedFeatures.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(<MenuItem header key='sr-header'>Search Results</MenuItem>)\n\n      // Iterate through the geocoder results\n      menuItems = menuItems.concat(geocodedFeatures.map(feature => {\n        // Create the selection handler\n        const locationSelected = () => {\n          // Construct the location\n          const location = lonlat.fromCoordinates(feature.geometry.coordinates)\n          location.name = feature.properties.label\n          // Set the current location\n          this._setLocation(location)\n          // Add to the location search history\n          this.props.addLocationSearch({ location })\n        }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createOption('map-pin', feature.properties.label, locationSelected, itemIndex === activeIndex)\n        itemIndex++\n        return option\n      }))\n    }\n\n    /* 3) Process nearby transit stop options */\n    if (nearbyStops.length > 0 && !suppressNearby) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(<MenuItem header key='ns-header'>Nearby Stops</MenuItem>)\n\n      // Iterate through the found nearby stops\n      menuItems = menuItems.concat(nearbyStops.map(stopId => {\n        // Constuct the location\n        const stop = this.props.stopsIndex[stopId]\n        const location = {\n          name: stop.name,\n          lat: stop.lat,\n          lon: stop.lon\n        }\n\n        // Create the location selected handler\n        const locationSelected = () => { this._setLocation(location) }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createTransitStopOption(stop, locationSelected, itemIndex === activeIndex)\n        itemIndex++\n        return option\n      }))\n    }\n\n    /* 4) Process recent search history options */\n    if (sessionSearches.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(<MenuItem header key='ss-header'>Recently Searched</MenuItem>)\n\n      // Iterate through any saved locations\n      menuItems = menuItems.concat(sessionSearches.map(location => {\n        // Create the location-selected handler\n        const locationSelected = () => { this._setLocation(location) }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createOption('search', location.name, locationSelected, itemIndex === activeIndex)\n        itemIndex++\n        return option\n      }))\n    }\n\n    // Store the number of location-associated items for reference in the _onKeyDown method\n    this.menuItemCount = itemIndex\n\n    /** the text input element **/\n    const placeholder = currentPosition.fetching === type\n      ? 'Fetching location...'\n      : label || type\n    const textControl = <FormControl\n      ref={ctl => { this.formControl = ctl }}\n      className={this._getFormControlClassname()}\n      type='text'\n      value={this.state.value}\n      placeholder={placeholder}\n      onChange={this._onTextInputChange}\n      onClick={this._onTextInputClick}\n      onKeyDown={this._onKeyDown}\n    />\n\n    /** the clear ('X') button add-on */\n    const clearButton = <InputGroup.Addon onClick={this._onClearButtonClick}>\n      <i className='fa fa-times' />\n    </InputGroup.Addon>\n\n    if (isStatic) {\n      // 'static' mode (menu is displayed alongside input, e.g., for mobile view)\n      return (\n        <div className='location-field static'>\n          <form>\n            <FormGroup>\n              <InputGroup>\n                <InputGroup.Addon>\n                  <LocationIcon type={type} />\n                </InputGroup.Addon>\n                {textControl}\n                {showClearButton && clearButton}\n              </InputGroup>\n            </FormGroup>\n          </form>\n          <ul className='dropdown-menu' style={{ width: '100%' }}>\n            {menuItems.length > 0 // Show typing prompt to avoid empty screen\n              ? menuItems\n              : <MenuItem header className={'text-center'}>\n                Begin typing to search for locations\n              </MenuItem>\n            }\n          </ul>\n        </div>\n      )\n    } else {\n      // default display mode with dropdown menu\n      return (\n        <form>\n          <FormGroup className='location-field'>\n            <InputGroup>\n              {/* location field icon -- also serves as dropdown anchor */}\n              <DropdownButton\n                componentClass={InputGroup.Button}\n                open={this.state.menuVisible}\n                onToggle={this._onDropdownToggle}\n                id='location-dropdown'\n                title={<LocationIcon type={type} />}\n                noCaret\n              >\n                {menuItems}\n              </DropdownButton>\n              {textControl}\n              {showClearButton && clearButton}\n            </InputGroup>\n          </FormGroup>\n        </form>\n      )\n    }\n  }\n}\n\n// helper functions for dropdown options\n\nlet itemKey = 0\n\nfunction createOption (icon, title, onSelect, isActive) {\n  return <MenuItem className='location-option' onSelect={onSelect} key={itemKey++} active={isActive}>\n    <div>\n      <div style={{ float: 'left' }}><i className={`fa fa-${icon}`} /></div>\n      <div style={{ marginLeft: '30px' }}>{title}</div>\n    </div>\n  </MenuItem>\n}\n\nfunction createTransitStopOption (stop, onSelect, isActive) {\n  return <MenuItem className='location-option' onSelect={onSelect} key={itemKey++} active={isActive}>\n    <div>\n      <div style={{ float: 'left', paddingTop: '3px' }}>\n        <i className='fa fa-bus' style={{ fontSize: '20px' }} />\n        <div style={{ fontSize: '8px' }}>{distanceStringImperial(stop.dist, true)}</div>\n      </div>\n      <div style={{ marginLeft: '30px' }}>\n        <div>{stop.name} ({stop.code})</div>\n        <div style={{ fontSize: '9px' }}>\n          {(stop.routes || []).map((route, i) => {\n            const name = route.shortName || route.longName\n            return (\n              <span key={`route-${i}`} className='route'>\n                {name}\n              </span>\n            )\n          })}\n        </div>\n      </div>\n      <div style={{ clear: 'both' }} />\n    </div>\n  </MenuItem>\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    location: state.otp.currentQuery[ownProps.type],\n    currentPosition: state.otp.location.currentPosition,\n    sessionSearches: state.otp.location.sessionSearches,\n    nearbyStops: state.otp.location.nearbyStops,\n    stopsIndex: state.otp.transitIndex.stops\n  }\n}\n\nconst mapDispatchToProps = {\n  addLocationSearch,\n  findNearbyStops,\n  getCurrentPosition,\n  setLocation,\n  setLocationToCurrent,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationField)\n"]}