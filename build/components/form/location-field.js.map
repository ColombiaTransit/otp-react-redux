{"version":3,"sources":["location-field.js"],"names":["LocationField","props","_geocodeAutocomplete","text","config","geocoder","MAPZEN_KEY","baseUrl","boundary","focusPoint","console","warn","apiKey","sources","url","then","result","setState","geocodedFeatures","features","catch","err","error","_onClearButtonClick","type","clearLocation","value","ReactDOM","findDOMNode","formControl","focus","_onTextInputClick","_onDropdownToggle","v","e","targetIsInput","target","className","indexOf","_getFormControlClassname","menuVisible","state","_onBlurFormGroup","relatedTarget","document","activeElement","getAttribute","_onTextInputChange","evt","currentPosition","nearbyStops","onClick","length","coords","findNearbyStops","lat","latitude","lon","longitude","max","maxNearbyStops","_onKeyDown","activeIndex","key","preventDefault","menuItemCount","locationSelected","locationSelectedLookup","_geocodeSearch","_useCurrentLocation","getCurrentPosition","onLocationSelected","setLocationToCurrent","fetchingLocation","_geolocationAlert","window","alert","location","host","message","hideExistingValue","name","nextProps","format","log","setLocation","label","showClearButton","isStatic","static","suppressNearby","slice","sessionSearches","menuItems","itemIndex","concat","map","feature","i","lonlat","fromCoordinates","geometry","coordinates","properties","_setLocation","addLocationSearch","option","createOption","push","stopId","stop","stopsIndex","createTransitStopOption","optionIcon","optionTitle","currentLocationOption","placeholder","fetching","textControl","ctl","clearButton","width","InputGroup","Button","Component","propTypes","PropTypes","object","bool","string","array","func","defaultProps","itemKey","icon","title","onSelect","isActive","isLast","float","marginLeft","paddingTop","fontSize","dist","code","routes","route","shortName","longName","clear","mapStateToProps","ownProps","otp","currentQuery","transitIndex","stops","mapDispatchToProps"],"mappings":"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","file":"location-field.js","sourcesContent":["import lonlat from '@conveyal/lonlat'\nimport React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  Button,\n  FormGroup,\n  FormControl,\n  InputGroup,\n  DropdownButton,\n  MenuItem\n} from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { autocomplete, search } from 'isomorphic-mapzen-search'\nimport { throttle } from 'throttle-debounce'\n\nimport LocationIcon from '../icons/location-icon'\nimport { setLocation, setLocationToCurrent, clearLocation } from '../../actions/map'\nimport { addLocationSearch, getCurrentPosition } from '../../actions/location'\nimport { findNearbyStops } from '../../actions/api'\nimport { distanceStringImperial } from '../../util/distance'\n\nclass LocationField extends Component {\n  static propTypes = {\n    config: PropTypes.object,\n    currentPosition: PropTypes.object,\n    hideExistingValue: PropTypes.bool,\n    location: PropTypes.object,\n    label: PropTypes.string,\n    nearbyStops: PropTypes.array,\n    sessionSearches: PropTypes.array,\n    showClearButton: PropTypes.bool,\n    static: PropTypes.bool, // show autocomplete options as fixed/inline element rather than dropdown\n    stopsIndex: PropTypes.object,\n    type: PropTypes.string, // replace with locationType?\n\n    // callbacks\n    onClick: PropTypes.func,\n    onLocationSelected: PropTypes.func,\n\n    // dispatch\n    addLocationSearch: PropTypes.func,\n    clearLocation: PropTypes.func,\n    setLocation: PropTypes.func,\n    setLocationToCurrent: PropTypes.func\n  }\n\n  static defaultProps = {\n    showClearButton: true\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      value: props.location !== null && !props.hideExistingValue\n        ? props.location.name\n        : '',\n      menuVisible: false,\n      geocodedFeatures: [],\n      activeIndex: null\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (this.props.location !== nextProps.location) {\n      this.setState({\n        value: nextProps.location !== null ? nextProps.location.name : '',\n        geocodedFeatures: []\n      })\n    }\n  }\n\n  _geocodeAutocomplete = throttle(1000, (text) => {\n    const {MAPZEN_KEY, baseUrl, boundary, focusPoint} = this.props.config.geocoder\n    if (!text) {\n      console.warn('No text entry provided for geocode autocomplete search.')\n      return\n    }\n    autocomplete({\n      apiKey: MAPZEN_KEY,\n      boundary,\n      focusPoint,\n      sources: null,\n      text,\n      url: baseUrl ? `${baseUrl}/autocomplete` : null\n    }).then((result) => {\n      this.setState({ geocodedFeatures: result.features })\n    }).catch((err) => {\n      console.error(err)\n    })\n  })\n\n  _geocodeSearch (text) {\n    const { MAPZEN_KEY, baseUrl, boundary, focusPoint } = this.props.config.geocoder\n    if (!text) {\n      console.warn('No text entry provided for geocode search.')\n      return\n    }\n    search({\n      apiKey: MAPZEN_KEY,\n      boundary,\n      focusPoint,\n      text,\n      sources: null,\n      url: baseUrl ? `${baseUrl}/search` : null,\n      format: false // keep as returned GeoJSON\n    }).then((result) => {\n      console.log(`search results (query=${text})`, result)\n      if (result.features && result.features.length > 0) {\n        // Only replace geocode items if results were found\n        this.setState({ geocodedFeatures: result.features })\n      } else {\n        console.warn('No results found for geocode search. Not replacing results.')\n      }\n    }).catch((err) => {\n      console.error(err)\n    })\n  }\n\n  _getFormControlClassname () {\n    return this.props.type + '-form-control'\n  }\n\n  _onClearButtonClick = () => {\n    const { type } = this.props\n    this.props.clearLocation({ type })\n    this.setState({\n      value: '',\n      geocodedFeatures: []\n    })\n    ReactDOM.findDOMNode(this.formControl).focus()\n    this._onTextInputClick()\n  }\n\n  _onDropdownToggle = (v, e) => {\n    // if clicked on input form control, keep dropdown open; otherwise, toggle\n    const targetIsInput =\n      e.target.className.indexOf(this._getFormControlClassname()) !== -1\n    const menuVisible = targetIsInput ? true : !this.state.menuVisible\n    this.setState({ menuVisible })\n  }\n  /**\n   * Only hide menu if the target clicked is not a menu item in the dropdown.\n   * Otherwise, the click will not \"finish\" and the menu will hide without the\n   * user having made a selection.\n   */\n  _onBlurFormGroup = (e) => {\n    // IE does not use relatedTarget, so this check handles cross-browser support.\n    // see https://stackoverflow.com/a/49325196/915811\n    const target = e.relatedTarget !== null ? e.relatedTarget : document.activeElement\n    if (!target || target.getAttribute('role') !== 'menuitem') {\n      this.setState({ menuVisible: false, value: '', geocodedFeatures: [] })\n    }\n  }\n\n  _onTextInputChange = (evt) => {\n    this.setState({ value: evt.target.value, menuVisible: true })\n    this._geocodeAutocomplete(evt.target.value)\n  }\n\n  _onTextInputClick = () => {\n    const { config, currentPosition, nearbyStops, onClick } = this.props\n    if (typeof onClick === 'function') onClick()\n    this.setState({ menuVisible: true })\n    if (nearbyStops.length === 0 && currentPosition && currentPosition.coords) {\n      this.props.findNearbyStops({\n        lat: currentPosition.coords.latitude,\n        lon: currentPosition.coords.longitude,\n        max: config.geocoder.maxNearbyStops || 4\n      })\n    }\n  }\n\n  _onKeyDown = (evt) => {\n    const { activeIndex, menuVisible } = this.state\n    switch (evt.key) {\n      // 'Down' arrow key pressed: move selected menu item down by one position\n      case 'ArrowDown':\n        // Suppress default 'ArrowDown' behavior which moves cursor to end\n        evt.preventDefault()\n        if (!menuVisible) {\n          // If the menu is not visible, simulate a text input click to show it.\n          return this._onTextInputClick()\n        }\n        if (activeIndex === this.menuItemCount - 1) {\n          return this.setState({ activeIndex: null })\n        }\n        return this.setState({\n          activeIndex: activeIndex === null\n            ? 0\n            : activeIndex + 1\n        })\n\n      // 'Up' arrow key pressed: move selection up by one position\n      case 'ArrowUp':\n        // Suppress default 'ArrowUp' behavior which moves cursor to beginning\n        evt.preventDefault()\n        if (activeIndex === 0) {\n          return this.setState({ activeIndex: null })\n        }\n        return this.setState({\n          activeIndex: activeIndex === null\n            ? this.menuItemCount - 1\n            : activeIndex - 1\n        })\n\n      // 'Enter' keypress serves two purposes:\n      //  - If pressed when typing in search string, switch from 'autocomplete'\n      //    to 'search' geocoding\n      //  - If pressed when dropdown results menu is active, apply the location\n      //    associated with current selected menu item\n      case 'Enter':\n        if (typeof activeIndex === 'number') { // Menu is active\n          // Retrieve location selection handler from lookup object and invoke\n          const locationSelected = this.locationSelectedLookup[activeIndex]\n          if (locationSelected) locationSelected()\n\n          // Clear selection & hide the menu\n          this.setState({\n            menuVisible: false,\n            activeIndex: null\n          })\n        } else { // Menu not active; get geocode 'search' results\n          this._geocodeSearch(evt.target.value)\n          // Ensure menu is visible.\n          this.setState({ menuVisible: true })\n        }\n\n        // Suppress default 'Enter' behavior which causes page to reload\n        evt.preventDefault()\n        break\n      case 'Escape':\n        // Clear selection & hide the menu\n        return this.setState({\n          menuVisible: false,\n          activeIndex: null\n        })\n      // Any other key pressed: clear active selection\n      default:\n        return this.setState({ activeIndex: null })\n    }\n  }\n\n  _setLocation (location) {\n    const { onLocationSelected, setLocation, type } = this.props\n    onLocationSelected && onLocationSelected()\n    setLocation({ type, location })\n  }\n\n  _useCurrentLocation = () => {\n    const {\n      currentPosition,\n      getCurrentPosition,\n      onLocationSelected,\n      setLocationToCurrent,\n      type\n    } = this.props\n    if (currentPosition.coords) {\n      // We already have geolocation coordinates\n      setLocationToCurrent({ type })\n      onLocationSelected && onLocationSelected()\n    } else {\n      // Call geolocation.getCurrentPosition and set as from/to type\n      this.setState({ fetchingLocation: true })\n      getCurrentPosition(type, onLocationSelected)\n    }\n  }\n\n  /**\n   * Provide alert to user with reason for geolocation error\n   */\n  _geolocationAlert = () => {\n    window.alert(\n      `Geolocation either has been disabled for ${window.location.host} or is not available in your browser.\\n\\nReason: ${this.props.currentPosition.error.message || 'Unknown reason'}`\n    )\n  }\n\n  render () {\n    const {\n      currentPosition,\n      label,\n      location,\n      showClearButton,\n      static: isStatic,\n      suppressNearby,\n      type,\n      nearbyStops\n    } = this.props\n\n    const { activeIndex } = this.state\n    let geocodedFeatures = this.state.geocodedFeatures\n    if (geocodedFeatures.length > 5) geocodedFeatures = geocodedFeatures.slice(0, 5)\n\n    let sessionSearches = this.props.sessionSearches\n    if (sessionSearches.length > 5) sessionSearches = sessionSearches.slice(0, 5)\n\n    // Assemble menu contents, to be displayed either as dropdown or static panel.\n    // Menu items are created in four phases: (1) the current location, (2) any\n    // geocoder search results; (3) nearby transit stops; and (4) saved searches\n\n    let menuItems = [] // array of menu items for display (may include non-selectable items e.g. dividers/headings)\n    let itemIndex = 0 // the index of the current location-associated menu item (excluding non-selectable items)\n    this.locationSelectedLookup = {} // maps itemIndex to a location selection handler (for use by the _onKeyDown method)\n\n    /* 1) Process geocode search result option(s) */\n    if (geocodedFeatures.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      //menuItems.push(<MenuItem header key='sr-header'>Search Results</MenuItem>)\n\n      // Iterate through the geocoder results\n      menuItems = menuItems.concat(geocodedFeatures.map((feature, i) => {\n        // Create the selection handler\n        const locationSelected = () => {\n          // Construct the location\n          const location = lonlat.fromCoordinates(feature.geometry.coordinates)\n          location.name = feature.properties.label\n          // Set the current location\n          this._setLocation(location)\n          // Add to the location search history\n          this.props.addLocationSearch({ location })\n        }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createOption('map-pin', feature.properties.label, locationSelected, itemIndex === activeIndex, i === geocodedFeatures.length - 1)\n        itemIndex++\n        return option\n      }))\n    }\n\n    /* 2) Process nearby transit stop options */\n    if (nearbyStops.length > 0 && !suppressNearby) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(<MenuItem header key='ns-header'>Nearby Stops</MenuItem>)\n\n      // Iterate through the found nearby stops\n      menuItems = menuItems.concat(nearbyStops.map((stopId, i) => {\n        // Constuct the location\n        const stop = this.props.stopsIndex[stopId]\n        const location = {\n          name: stop.name,\n          lat: stop.lat,\n          lon: stop.lon\n        }\n\n        // Create the location selected handler\n        const locationSelected = () => { this._setLocation(location) }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createTransitStopOption(stop, locationSelected, itemIndex === activeIndex, i === nearbyStops.length - 1)\n        itemIndex++\n        return option\n      }))\n    }\n\n    /* 3) Process recent search history options */\n    if (sessionSearches.length > 0) {\n      // Add the menu sub-heading (not a selectable item)\n      menuItems.push(<MenuItem header key='ss-header'>Recently Searched</MenuItem>)\n\n      // Iterate through any saved locations\n      menuItems = menuItems.concat(sessionSearches.map((location, i) => {\n        // Create the location-selected handler\n        const locationSelected = () => { this._setLocation(location) }\n\n        // Add to the selection handler lookup (for use in _onKeyDown)\n        this.locationSelectedLookup[itemIndex] = locationSelected\n\n        // Create and return the option menu item\n        const option = createOption('search', location.name, locationSelected, itemIndex === activeIndex, i === sessionSearches.length - 1)\n        itemIndex++\n        return option\n      }))\n    }\n\n    /* 4) Process the current location */\n    let locationSelected, optionIcon, optionTitle\n\n    if (!currentPosition.error) { // current position detected successfully\n      locationSelected = this._useCurrentLocation\n      optionIcon = 'location-arrow'\n      optionTitle = 'Use Current Location'\n    } else { // error detecting current position\n      locationSelected = this._geolocationAlert\n      optionIcon = 'ban'\n      optionTitle = 'Current location not available'\n    }\n\n    // Add to the selection handler lookup (for use in _onKeyDown)\n    this.locationSelectedLookup[itemIndex] = locationSelected\n\n    if (!suppressNearby) {\n      // Create and add the option item to the menu items array\n      const currentLocationOption = createOption(optionIcon, optionTitle, locationSelected, itemIndex === activeIndex)\n      menuItems.push(currentLocationOption)\n      itemIndex++\n    }\n\n    // Store the number of location-associated items for reference in the _onKeyDown method\n    this.menuItemCount = itemIndex\n\n    /** the text input element **/\n    const placeholder = currentPosition.fetching === type\n      ? 'Fetching location...'\n      : label || type\n    const textControl = <FormControl\n      autoFocus={isStatic} // focuses the input when the component mounts if static\n      ref={ctl => { this.formControl = ctl }}\n      className={this._getFormControlClassname()}\n      type='text'\n      value={this.state.value}\n      placeholder={placeholder}\n      onChange={this._onTextInputChange}\n      onClick={this._onTextInputClick}\n      onKeyDown={this._onKeyDown}\n    />\n\n    // Only include the clear ('X') button add-on if a location is selected\n    // or if the input field has text.\n    const clearButton = showClearButton && location\n      ? <InputGroup.Addon>\n        <Button\n          bsStyle='link'\n          className='clear-button'\n          onClick={this._onClearButtonClick}>\n          <i className='fa fa-times' />\n        </Button>\n      </InputGroup.Addon>\n      : null\n    if (isStatic) {\n      // 'static' mode (menu is displayed alongside input, e.g., for mobile view)\n      return (\n        <div\n          className='location-field static'>\n          <form>\n            <FormGroup>\n              <InputGroup>\n                <InputGroup.Addon>\n                  <LocationIcon type={type} />\n                </InputGroup.Addon>\n                {textControl}\n                {clearButton}\n              </InputGroup>\n            </FormGroup>\n          </form>\n          <ul className='dropdown-menu' style={{ width: '100%' }}>\n            {menuItems.length > 0 // Show typing prompt to avoid empty screen\n              ? menuItems\n              : <MenuItem header className={'text-center'}>\n                Begin typing to search for locations\n              </MenuItem>\n            }\n          </ul>\n        </div>\n      )\n    } else {\n      // default display mode with dropdown menu\n      return (\n        <form>\n          <FormGroup\n            onBlur={this._onBlurFormGroup}\n            className='location-field'>\n            <InputGroup>\n              {/* location field icon -- also serves as dropdown anchor */}\n              <DropdownButton\n                componentClass={InputGroup.Button}\n                open={this.state.menuVisible}\n                onToggle={this._onDropdownToggle}\n                id='location-dropdown'\n                title={<LocationIcon type={type} />}\n                noCaret\n              >\n                {menuItems}\n              </DropdownButton>\n              {textControl}\n              {clearButton}\n            </InputGroup>\n          </FormGroup>\n        </form>\n      )\n    }\n  }\n}\n\n// helper functions for dropdown options\n\nlet itemKey = 0\n\nfunction createOption (icon, title, onSelect, isActive, isLast) {\n  return <MenuItem className={`location-option${isLast ? ' last-option' : ''}`} onSelect={onSelect} key={itemKey++} active={isActive}>\n    <div>\n      <div style={{ float: 'left' }}><i className={`fa fa-${icon}`} /></div>\n      <div style={{ marginLeft: '30px' }}>{title}</div>\n    </div>\n  </MenuItem>\n}\n\nfunction createTransitStopOption (stop, onSelect, isActive) {\n  return <MenuItem className='location-option' onSelect={onSelect} key={itemKey++} active={isActive}>\n    <div>\n      <div style={{ float: 'left', paddingTop: '3px' }}>\n        <i className='fa fa-bus' style={{ fontSize: '20px' }} />\n        <div style={{ fontSize: '8px' }}>{distanceStringImperial(stop.dist, true)}</div>\n      </div>\n      <div style={{ marginLeft: '30px' }}>\n        <div>{stop.name} ({stop.code})</div>\n        <div style={{ fontSize: '9px' }}>\n          {(stop.routes || []).map((route, i) => {\n            const name = route.shortName || route.longName\n            return (\n              <span key={`route-${i}`} className='route'>\n                {name}\n              </span>\n            )\n          })}\n        </div>\n      </div>\n      <div style={{ clear: 'both' }} />\n    </div>\n  </MenuItem>\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    location: state.otp.currentQuery[ownProps.type],\n    currentPosition: state.otp.location.currentPosition,\n    sessionSearches: state.otp.location.sessionSearches,\n    nearbyStops: state.otp.location.nearbyStops,\n    stopsIndex: state.otp.transitIndex.stops\n  }\n}\n\nconst mapDispatchToProps = {\n  addLocationSearch,\n  findNearbyStops,\n  getCurrentPosition,\n  setLocation,\n  setLocationToCurrent,\n  clearLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationField)\n"]}