{"version":3,"sources":["mode-selector.js"],"names":["ModeSelector","_onChange","evt","console","log","target","value","props","setQueryParam","mode","config","label","showLabel","modes","map","m","i","_getDisplayText","Component","propTypes","PropTypes","object","string","func","bool","defaultProps","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;IAEMA,Y;;;;;;;;;;;;;;wNAcJC,S,GAAY,UAACC,GAAD,EAAS;AACnBC,cAAQC,GAAR,CAAYF,IAAIG,MAAJ,CAAWC,KAAvB;AACA,YAAKC,KAAL,CAAWC,aAAX,CAAyB,EAAEC,MAAMP,IAAIG,MAAJ,CAAWC,KAAnB,EAAzB;AACD,K;;;;;oCAEgBG,I,EAAM;AACrB,cAAQA,IAAR;AACE,aAAK,cAAL;AAAqB,iBAAO,iBAAP;AACrB,aAAK,iBAAL;AAAwB,iBAAO,iBAAP;AACxB,aAAK,MAAL;AAAa,iBAAO,WAAP;AACb,aAAK,SAAL;AAAgB,iBAAO,WAAP;AAJlB;AAMA,aAAOA,IAAP;AACD;;;6BAES;AAAA;;AAAA,mBACmC,KAAKF,KADxC;AAAA,UACAG,MADA,UACAA,MADA;AAAA,UACQD,IADR,UACQA,IADR;AAAA,UACcE,KADd,UACcA,KADd;AAAA,UACqBC,SADrB,UACqBA,SADrB;;;AAGR,aACE;AAAA;AAAA;AACE;AAAC,mCAAD;AAAA,YAAW,WAAU,eAArB;AACGA,sBACG;AAAC,wCAAD;AAAA;AAAeD;AAAf,WADH,GAEG,IAHN;AAKE;AAAC,uCAAD;AAAA;AACE,8BAAe,QADjB;AAEE,qBAAOF,IAFT;AAGE,wBAAU,KAAKR;AAHjB;AAKGS,mBAAOG,KAAP,CAAaC,GAAb,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,qBAChB;AAAA;AAAA,kBAAQ,KAAKA,CAAb,EAAgB,OAAOD,CAAvB;AAA2B,uBAAKE,eAAL,CAAqBF,CAArB;AAA3B,eADgB;AAAA,aAAjB;AALH;AALF;AADF,OADF;AAmBD;;;EAnDwBG,gB,UAClBC,S,GAAY;AACjBT,UAAQU,iBAAUC,MADD;AAEjBV,SAAOS,iBAAUE,MAFA;AAGjBb,QAAMW,iBAAUE,MAHC;AAIjBd,iBAAeY,iBAAUG,IAJR;AAKjBX,aAAWQ,iBAAUI;AALJ,C,SAQZC,Y,GAAe;AACpBd,SAAO,MADa;AAEpBC,aAAW;AAFS,C;;;AA6CxB,IAAMc,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLlB,YAAQiB,MAAME,GAAN,CAAUnB,MADb;AAELD,UAAMkB,MAAME,GAAN,CAAUC,YAAV,CAAuBrB;AAFxB,GAAP;AAID,CALD;;AAOA,IAAMsB,qBAAqB;AACzBvB;AADyB,CAA3B;;kBAIe,yBAAQkB,eAAR,EAAyBK,kBAAzB,EAA6C/B,YAA7C,C","file":"mode-selector.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { FormGroup, ControlLabel, FormControl } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { setQueryParam } from '../../actions/form'\n\nclass ModeSelector extends Component {\n  static propTypes = {\n    config: PropTypes.object,\n    label: PropTypes.string,\n    mode: PropTypes.string,\n    setQueryParam: PropTypes.func,\n    showLabel: PropTypes.bool\n  }\n\n  static defaultProps = {\n    label: 'Mode',\n    showLabel: true\n  }\n\n  _onChange = (evt) => {\n    console.log(evt.target.value)\n    this.props.setQueryParam({ mode: evt.target.value })\n  }\n\n  _getDisplayText (mode) {\n    switch (mode) {\n      case 'TRANSIT,WALK': return 'Walk to Transit'\n      case 'TRANSIT,BICYCLE': return 'Bike to Transit'\n      case 'WALK': return 'Walk Only'\n      case 'BICYCLE': return 'Bike Only'\n    }\n    return mode\n  }\n\n  render () {\n    const { config, mode, label, showLabel } = this.props\n\n    return (\n      <form>\n        <FormGroup className='mode-selector'>\n          {showLabel\n            ? <ControlLabel>{label}</ControlLabel>\n            : null\n          }\n          <FormControl\n            componentClass='select'\n            value={mode}\n            onChange={this._onChange}\n          >\n            {config.modes.map((m, i) => (\n              <option key={i} value={m}>{this._getDisplayText(m)}</option>\n            ))}\n          </FormControl>\n        </FormGroup>\n      </form>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    mode: state.otp.currentQuery.mode\n  }\n}\n\nconst mapDispatchToProps = {\n  setQueryParam\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModeSelector)\n"]}