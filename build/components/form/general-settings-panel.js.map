{"version":3,"sources":["general-settings-panel.js"],"names":["GeneralSettingsPanel","props","paramNames","query","config","map","paramInfo","queryParams","find","qp","name","param","routingTypes","includes","routingType","applicable","selector","label","Component","propTypes","PropTypes","object","array","defaultProps","defaultParams","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;IAEMA,oB;;;;;;;;;;6BAYM;AAAA,mBAC8B,KAAKC,KADnC;AAAA,UACAC,UADA,UACAA,UADA;AAAA,UACYC,KADZ,UACYA,KADZ;AAAA,UACmBC,MADnB,UACmBA,MADnB;;AAER,aACE;AAAA;AAAA,UAAK,WAAU,wBAAf;AACGF,mBAAWG,GAAX,CAAe,iBAAS;AACvB,cAAMC,YAAYC,sBAAYC,IAAZ,CAAiB;AAAA,mBAAMC,GAAGC,IAAH,KAAYC,KAAlB;AAAA,WAAjB,CAAlB;AACA;AACA,cAAI,CAACL,UAAUM,YAAV,CAAuBC,QAAvB,CAAgCV,MAAMW,WAAtC,CAAL,EAAyD;;AAEzD;AACA,cAAI,OAAOR,UAAUS,UAAjB,KAAgC,UAAhC,IACF,CAACT,UAAUS,UAAV,CAAqBZ,KAArB,EAA4BC,MAA5B,CADH,EACwC;;AAExC;AACA,kBAAQE,UAAUU,QAAlB;AACE,iBAAK,UAAL;AACE,qBAAO,8BAAC,0BAAD;AACL,qBAAKV,UAAUI,IADV;AAEL,sBAAMJ,UAAUI,IAFX;AAGL,uBAAOP,MAAMG,UAAUI,IAAhB,CAHF;AAIL,uBAAO,kCAAsBJ,SAAtB,EAAiC,OAAjC,EAA0CH,KAA1C,CAJF;AAKL,yBAAS,kCAAsBG,SAAtB,EAAiC,SAAjC,EAA4CH,KAA5C;AALJ,gBAAP;AAOF,iBAAK,UAAL;AACE,qBAAO,8BAAC,0BAAD;AACL,qBAAKG,UAAUW,KADV;AAEL,sBAAMX,UAAUI,IAFX;AAGL,uBAAOP,MAAMG,UAAUI,IAAhB,CAHF;AAIL,uBAAO,kCAAsBJ,SAAtB,EAAiC,OAAjC,EAA0CH,KAA1C;AAJF,gBAAP;AAVJ;AAiBD,SA3BA;AADH,OADF;AAgCD;;;EA9CgCe,gB,UAC1BC,S,GAAY;AACjBhB,SAAOiB,iBAAUC,MADA;AAEjBnB,cAAYkB,iBAAUE;AAFL,C,SAKZC,Y,GAAe;AACpB;AACA;AACArB,cAAYsB;AAHQ,C;;AA2CxB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLvB,YAAQsB,MAAME,GAAN,CAAUxB,MADb;AAELD,WAAOuB,MAAME,GAAN,CAAUC;AAFZ,GAAP;AAID,CALD;;AAOA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWJ,QAAX,EAAwB;AACjD,SAAO,EAAP;AAED,CAHD;;kBAKe,yBAAQF,eAAR,EAAyBK,kBAAzB,EAA6C9B,oBAA7C,C","file":"general-settings-panel.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport CheckboxSelector from './checkbox-selector'\nimport DropdownSelector from './dropdown-selector'\nimport queryParams from '../../util/query-params'\nimport { defaultParams, getQueryParamProperty } from '../../util/query'\n\nclass GeneralSettingsPanel extends Component {\n  static propTypes = {\n    query: PropTypes.object,\n    paramNames: PropTypes.array\n  }\n\n  static defaultProps = {\n    // The universe of properties to include in this form:\n    // TODO: allow override in config\n    paramNames: defaultParams\n  }\n\n  render () {\n    const { paramNames, query, config } = this.props\n    return (\n      <div className='general-settings-panel'>\n        {paramNames.map(param => {\n          const paramInfo = queryParams.find(qp => qp.name === param)\n          // Check that the parameter applies to the specified routingType\n          if (!paramInfo.routingTypes.includes(query.routingType)) return\n\n          // Check that the applicability test (if provided) is satisfied\n          if (typeof paramInfo.applicable === 'function' &&\n            !paramInfo.applicable(query, config)) return\n\n          // Create the UI component based on the selector type\n          switch (paramInfo.selector) {\n            case 'DROPDOWN':\n              return <DropdownSelector\n                key={paramInfo.name}\n                name={paramInfo.name}\n                value={query[paramInfo.name]}\n                label={getQueryParamProperty(paramInfo, 'label', query)}\n                options={getQueryParamProperty(paramInfo, 'options', query)}\n              />\n            case 'CHECKBOX':\n              return <CheckboxSelector\n                key={paramInfo.label}\n                name={paramInfo.name}\n                value={query[paramInfo.name]}\n                label={getQueryParamProperty(paramInfo, 'label', query)}\n              />\n          }\n        })}\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettingsPanel)\n"]}