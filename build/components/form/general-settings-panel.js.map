{"version":3,"sources":["general-settings-panel.js"],"names":["GeneralSettingsPanel","props","paramNames","query","map","paramInfo","queryParams","find","qp","name","param","routingTypes","includes","routingType","applicable","selector","label","options","Component","propTypes","PropTypes","object","array","defaultProps","mapStateToProps","state","ownProps","otp","currentQuery","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;;;IAEMA,oB;;;;;;;;;;6BAqBM;AAAA,mBACsB,KAAKC,KAD3B;AAAA,UACAC,UADA,UACAA,UADA;AAAA,UACYC,KADZ,UACYA,KADZ;;AAER,aACE;AAAA;AAAA,UAAK,WAAU,wBAAf;AACGD,mBAAWE,GAAX,CAAe,iBAAS;AACvB,cAAMC,YAAYC,sBAAYC,IAAZ,CAAiB;AAAA,mBAAMC,GAAGC,IAAH,KAAYC,KAAlB;AAAA,WAAjB,CAAlB;AACA;AACA,cAAI,CAACL,UAAUM,YAAV,CAAuBC,QAAvB,CAAgCT,MAAMU,WAAtC,CAAL,EAAyD;;AAEzD;AACA,cAAI,OAAOR,UAAUS,UAAjB,KAAgC,UAAhC,IACF,CAACT,UAAUS,UAAV,CAAqBX,KAArB,CADH,EACgC;;AAEhC;AACA,kBAAQE,UAAUU,QAAlB;AACE,iBAAK,UAAL;AACE,qBAAO,8BAAC,0BAAD;AACL,qBAAKV,UAAUI,IADV;AAEL,sBAAMJ,UAAUI,IAFX;AAGL,uBAAON,MAAME,UAAUI,IAAhB,CAHF;AAIL,uBAAO,OAAOJ,UAAUW,KAAjB,KAA2B,UAA3B,GACHX,UAAUW,KAAV,CAAgBb,KAAhB,CADG,GAEHE,UAAUW,KANT;AAQL,yBAAS,OAAOX,UAAUY,OAAjB,KAA6B,UAA7B,GACLZ,UAAUY,OAAV,CAAkBd,KAAlB,CADK,GAELE,UAAUY;AAVT,gBAAP;AAFJ;AAgBD,SA1BA;AADH,OADF;AA+BD;;;EAtDgCC,gB,UAC1BC,S,GAAY;AACjBhB,SAAOiB,iBAAUC,MADA;AAEjBnB,cAAYkB,iBAAUE;AAFL,C,SAKZC,Y,GAAe;AACpB;AACA;AACArB,cAAY,CACV,iBADU,EAEV,aAFU,EAGV,WAHU,EAIV,iBAJU,EAKV,aALU,EAMV,WANU,EAOV,UAPU,EAQV,cARU;AAHQ,C;;AAmDxB;;AAEA,IAAMsB,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLvB,WAAOsB,MAAME,GAAN,CAAUC;AADZ,GAAP;AAGD,CAJD;;AAMA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWJ,QAAX,EAAwB;AACjD,SAAO,EAAP;AAED,CAHD;;kBAKe,yBAAQF,eAAR,EAAyBK,kBAAzB,EAA6C7B,oBAA7C,C","file":"general-settings-panel.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport DropdownSelector from './dropdown-selector'\nimport queryParams from '../../util/query-params'\n\nclass GeneralSettingsPanel extends Component {\n  static propTypes = {\n    query: PropTypes.object,\n    paramNames: PropTypes.array\n  }\n\n  static defaultProps = {\n    // The universe of properties to include in this form:\n    // TODO: allow override in config\n    paramNames: [\n      'maxWalkDistance',\n      'maxWalkTime',\n      'walkSpeed',\n      'maxBikeDistance',\n      'maxBikeTime',\n      'bikeSpeed',\n      'optimize',\n      'optimizeBike'\n    ]\n  }\n\n  render () {\n    const { paramNames, query } = this.props\n    return (\n      <div className='general-settings-panel'>\n        {paramNames.map(param => {\n          const paramInfo = queryParams.find(qp => qp.name === param)\n          // Check that the parameter applies to the specified routingType\n          if (!paramInfo.routingTypes.includes(query.routingType)) return\n\n          // Check that the applicability test (if provided) is satisfied\n          if (typeof paramInfo.applicable === 'function' &&\n            !paramInfo.applicable(query)) return\n\n          // Create the UI component based on the selector type\n          switch (paramInfo.selector) {\n            case 'DROPDOWN':\n              return <DropdownSelector\n                key={paramInfo.name}\n                name={paramInfo.name}\n                value={query[paramInfo.name]}\n                label={typeof paramInfo.label === 'function'\n                  ? paramInfo.label(query)\n                  : paramInfo.label\n                }\n                options={typeof paramInfo.options === 'function'\n                  ? paramInfo.options(query)\n                  : paramInfo.options\n                }\n              />\n          }\n        })}\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettingsPanel)\n"]}