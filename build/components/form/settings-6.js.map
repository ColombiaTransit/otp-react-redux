{"version":3,"sources":["settings-6.js"],"names":["SettingsSelectorPanel","props","_setTransit","_lastTransitMode","setQueryParam","mode","_setWalkOnly","_setSoloMode","_setBikeOnly","_setOwnBike","nonBikeModes","queryModes","filter","m","startsWith","join","_setRentedBike","_setAccessMode","slice","modeStr","queryParamUpdate","split","length","push","companies","company","toUpperCase","state","activePanel","Boolean","includes","transitModes","icons","modeHasTransit","label","accessModes","bikeOptions","iconWidth","action","sideButtonStyle","height","lineHeight","fontSize","borderLeft","textAlign","padding","_modeIsActive","map","k","color","display","width","_toggleTransitMode","margin","marginBottom","float","option","backgroundColor","letterSpacing","textTransform","fill","verticalAlign","marginRight","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","routingType","modeGroups","config","mapDispatchToProps"],"mappings":"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","file":"settings-6.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { getModeIcon, isAccessMode, hasBike, isTransit, hasTransit } from '../../util/itinerary'\nimport GeneralSettingsPanel from './general-settings-panel'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const {companies, queryModes} = this.props\n    if (mode.mode === 'CAR_HAIL') {\n      return Boolean(companies && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m.startsWith(mode.mode)) return true\n    }\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setTransit = () => {\n    if (this._lastTransitMode) {\n      // returning to transit from active mode\n      this.props.setQueryParam({ mode: this._lastTransitMode })\n      this._lastTransitMode = null\n    } else {\n      this.props.setQueryParam({ mode: 'WALK,TRAM,BUS,RAIL,GONDOLA' })\n    }\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _setOwnBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE,' + nonBikeModes.join(',') })\n  }\n\n  _setRentedBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE_RENT,' + nonBikeModes.join(',') })\n  }\n\n  _toggleTransitMode (mode) {\n    const modeStr = mode.mode || mode\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = queryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _setAccessMode = (mode) => {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n\n    // Create object to contain multiple parameter updates if needed (i.e. 'mode', 'compainies')\n    const queryParamUpdate = {}\n\n    if (this._lastTransitMode) {\n      // Restore previous transit selection, if present\n      queryModes = this._lastTransitMode.split(',').filter(m => !isAccessMode(m))\n      this._lastTransitMode = null\n    } else {\n      // Otherwise, retain any currently selected transit modes\n      queryModes = queryModes.filter(m => !isAccessMode(m))\n    }\n\n    // If no transit modes selected, select all\n    // TODO: populate based on config\n    if (!queryModes || queryModes.length === 0) queryModes = ['BUS', 'TRAM', 'RAIL', 'GONDOLA']\n\n    // Add the access mode\n    queryModes.push(modeStr)\n\n    // Do extra stuff if mode selected was a TNC\n    queryParamUpdate.companies = modeStr === 'CAR_HAIL' ? mode.company.toUpperCase() : null\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { mode, icons, queryModes } = this.props\n\n    const modeHasTransit = hasTransit(mode)\n\n    // TODO: make configurable\n    const transitModes = [\n      {\n        mode: 'BUS',\n        label: 'Bus'\n      },\n      {\n        mode: 'TRAM',\n        label: 'MAX & Streetcar'\n      },\n      {\n        mode: 'RAIL',\n        label: 'Wes'\n      },\n      {\n        mode: 'GONDOLA',\n        label: 'Aerial Tram'\n      }\n    ]\n\n    const accessModes = [\n      {\n        mode: 'WALK',\n        label: 'Walk + Transit'\n      },\n      {\n        mode: 'BICYCLE',\n        label: 'Bike + Transit'\n      },\n      {\n        mode: 'CAR_PARK',\n        label: 'Park & Ride'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'UBER',\n        label: 'Uber + Transit'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'LYFT',\n        label: 'Lyft + Transit'\n      },\n      {\n        mode: 'CAR_RENT',\n        label: 'car2go + Transit'\n      }\n    ]\n\n    const bikeOptions = [\n      {\n        mode: 'BICYCLE',\n        label: 'Own Bike',\n        iconWidth: 18,\n        action: this._setOwnBike\n      },\n      {\n        mode: 'BICYCLE_RENT',\n        label: 'Biketown',\n        iconWidth: 36,\n        action: this._setRentedBike\n      }\n    ]\n\n    const sideButtonStyle = {\n      height: 30,\n      lineHeight: '1.1',\n      fontSize: 12,\n      borderLeft: '1px solid #f0f0f0',\n      textAlign: 'center',\n      padding: '6px 0px'\n    }\n    return (\n      <div className='settings-selector-panel'>\n        <div className='modes-panel'>\n          {/* Take Transit button */}\n          <Row className='mode-group-row'>\n            <Col xs={12}>\n              <ModeButton\n                enabled\n                active={modeHasTransit && this._modeIsActive({ mode: 'WALK' })}\n                icons={icons}\n                mode={'TRANSIT'}\n                height={54}\n                label={'Take Transit'}\n                inlineLabel\n                onClick={() => this._setAccessMode('WALK')}\n              />\n            </Col>\n          </Row>\n\n          {/* transit access mode selector */}\n          <Row className='mode-group-row'>\n            {accessModes.map((mode, k) => {\n              return <Col xs={4} key={k}>\n                <ModeButton\n                  enabled\n                  active={modeHasTransit && this._modeIsActive(mode)}\n                  icons={icons}\n                  mode={mode}\n                  height={46}\n                  label={mode.label}\n                  showPlusTransit\n                  onClick={() => this._setAccessMode(mode)}\n                />\n              </Col>\n            })}\n          </Row>\n\n          <Row className='mode-group-row'>\n            <Col xs={2} />\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={mode === 'WALK'}\n                icons={icons}\n                mode={'WALK'}\n                height={36}\n                label={'Walk Only'}\n                inlineLabel\n                onClick={this._setWalkOnly}\n              />\n            </Col>\n            <Col xs={4}>\n              <ModeButton\n                enabled\n                active={!modeHasTransit && hasBike(mode)}\n                icons={icons}\n                mode={'BICYCLE'}\n                height={36}\n                label={'Bike Only'}\n                inlineLabel\n                onClick={this._setBikeOnly}\n              />\n            </Col>\n            <Col xs={2} />\n          </Row>\n\n          {/* Transit mode selector */}\n          <Row className='mode-group-row'>\n            <Col xs={12}>\n              <div className='group-header'>\n                <div className='group-name' style={{ color: modeHasTransit ? '#000' : '#ccc' }}>Filter Transit Modes</div>\n              </div>\n            </Col>\n            <Col xs={12} style={{ textAlign: 'center' }}>\n              {transitModes.map((mode, k) => {\n                return (<div style={{ display: 'inline-block', width: 64 }}>\n                  <ModeButton\n                    enabled={modeHasTransit}\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    label={mode.label}\n                    showCheck\n                    height={44}\n                    onClick={() => this._toggleTransitMode(mode)}\n                  />\n                </div>)\n              })}\n            </Col>\n          </Row>\n\n        </div>\n\n        {/* Travel Preferences */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n\n            {/* The bike trip type selector */}\n            {hasBike(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label' style={{ float: 'left' }}>Use</div>\n              <div style={{ textAlign: 'right' }}>\n                <ButtonGroup>\n                  {bikeOptions.map((option, k) => {\n                    return (\n                      <Button key={k}\n                        style={{ backgroundColor: queryModes.includes(option.mode) ? '#000' : '#aaa', color: '#fff', letterSpacing: 1, textTransform: 'uppercase', fontSize: 12 }}\n                        onClick={option.action}\n                      >\n                        <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#fff', verticalAlign: 'middle', marginRight: 10 }}>\n                          {getModeIcon(option.mode, icons)}\n                        </div>\n                        <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                      </Button>\n                    )\n                  })}\n                </ButtonGroup>\n              </div>\n            </div>)}\n\n            {/* Other general settings */}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    mode,\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}