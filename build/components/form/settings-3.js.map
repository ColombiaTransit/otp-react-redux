{"version":3,"sources":["settings-3.js"],"names":["SettingsSelectorPanel","props","_setTransit","_lastTransitMode","setQueryParam","mode","_setWalkOnly","_setSoloMode","_setBikeOnly","_setOwnBike","nonBikeModes","queryModes","filter","m","startsWith","join","_setRentedBike","_setAccessMode","slice","modeStr","queryParamUpdate","push","companies","company","toUpperCase","state","activePanel","Boolean","includes","transitModes","length","icons","modeHasTransit","label","accessModes","bikeOptions","iconWidth","action","sideButtonStyle","height","lineHeight","fontSize","borderLeft","textAlign","padding","width","display","marginRight","verticalAlign","fontWeight","animation","map","k","_modeIsActive","_toggleTransitMode","margin","marginBottom","float","option","backgroundColor","color","letterSpacing","textTransform","fill","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","currentQuery","routingType","modeGroups","config","split","mapDispatchToProps"],"mappings":"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","file":"settings-3.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Col, Button, ButtonGroup } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { getModeIcon, isAccessMode, hasBike, isTransit, hasTransit } from '../../util/itinerary'\nimport GeneralSettingsPanel from './general-settings-panel'\n\nclass SettingsSelectorPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { activePanel: 'MODES' }\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const {companies, queryModes} = this.props\n    if (mode.mode === 'CAR_HAIL') {\n      return Boolean(companies && companies.includes(mode.company.toUpperCase()))\n    }\n\n    for (const m of queryModes) {\n      if (m.startsWith(mode.mode)) return true\n    }\n    return false\n  }\n\n  _setSoloMode (mode) {\n    // save current access/transit modes\n    if (hasTransit(this.props.mode)) this._lastTransitMode = this.props.mode\n    this.props.setQueryParam({ mode })\n  }\n\n  _setTransit = () => {\n    if (this._lastTransitMode) {\n      // returning to transit from active mode\n      this.props.setQueryParam({ mode: this._lastTransitMode })\n      this._lastTransitMode = null\n    } else {\n      this.props.setQueryParam({ mode: 'WALK,TRAM,BUS,RAIL,GONDOLA' })\n    }\n  }\n\n  _setWalkOnly = () => { this._setSoloMode('WALK') }\n\n  _setBikeOnly = () => { this._setSoloMode('BICYCLE') }\n\n  _setOwnBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE,' + nonBikeModes.join(',') })\n  }\n\n  _setRentedBike = () => {\n    const nonBikeModes = this.props.queryModes.filter(m => !m.startsWith('BICYCLE'))\n    this.props.setQueryParam({ mode: 'BICYCLE_RENT,' + nonBikeModes.join(',') })\n  }\n\n  _toggleTransitMode (mode) {\n    const modeStr = mode.mode || mode\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    // do not allow the last transit mode to be deselected\n    const transitModes = queryModes.filter(m => isTransit(m))\n    if (transitModes.length === 1 && transitModes[0] === modeStr) return\n\n    // If mode is currently selected, deselect it\n    if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _setAccessMode = (mode) => {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n    const modeStr = mode.mode || mode\n    const queryParamUpdate = {}\n\n    queryModes = queryModes.filter(m => !isAccessMode(m))\n    queryModes.push(modeStr)\n\n    // do extra stuff if mode selected was a TNC\n    queryParamUpdate.companies = modeStr === 'CAR_HAIL' ? mode.company.toUpperCase() : null\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    this.props.setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { mode, icons, queryModes } = this.props\n\n    const modeHasTransit = hasTransit(mode)\n\n    const transitModes = [\n      {\n        mode: 'BUS',\n        label: 'Bus'\n      },\n      {\n        mode: 'TRAM',\n        label: 'MAX & Streetcar'\n      },\n      {\n        mode: 'RAIL',\n        label: 'Wes'\n      },\n      {\n        mode: 'GONDOLA',\n        label: 'Aerial Tram'\n      }\n    ]\n\n    const accessModes = [\n      {\n        mode: 'WALK',\n        label: 'Walk + Transit'\n      },\n      {\n        mode: 'BICYCLE',\n        label: 'Bike + Transit'\n      },\n      {\n        mode: 'CAR_PARK',\n        label: 'Park & Ride'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'UBER',\n        label: 'Uber + Transit'\n      },\n      {\n        mode: 'CAR_HAIL',\n        company: 'LYFT',\n        label: 'Lyft + Transit'\n      },\n      {\n        mode: 'CAR_RENT',\n        label: 'car2go + Transit'\n      }\n    ]\n\n    const bikeOptions = [\n      {\n        mode: 'BICYCLE',\n        label: 'Own Bike',\n        iconWidth: 18,\n        action: this._setOwnBike\n      },\n      {\n        mode: 'BICYCLE_RENT',\n        label: 'Biketown',\n        iconWidth: 36,\n        action: this._setRentedBike\n      }\n    ]\n\n    const sideButtonStyle = {\n      height: 30,\n      lineHeight: '1.1',\n      fontSize: 12,\n      borderLeft: '1px solid #f0f0f0',\n      textAlign: 'center',\n      padding: '6px 0px'\n    }\n    return (\n      <div className='settings-selector-panel'>\n        {/* Trip type (Transit / Walk Only / Bike Only) selector */}\n        <Row className='button-row'>\n          <Col xs={12}>\n            <ButtonGroup justified>\n              <ButtonGroup key='transit' style={{ width: '100%' }}>\n                <Button style={{ height: 60 }}\n                  className={modeHasTransit ? 'selected' : ''}\n                  onClick={this._setTransit}\n                >\n                  <div>\n                    <div style={{ display: 'inline-block', marginRight: 10, width: 30, height: 30, verticalAlign: 'middle' }}>{getModeIcon('TRANSIT', icons)}</div>\n                    <div style={{ display: 'inline-block', fontSize: 28, fontWeight: 500, verticalAlign: 'middle' }}>Take Transit</div>\n                  </div>\n                </Button>\n              </ButtonGroup>\n            </ButtonGroup>\n          </Col>\n        </Row>\n\n        <VelocityTransitionGroup\n          enter={{ animation: 'slideDown' }}\n          leave={{ animation: 'slideUp' }}\n        >{modeHasTransit && (\n          <div className='modes-panel'>\n            {/* transit access mode selector */}\n            <Row className='mode-group-row'>\n              {accessModes.map((mode, k) => {\n                return <Col xs={4} key={k}>\n                  <ModeButton\n                    active={modeHasTransit && this._modeIsActive(mode)}\n                    icons={icons}\n                    mode={mode}\n                    height={46}\n                    label={mode.label}\n                    showPlusTransit\n                    onClick={() => this._setAccessMode(mode)}\n                  />\n                </Col>\n              })}\n            </Row>\n\n            {/* transit mode selector */}\n            <Row className='mode-group-row'>\n              {/*<div className='group-header'>\n                <div className='group-name'>Transit</div>\n              </div>*/}\n              {transitModes.map((mode, k) => {\n                return (\n                  <Col xs={3} key={k}>\n                    <ModeButton\n                      active={this._modeIsActive(mode)}\n                      icons={icons}\n                      mode={mode}\n                      label={mode.label}\n                      showCheck\n                      height={56}\n                      onClick={() => this._toggleTransitMode(mode)}\n                    />\n                  </Col>\n                )\n              })}\n            </Row>\n\n          </div>\n        )}</VelocityTransitionGroup>\n\n        {/* Walk/bike only selectors */}\n        <Row className='button-row'>\n          <Col xs={12}>\n            <ButtonGroup justified>\n              <ButtonGroup key='walk-only' style={{ width: 45 }}>\n                <Button style={sideButtonStyle}\n                  className={mode === 'WALK' ? 'selected' : ''}\n                  onClick={this._setWalkOnly}\n                >\n                  <div style={{ display: 'inline-block', marginRight: 5, width: 12, height: 12, verticalAlign: 'middle' }}>{getModeIcon('WALK', icons)}</div>\n                  <span style={{ verticalAlign: 'middle' }}>Walk Only</span>\n                </Button>\n              </ButtonGroup>\n              <ButtonGroup key='bike-only' style={{ width: 45 }}>\n                <Button style={sideButtonStyle}\n                  className={!modeHasTransit && hasBike(mode) ? 'selected' : ''}\n                  onClick={this._setBikeOnly}\n                >\n                  <div style={{ display: 'inline-block', marginRight: 5, width: 12, height: 12, verticalAlign: 'middle' }}>{getModeIcon('BICYCLE', icons)}</div>\n                  <span style={{ verticalAlign: 'middle' }}>Bike Only</span>\n                </Button>\n              </ButtonGroup>\n            </ButtonGroup>\n          </Col>\n        </Row>\n\n        {/* general settings */}\n        <Row>\n          <Col xs={12} className='general-settings-panel'>\n            <div style={{ fontSize: 18, margin: '16px 0px' }}>Travel Preferences</div>\n            {hasBike(mode) && (<div style={{ marginBottom: 16 }}>\n              <div className='setting-label' style={{ float: 'left' }}>Use</div>\n              <div style={{ textAlign: 'right' }}>\n                <ButtonGroup>\n                  {bikeOptions.map((option, k) => {\n                    return (\n                      <Button key={k}\n                        style={{ backgroundColor: queryModes.includes(option.mode) ? '#000' : '#aaa', color: '#fff', letterSpacing: 1, textTransform: 'uppercase', fontSize: 12 }}\n                        onClick={option.action}\n                      >\n                        <div style={{ display: 'inline-block', width: option.iconWidth, height: 18, fill: '#fff', verticalAlign: 'middle', marginRight: 10 }}>\n                          {getModeIcon(option.mode, icons)}\n                        </div>\n                        <span style={{ verticalAlign: 'middle' }}>{option.label}</span>\n                      </Button>\n                    )\n                  })}\n                </ButtonGroup>\n              </div>\n            </div>)}\n            <GeneralSettingsPanel />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    mode,\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSelectorPanel)\n"]}