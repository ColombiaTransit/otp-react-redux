{"version":3,"sources":["modes-panel.js"],"names":["ModesPanel","group","modes","filter","mode","props","routingType","companies","queryModes","Boolean","includes","label","toUpperCase","isSelected","slice","_getVisibleModes","forEach","modeStr","m","push","setQueryParam","join","queryParamUpdate","icons","modeGroups","map","k","groupModes","accessCount","length","showGroupSelect","_setGroupSelected","name","_modeIsActive","readableModeString","_toggleMode","Component","propTypes","PropTypes","object","array","func","str","replace","txt","charAt","substr","toLowerCase","mapStateToProps","state","ownProps","otp","currentQuery","config","split","mapDispatchToProps"],"mappings":"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","file":"modes-panel.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport { setQueryParam } from '../../actions/form'\nimport ModeButton from './mode-button'\nimport { isAccessMode } from '../../util/itinerary'\n\nclass ModesPanel extends Component {\n  static propTypes = {\n    icons: PropTypes.object,\n    modeGroups: PropTypes.array,\n    queryModes: PropTypes.array,\n    setQueryParam: PropTypes.func\n  }\n\n  _getVisibleModes (group) {\n    // Don't show the CAR_HAIL services in profile modes\n    // TODO: this could be handled more elegantly?\n    return group.modes.filter(mode =>\n      mode.mode !== 'CAR_HAIL' || this.props.routingType !== 'PROFILE'\n    )\n  }\n\n  // Returns whether a particular mode or TNC agency is active\n  _modeIsActive (mode) {\n    const {companies, queryModes} = this.props\n    if (mode.mode === 'CAR_HAIL') {\n      return Boolean(companies && companies.includes(mode.label.toUpperCase()))\n    } else {\n      return queryModes.includes(mode.mode || mode)\n    }\n  }\n\n  _setGroupSelected (group, isSelected) {\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    this._getVisibleModes(group).forEach(mode => {\n      const modeStr = mode.mode || mode\n      queryModes = queryModes.filter(m => m !== modeStr)\n      if (isSelected) queryModes.push(modeStr)\n    })\n\n    // Update the mode array in the store\n    this.props.setQueryParam({ mode: queryModes.join(',') })\n  }\n\n  _toggleMode (mode) {\n    const modeStr = mode.mode || mode\n\n    const { routingType, setQueryParam } = this.props\n    let queryModes = this.props.queryModes.slice(0) // Clone the modes array\n\n    const queryParamUpdate = {}\n\n    // Special case: we are in ITINERARY mode and changing the one access mode\n    if (routingType === 'ITINERARY' && isAccessMode(modeStr)) {\n      queryModes = queryModes.filter(m => !isAccessMode(m))\n      queryModes.push(modeStr)\n\n      // do extra stuff if mode selected was a TNC\n      queryParamUpdate.companies = modeStr === 'CAR_HAIL' ? mode.label.toUpperCase() : null\n\n    // Otherwise, if mode is currently selected, deselect it\n    } else if (queryModes.includes(modeStr)) {\n      queryModes = queryModes.filter(m => m !== modeStr)\n\n    // Or, if mode is currently not selected, select it\n    } else if (!queryModes.includes(modeStr)) {\n      queryModes.push(modeStr)\n    }\n\n    queryParamUpdate.mode = queryModes.join(',')\n\n    // Update the mode array in the store\n    setQueryParam(queryParamUpdate)\n  }\n\n  render () {\n    const { icons, modeGroups, routingType } = this.props\n\n    return (\n      <div className='modes-panel'>\n        {modeGroups.map((group, k) => {\n          const groupModes = this._getVisibleModes(group)\n          // Determine whether to show Select/Deselect All actions\n          const accessCount = groupModes.filter(m => isAccessMode(m.mode || m)).length\n          const showGroupSelect =\n            (routingType === 'PROFILE' ||\n            (routingType === 'ITINERARY' && accessCount === 0)) &&\n            groupModes.length > 1\n\n          return (\n            <div className='mode-group-row' key={k}>\n              <div className='group-header'>\n                {showGroupSelect && (\n                  <div className='group-select'>\n                    <button className='link-button'\n                      onClick={() => this._setGroupSelected(group, true)}\n                    >\n                      Select All\n                    </button>{' '}|{' '}\n                    <button className='link-button'\n                      onClick={() => this._setGroupSelected(group, false)}\n                    >\n                      Unselect All\n                    </button>\n                  </div>\n                )}\n                <div className='group-name'>{group.name}</div>\n              </div>\n              <div className='group-icons'>\n                {groupModes.map(mode => {\n                  return <ModeButton\n                    active={this._modeIsActive(mode)}\n                    icons={icons}\n                    key={mode.mode ? `${mode.mode}-${mode.label}` : mode}\n                    mode={mode}\n                    label={mode.label || readableModeString(mode)}\n                    onClick={() => this._toggleMode(mode)}\n                  />\n                })}\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\n// Make a mode string more readable (e.g. 'BICYCLE_RENT' -> 'Bicycle Rent')\nfunction readableModeString (mode) {\n  const str = mode.replace('_', ' ')\n  return str.replace(/\\w\\S*/g, txt => { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase() })\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const { companies, mode, routingType } = state.otp.currentQuery\n  return {\n    companies,\n    modeGroups: state.otp.config.modeGroups,\n    queryModes: !mode || mode.length === 0 ? [] : mode.split(','),\n    routingType\n  }\n}\n\nconst mapDispatchToProps = { setQueryParam }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModesPanel)\n"]}