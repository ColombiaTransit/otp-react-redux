{"version":3,"sources":["responsive-webapp.js"],"names":["ResponsiveWebapp","nextProps","query","props","formChanged","currentPosition","error","coords","pt","lat","latitude","lon","longitude","from","setLocationToCurrent","type","setMapCenter","initZoomOnLocate","setMapZoom","zoom","uiUrlParams","location","initialDisplay","search","parseUrlQueryString","getCurrentPosition","navigator","geolocation","watchPosition","receivedPositionResponse","position","console","log","enableHighAccuracy","params","qs","parse","substring","setMainPanelContent","MainPanelContent","ROUTE_VIEWER","id","findRoute","routeId","setViewedRoute","desktopView","mobileView","Component","propTypes","PropTypes","element","number","object","mapStateToProps","state","ownProps","activeItinerary","otp","currentQuery","mobileScreen","ui","config","map","modeGroups","mapDispatchToProps","setQueryParam","WebappWithRouter","RouterWrapper","routerConfig","basename","PrintLayout","reactRouter"],"mappings":"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","file":"responsive-webapp.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport isEqual from 'lodash.isequal'\nimport {\n  HashRouter as Router,\n  Route,\n  withRouter\n} from 'react-router-dom'\nimport qs from 'qs'\n\nimport PrintLayout from './print-layout'\nimport { setMapCenter, setMapZoom } from '../../actions/config'\nimport { setLocationToCurrent } from '../../actions/map'\nimport { getCurrentPosition, receivedPositionResponse } from '../../actions/location'\nimport { findRoute } from '../../actions/api'\nimport { formChanged, parseUrlQueryString, setQueryParam } from '../../actions/form'\nimport { MainPanelContent, setMainPanelContent } from '../../actions/ui'\n\nimport { getUiUrlParams, updateUiUrlParams } from '../../util/query'\nimport { isMobile } from '../../util/ui'\nimport { getActiveItinerary } from '../../util/state'\n\nclass ResponsiveWebapp extends Component {\n  static propTypes = {\n    desktopView: PropTypes.element,\n    initZoomOnLocate: PropTypes.number,\n    mobileView: PropTypes.element,\n    query: PropTypes.object\n  }\n\n  /** Lifecycle methods **/\n\n  componentWillReceiveProps (nextProps) {\n    const {query} = this.props\n\n    if (!isEqual(query, nextProps.query)) {\n      this.props.formChanged(query, nextProps.query)\n    }\n\n    // check if device position changed (typically only set once, on initial page load)\n    if (this.props.currentPosition !== nextProps.currentPosition) {\n      if (nextProps.currentPosition.error || !nextProps.currentPosition.coords) return\n      const pt = {\n        lat: nextProps.currentPosition.coords.latitude,\n        lon: nextProps.currentPosition.coords.longitude\n      }\n\n      // if in mobile mode and from field is not set, use current location as from and recenter map\n      if (isMobile() && this.props.query.from === null) {\n        this.props.setLocationToCurrent({ type: 'from' })\n        this.props.setMapCenter(pt)\n        if (this.props.initZoomOnLocate) {\n          this.props.setMapZoom({zoom: this.props.initZoomOnLocate})\n        }\n      }\n    }\n\n    // Check for change between ITINERARY and PROFILE routingTypes\n    // TODO: restore this for profile mode\n    /*if (query.routingType !== nextProps.query.routingType) {\n      let queryModes = nextProps.query.mode.split(',')\n      // If we are entering 'ITINERARY' mode, ensure that one and only one access mode is selected\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = ensureSingleAccessMode(queryModes)\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n      // If we are entering 'PROFILE' mode, ensure that CAR_HAIL is not selected\n      // TODO: make this more generic, i.e. introduce concept of mode->routingType permissions\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = queryModes.filter(mode => mode !== 'CAR_HAIL')\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n    }*/\n\n    // Check for any updates to tracked UI state properties and update URL as needed\n    if (!isEqual(this.props.uiUrlParams, nextProps.uiUrlParams)) {\n      updateUiUrlParams(nextProps.uiUrlParams)\n    }\n  }\n\n  componentDidMount () {\n    const { location, initialDisplay } = this.props\n    if (location && location.search) {\n      // Set search params and plan trip if routing enabled and a query exists\n      // in the URL.\n      this.props.parseUrlQueryString(location.search)\n    }\n\n    if (isMobile()) {\n      // If on mobile browser, check position on load\n      this.props.getCurrentPosition()\n\n      // Also, watch for changes in position on mobile\n      navigator.geolocation.watchPosition(\n        // On success\n        position => { this.props.receivedPositionResponse({ position }) },\n        // On error\n        error => { console.log('error in watchPosition', error) },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    }\n\n    // Check for initial display state\n    if (initialDisplay === 'route' && location.search) {\n      const params = qs.parse(location.search.substring(1))\n      this.props.setMainPanelContent(MainPanelContent.ROUTE_VIEWER)\n      if (params.id) {\n        this.props.findRoute({ routeId: params.id })\n        this.props.setViewedRoute({ routeId: params.id })\n      }\n    }\n  }\n\n  render () {\n    const { desktopView, mobileView } = this.props\n    return isMobile() ? mobileView : desktopView\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    activeItinerary: getActiveItinerary(state.otp),\n    uiUrlParams: getUiUrlParams(state.otp),\n    currentPosition: state.otp.location.currentPosition,\n    query: state.otp.currentQuery,\n    mobileScreen: state.otp.ui.mobileScreen,\n    initZoomOnLocate: state.otp.config.map && state.otp.config.map.initZoomOnLocate,\n    modeGroups: state.otp.config.modeGroups\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocationToCurrent,\n  setMapCenter,\n  setMapZoom,\n  getCurrentPosition,\n  findRoute,\n  formChanged,\n  receivedPositionResponse,\n  setMainPanelContent,\n  setQueryParam,\n  parseUrlQueryString\n}\n\nconst WebappWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResponsiveWebapp))\n\nclass RouterWrapper extends Component {\n  render () {\n    const { routerConfig } = this.props\n    return (\n      <Router basename={routerConfig && routerConfig.basename}\n        hashType='slash'\n        // TODO: Use react-router-redux once it is out of beta?\n        // history={history}\n        >\n        <div>\n          <Route\n            exact\n            path='/'\n            component={() => <WebappWithRouter {...this.props} />}\n            />\n          <Route\n            exact\n            path='/route'\n            component={() => <WebappWithRouter initialDisplay='route' {...this.props} />}\n            />\n          <Route\n            path='/print'\n            component={PrintLayout}\n            />\n          {/*\n          <Route\n            path='/itin/:id'\n            component={mainView}\n          />\n          */}\n          {/* Single route with multiple options or multiple separate routes? */}\n          {\n            /* TODO: Keep track of application state and handle starting conditions (position and/or OTP router to use)\n            <Route path='/@:latLonZoom(/plan)' component={props => <OtpApp {...props}><OtpRRExample /></OtpApp>} />\n            <Route path='/plan' component={props => <OtpApp {...props}><OtpRRExample /></OtpApp>} />\n            */\n          }\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default connect((state, ownProps) => {\n  return { routerConfig: state.otp.config.reactRouter }\n})(RouterWrapper)\n"]}