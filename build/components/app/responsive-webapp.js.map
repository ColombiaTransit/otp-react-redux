{"version":3,"sources":["responsive-webapp.js"],"names":["ResponsiveWebapp","nextProps","props","currentPosition","error","coords","pt","lat","latitude","lon","longitude","query","from","setLocationToCurrent","type","setMapCenter","initZoomOnLocate","setMapZoom","zoom","thisFrom","thisTo","to","nextFrom","nextTo","clearViewedStop","clearViewedTrip","setViewedRoute","setMainPanelContent","mobileScreen","MobileScreens","RESULTS_SUMMARY","setMobileScreen","SEARCH_FORM","routingType","queryModes","mode","split","setQueryParam","join","filter","modeGroups","newMode","forEach","modeGroup","modes","modeStr","uiUrlParams","location","search","parseUrlQueryString","_newMediaType","getCurrentPosition","navigator","geolocation","watchPosition","receivedPositionResponse","position","console","log","enableHighAccuracy","formChanged","initialPageLoad","setAutoPlan","autoPlan","desktopView","mobileView","Component","propTypes","PropTypes","element","number","object","mapStateToProps","state","ownProps","otp","currentQuery","ui","config","map","mapDispatchToProps","findNearbyStops","WebappWithRouter","RouterWrapper","routerConfig","basename","PrintLayout","reactRouter"],"mappings":"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","file":"responsive-webapp.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport isEqual from 'lodash.isequal'\nimport {\n  HashRouter as Router,\n  Route,\n  withRouter\n} from 'react-router-dom'\n\nimport PrintLayout from './print-layout'\nimport { setAutoPlan, setMapCenter, setMapZoom } from '../../actions/config'\nimport { setLocationToCurrent } from '../../actions/map'\nimport { getCurrentPosition, receivedPositionResponse } from '../../actions/location'\nimport { findNearbyStops } from '../../actions/api'\nimport { formChanged, parseUrlQueryString, setQueryParam } from '../../actions/form'\nimport {\n  MobileScreens,\n  setMobileScreen,\n  clearViewedStop,\n  clearViewedTrip,\n  setViewedRoute,\n  setMainPanelContent\n} from '../../actions/ui'\nimport {\n  ensureSingleAccessMode,\n  getUiUrlParams,\n  updateUiUrlParams\n} from '../../util/query'\nimport { isMobile } from '../../util/ui'\nimport { hasTransit, isTransit, hasCar } from '../../util/itinerary'\n\nclass ResponsiveWebapp extends Component {\n  static propTypes = {\n    desktopView: PropTypes.element,\n    initZoomOnLocate: PropTypes.number,\n    mobileView: PropTypes.element,\n    query: PropTypes.object\n  }\n\n  /** Lifecycle methods **/\n\n  componentWillReceiveProps (nextProps) {\n    // check if device position changed (typically only set once, on initial page load)\n    if (this.props.currentPosition !== nextProps.currentPosition) {\n      if (nextProps.currentPosition.error || !nextProps.currentPosition.coords) return\n      const pt = {\n        lat: nextProps.currentPosition.coords.latitude,\n        lon: nextProps.currentPosition.coords.longitude\n      }\n\n      // update nearby stops\n      // this.props.findNearbyStops(pt)\n\n      // if in mobile mode and from field is not set, use current location as from and recenter map\n      if (isMobile() && this.props.query.from === null) {\n        this.props.setLocationToCurrent({ type: 'from' })\n        this.props.setMapCenter(pt)\n        if (this.props.initZoomOnLocate) {\n          this.props.setMapZoom({zoom: this.props.initZoomOnLocate})\n        }\n      }\n    }\n\n    // check for change to from/to locations; clear active viewer if applicable\n    const {query} = this.props\n    const thisFrom = query ? query.from : null\n    const thisTo = query ? query.to : null\n    const nextFrom = query ? nextProps.query.from : null\n    const nextTo = query ? nextProps.query.to : null\n    if (thisFrom !== nextFrom || thisTo !== nextTo) {\n      // TODO: refactor / make this more consistent\n      this.props.clearViewedStop()\n      this.props.clearViewedTrip()\n      this.props.setViewedRoute(null)\n      this.props.setMainPanelContent(null)\n\n      // update mobile state if needed\n      if (isMobile() && nextProps.mobileScreen === MobileScreens.RESULTS_SUMMARY) {\n        this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n      }\n    }\n\n    // Check for change between ITINERARY and PROFILE routingTypes\n    if (query.routingType !== nextProps.query.routingType) {\n      let queryModes = nextProps.query.mode.split(',')\n      // If we are entering 'ITINERARY' mode, ensure that one and only one access mode is selected\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = ensureSingleAccessMode(queryModes)\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n      // If we are entering 'PROFILE' mode, ensure that CAR_HAIL is not selected\n      // TODO: make this more generic, i.e. introduce concept of mode->routingType permissions\n      if (nextProps.query.routingType === 'ITINERARY') {\n        queryModes = queryModes.filter(mode => mode !== 'CAR_HAIL')\n        this.props.setQueryParam({ mode: queryModes.join(',') })\n      }\n    }\n\n    // Ensure that driving modes are never selected alone\n    if (\n      query.mode !== nextProps.query.mode &&\n      hasCar(nextProps.query.mode) &&\n      !hasTransit(nextProps.query.mode) &&\n      this.props.modeGroups\n    ) {\n      let newMode = nextProps.query.mode\n      this.props.modeGroups.forEach(modeGroup => {\n        modeGroup.modes.forEach(mode => {\n          const modeStr = mode.mode || mode\n          if (isTransit(modeStr)) newMode += ',' + modeStr\n        })\n      })\n      this.props.setQueryParam({ mode: newMode })\n    }\n\n    // Check for any updates to tracked UI state properties and update URL as needed\n    if (!isEqual(this.props.uiUrlParams, nextProps.uiUrlParams)) {\n      updateUiUrlParams(nextProps.uiUrlParams)\n    }\n  }\n\n  componentDidMount () {\n    const {location} = this.props\n    if (location && location.search) {\n      // Set search params and plan trip if routing enabled and a query exists\n      // in the URL.\n      this.props.parseUrlQueryString(location.search)\n    }\n    this._newMediaType(null, true)\n\n    if (isMobile()) {\n      // If on mobile browser, check position on load\n      this.props.getCurrentPosition()\n\n      // Also, watch for changes in position on mobile\n      navigator.geolocation.watchPosition(\n        // On success\n        position => { this.props.receivedPositionResponse({ position }) },\n        // On error\n        error => { console.log('error in watchPosition', error) },\n        // Options\n        { enableHighAccuracy: true }\n      )\n    }\n\n    // if from & to locations are pre-populated, attempt to plan trip on page load\n    if (this.props.query.from && this.props.query.to) {\n      this.props.formChanged()\n    }\n  }\n\n  /** Internal methods **/\n\n  // called when switching between desktop and mobile modes\n  _newMediaType (props, initialPageLoad) {\n    props = props || this.props\n    if (isMobile()) { // entering mobile mode\n      props.setAutoPlan({ autoPlan: false })\n    } else { // entering desktop mode\n      props.setAutoPlan({ autoPlan: true })\n    }\n  }\n\n  render () {\n    const { desktopView, mobileView } = this.props\n    return isMobile() ? mobileView : desktopView\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    uiUrlParams: getUiUrlParams(state.otp),\n    currentPosition: state.otp.location.currentPosition,\n    query: state.otp.currentQuery,\n    mobileScreen: state.otp.ui.mobileScreen,\n    initZoomOnLocate: state.otp.config.map && state.otp.config.map.initZoomOnLocate,\n    modeGroups: state.otp.config.modeGroups\n  }\n}\n\nconst mapDispatchToProps = {\n  setAutoPlan,\n  setLocationToCurrent,\n  setMapCenter,\n  setMapZoom,\n  findNearbyStops,\n  getCurrentPosition,\n  formChanged,\n  clearViewedStop,\n  clearViewedTrip,\n  receivedPositionResponse,\n  setViewedRoute,\n  setMainPanelContent,\n  setMobileScreen,\n  setQueryParam,\n  parseUrlQueryString\n}\n\nconst WebappWithRouter = withRouter(connect(mapStateToProps, mapDispatchToProps)(ResponsiveWebapp))\n\nclass RouterWrapper extends Component {\n  render () {\n    const { routerConfig } = this.props\n    return (\n      <Router basename={routerConfig && routerConfig.basename}\n        hashType='slash'\n        // TODO: Use react-router-redux once it is out of beta?\n        // history={history}\n        >\n        <div>\n          <Route\n            exact\n            path='/'\n            component={() => <WebappWithRouter {...this.props} />}\n            />\n          <Route\n            path='/print'\n            component={PrintLayout}\n            />\n          {/*\n          <Route\n            path='/itin/:id'\n            component={mainView}\n          />\n          */}\n          {/* Single route with multiple options or multiple separate routes? */}\n          {\n            /* TODO: Keep track of application state and handle starting conditions (position and/or OTP router to use)\n            <Route path='/@:latLonZoom(/plan)' component={props => <OtpApp {...props}><OtpRRExample /></OtpApp>} />\n            <Route path='/plan' component={props => <OtpApp {...props}><OtpRRExample /></OtpApp>} />\n            */\n          }\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default connect((state, ownProps) => {\n  return { routerConfig: state.otp.config.reactRouter }\n})(RouterWrapper)\n"]}