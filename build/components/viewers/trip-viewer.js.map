{"version":3,"sources":["trip-viewer.js"],"names":["TripViewer","_backClicked","props","clearViewedTrip","findTrip","tripId","viewedTrip","tripData","hideBackButton","clear","route","shortName","longName","wheelchairAccessible","bikesAllowed","stops","stopTimes","map","stop","i","stripMapLineClass","length","highlightClass","fromIndex","toIndex","scheduledDeparture","id","name","Component","propTypes","PropTypes","bool","object","mapStateToProps","state","ownProps","otp","ui","transitIndex","trips","mapDispatchToProps","setLocation"],"mappings":"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","file":"trip-viewer.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, Label } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\nimport ViewStopButton from './view-stop-button'\n\nimport { clearViewedTrip } from '../../actions/ui'\nimport { findTrip } from '../../actions/api'\nimport { setLocation } from '../../actions/map'\n\nimport { formatStopTime } from '../../util/time'\n\nclass TripViewer extends Component {\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    tripData: PropTypes.object,\n    viewedTrip: PropTypes.object\n  }\n\n  _backClicked = () => {\n    this.props.clearViewedTrip()\n  }\n\n  componentWillMount () {\n    this.props.findTrip({tripId: this.props.viewedTrip.tripId})\n  }\n\n  render () {\n    const { viewedTrip, tripData, hideBackButton } = this.props\n\n    return (\n      <div className='trip-viewer'>\n        {/* Header Block */}\n        <div className='trip-viewer-header'>\n          {/* Back button */}\n          {!hideBackButton && (\n            <div className='back-button-container'>\n              <Button\n                bsSize='small'\n                onClick={this._backClicked}\n              ><Icon type='arrow-left' />Back</Button>\n            </div>\n          )}\n\n          {/* Header Text */}\n          <div className='header-text'>\n            Trip Viewer\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n\n        <div className='trip-viewer-body'>\n          {/* Basic Trip Info */}\n          {tripData && (\n            <div>\n              {/* Route name */}\n              <div>Route: <b>{tripData.route.shortName}</b> {tripData.route.longName}</div>\n\n              {/* Wheelchair/bike accessibility badges, if applicable */}\n              <h4>\n                {tripData.wheelchairAccessible === 1 &&\n                  <Label bsStyle='primary'>\n                    <Icon type='wheelchair-alt' /> Accessible\n                  </Label>\n                }\n                {' '}\n                {tripData.bikesAllowed === 1 &&\n                  <Label bsStyle='success'>\n                    <Icon type='bicycle' /> Allowed\n                  </Label>\n                }\n              </h4>\n            </div>\n          )}\n\n          {/* Stop Listing */}\n          {tripData && tripData.stops && tripData.stopTimes && (\n            tripData.stops.map((stop, i) => {\n              // determine whether to use special styling for first/last stop\n              let stripMapLineClass = 'strip-map-line'\n              if (i === 0) stripMapLineClass = 'strip-map-line-first'\n              else if (i === tripData.stops.length - 1) stripMapLineClass = 'strip-map-line-last'\n\n              // determine whether to show highlight in strip map\n              let highlightClass\n              if (i === viewedTrip.fromIndex) highlightClass = 'strip-map-highlight-first'\n              else if (i > viewedTrip.fromIndex && i < viewedTrip.toIndex) highlightClass = 'strip-map-highlight'\n              else if (i === viewedTrip.toIndex) highlightClass = 'strip-map-highlight-last'\n\n              return (\n                <div key={i}>\n                  {/* the departure time */}\n                  <div className='stop-time'>\n                    {formatStopTime(tripData.stopTimes[i].scheduledDeparture)}\n                  </div>\n\n                  {/* the vertical strip map */}\n                  <div className='strip-map-container'>\n                    { highlightClass && <div className={highlightClass} /> }\n                    <div className={stripMapLineClass} />\n                    <div className='strip-map-icon'><Icon type='circle' /></div>\n                  </div>\n\n                  {/* the stop-viewer button */}\n                  <div className='stop-button-container'>\n                    <ViewStopButton stopId={stop.id} text='View' />\n                  </div>\n\n                  {/* the main stop label */}\n                  <div className='stop-name'>\n                    {stop.name}\n                  </div>\n\n                  <div style={{ clear: 'both' }} />\n\n                </div>\n              )\n            })\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedTrip = state.otp.ui.viewedTrip\n  return {\n    tripData: state.otp.transitIndex.trips[viewedTrip.tripId],\n    viewedTrip\n  }\n}\n\nconst mapDispatchToProps = {\n  clearViewedTrip,\n  findTrip,\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TripViewer)\n"]}