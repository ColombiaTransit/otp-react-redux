{"version":3,"sources":["route-viewer.js"],"names":["RouteViewer","_backClicked","props","setMainPanelContent","setViewedRoute","findRoutes","routes","hideBackButton","languageConfig","routeViewer","clear","sort","routeComparator","map","route","id","Component","propTypes","PropTypes","bool","object","RouteRow","_onClick","findRoute","routeId","viewedRoute","isActiveRoute","activeRouteData","borderBottom","padding","shortName","longName","animation","url","mapStateToProps","state","ownProps","otp","transitIndex","ui","config","language","mapDispatchToProps"],"mappings":"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","file":"route-viewer.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\n\nimport { setMainPanelContent, setViewedRoute } from '../../actions/ui'\nimport { findRoutes, findRoute } from '../../actions/api'\nimport { routeComparator } from '../../util/itinerary'\n\nclass RouteViewer extends Component {\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    routes: PropTypes.object\n  }\n\n  _backClicked = () => {\n    this.props.setMainPanelContent(null)\n    this.props.setViewedRoute(null)\n  }\n\n  componentWillMount () {\n    this.props.findRoutes()\n  }\n\n  componentDidMount () {\n    //this.props.findRoute({ routeId: 'TriMet:1' })\n    //this.props.setViewedRoute({ routeId: 'TriMet:1' })\n  }\n\n  render () {\n    const { routes, hideBackButton, languageConfig } = this.props\n\n    return (\n      <div className='route-viewer'>\n        {/* Header Block */}\n        <div className='route-viewer-header'>\n          {/* Back button */}\n          {!hideBackButton && (\n            <div className='back-button-container'>\n              <Button\n                bsSize='small'\n                onClick={this._backClicked}\n              ><Icon type='arrow-left' />Back</Button>\n            </div>\n          )}\n\n          {/* Header Text */}\n          <div className='header-text'>\n            {languageConfig.routeViewer || 'Route Viewer'}\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n\n        <div className='route-viewer-body'>\n          {routes && Object.values(routes).sort(routeComparator).map(route =>\n            <RouteRow key={route.id} route={route} {...this.props} />)}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass RouteRow extends Component {\n\n  _onClick = () => {\n    const { route, findRoute, setViewedRoute } = this.props\n    findRoute({ routeId: route.id })\n    setViewedRoute({ routeId: route.id })\n  }\n\n  render () {\n    const { route, routes, viewedRoute } = this.props\n    const isActiveRoute = viewedRoute && viewedRoute.routeId === route.id\n    let activeRouteData\n    if (isActiveRoute) {\n      activeRouteData = routes[viewedRoute.routeId]\n    }\n\n    return (\n      <div style={{ borderBottom: '1px solid gray' }} key={route.id}>\n        <Button className='clear-button-formatting' style={{ padding: 8 }}\n          onClick={this._onClick}\n        >\n          <b>{route.shortName}</b> {route.longName}\n        </Button>\n        <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n          {isActiveRoute && (\n            <div style={{ padding: 8 }}>\n              {activeRouteData.url && (\n                <a href={activeRouteData.url} target='_blank'>Route Details</a>\n              )}\n            </div>\n          )}\n        </VelocityTransitionGroup>\n      </div>\n    )\n  }\n}\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    routes: state.otp.transitIndex.routes,\n    viewedRoute: state.otp.ui.viewedRoute,\n    languageConfig: state.otp.config.language\n  }\n}\n\nconst mapDispatchToProps = {\n  findRoute,\n  findRoutes,\n  setMainPanelContent,\n  setViewedRoute\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RouteViewer)\n"]}