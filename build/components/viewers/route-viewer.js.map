{"version":3,"sources":["route-viewer.js"],"names":["RouteViewer","_backClicked","props","setMainPanelContent","setViewedRoute","findRoutes","routes","viewedRoute","hideBackButton","findRoute","clear","sort","routeComparator","map","isActiveRoute","routeId","route","id","activeRouteData","borderBottom","padding","shortName","longName","animation","url","Component","propTypes","PropTypes","bool","object","mapStateToProps","state","ownProps","otp","transitIndex","ui","mapDispatchToProps"],"mappings":"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","file":"route-viewer.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport { connect } from 'react-redux'\n\nimport Icon from '../narrative/icon'\n\nimport { setMainPanelContent, setViewedRoute } from '../../actions/ui'\nimport { findRoutes, findRoute } from '../../actions/api'\nimport { routeComparator } from '../../util/itinerary'\n\nclass RouteViewer extends Component {\n  static propTypes = {\n    hideBackButton: PropTypes.bool,\n    routes: PropTypes.object\n  }\n\n  _backClicked = () => {\n    this.props.setMainPanelContent(null)\n    this.props.setViewedRoute(null)\n  }\n\n  componentWillMount () {\n    this.props.findRoutes()\n  }\n\n  render () {\n    const { routes, viewedRoute, hideBackButton, findRoute, setViewedRoute } = this.props\n\n    return (\n      <div className='route-viewer'>\n        {/* Header Block */}\n        <div className='route-viewer-header'>\n          {/* Back button */}\n          {!hideBackButton && (\n            <div className='back-button-container'>\n              <Button\n                bsSize='small'\n                onClick={this._backClicked}\n              ><Icon type='arrow-left' />Back</Button>\n            </div>\n          )}\n\n          {/* Header Text */}\n          <div className='header-text'>\n            Route Viewer\n          </div>\n          <div style={{ clear: 'both' }} />\n        </div>\n\n        <div className='route-viewer-body'>\n          {routes && Object.values(routes).sort(routeComparator).map(route => {\n            const isActiveRoute = viewedRoute && viewedRoute.routeId === route.id\n            let activeRouteData\n            if (isActiveRoute) {\n              activeRouteData = routes[viewedRoute.routeId]\n            }\n            return (\n              <div style={{ borderBottom: '1px solid gray' }} key={route.id}>\n                <Button className='clear-button-formatting' style={{ padding: 8 }}\n                  onClick={() => {\n                    findRoute({ routeId: route.id })\n                    setViewedRoute({ routeId: route.id })\n                  }}\n                >\n                  <b>{route.shortName}</b> {route.longName}\n                </Button>\n                <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n                  {isActiveRoute && (\n                    <div style={{ padding: 8 }}>\n                      {activeRouteData.url && (\n                        <a href={activeRouteData.url} target='_blank'>Route Details</a>\n                      )}\n                    </div>\n                  )}\n                </VelocityTransitionGroup>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\n// connect to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    routes: state.otp.transitIndex.routes,\n    viewedRoute: state.otp.ui.viewedRoute\n  }\n}\n\nconst mapDispatchToProps = {\n  findRoute,\n  findRoutes,\n  setMainPanelContent,\n  setViewedRoute\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RouteViewer)\n"]}