{"version":3,"sources":["location-search.js"],"names":["MobileLocationSearch","_locationSelected","props","setMobileScreen","MobileScreens","SEARCH_FORM","backScreen","location","locationType","otherLocation","suppressNearby","category","name","Component","propTypes","PropTypes","number","string","mapStateToProps","state","ownProps","otp","currentQuery","type","to","from","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;IAEMA,oB;;;;;;;;;;;;;;wOAMJC,iB,GAAoB,YAAM;AACxB,YAAKC,KAAL,CAAWC,eAAX,CAA2BC,kBAAcC,WAAzC;AACD,K;;;;;6BAES;AAAA,mBAMJ,KAAKH,KAND;AAAA,UAENI,UAFM,UAENA,UAFM;AAAA,UAGNC,QAHM,UAGNA,QAHM;AAAA,UAINC,YAJM,UAINA,YAJM;AAAA,UAKNC,aALM,UAKNA,aALM;;AAOR,UAAMC,iBAAiBD,iBACrBA,cAAcE,QAAd,KAA2B,kBAD7B;AAEA,aACE;AAAC,2BAAD;AAAA;AACE,sCAAC,uBAAD;AACE,gCAAmBH,iBAAiB,IAAjB,GAAwB,aAAxB,GAAwC,QAA3D,CADF;AAEE,8BAFF;AAGE,sBAAYF;AAHd,UADF;AAME;AAAA;AAAA,YAAK,WAAU,gBAAf;AACE,wCAAC,uBAAD;AACE,kBAAME,YADR;AAEE,mCAFF;AAGE,4BAAgBE,cAHlB;AAIE,mBAAOH,WAAWA,SAASK,IAApB,GAA2B,gBAJpC;AAKE,0BALF;AAME,gCAAoB,KAAKX;AAN3B;AADF;AANF,OADF;AAmBD;;;EAtCgCY,gB,UAC1BC,S,GAAY;AACjBR,cAAYS,oBAAUC,MADL;AAEjBR,gBAAcO,oBAAUE;AAFP,C;;AAwCrB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLb,cAAUY,MAAME,GAAN,CAAUC,YAAV,CAAuBF,SAASZ,YAAhC,CADL;AAELC,mBAAeW,SAASG,IAAT,KAAkB,MAAlB,GACXJ,MAAME,GAAN,CAAUC,YAAV,CAAuBE,EADZ,GAEXL,MAAME,GAAN,CAAUC,YAAV,CAAuBG;AAJtB,GAAP;AAMD,CAPD;;AASA,IAAMC,qBAAqB;AACzBvB;AADyB,CAA3B;;kBAIe,yBAAQe,eAAR,EAAyBQ,kBAAzB,EAA6C1B,oBAA7C,C","file":"location-search.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileContainer from './container'\nimport MobileNavigationBar from './navigation-bar'\nimport LocationField from '../form/location-field'\n\nimport { MobileScreens, setMobileScreen } from '../../actions/ui'\n\nclass MobileLocationSearch extends Component {\n  static propTypes = {\n    backScreen: PropTypes.number,\n    locationType: PropTypes.string\n  }\n\n  _locationSelected = () => {\n    this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n  }\n\n  render () {\n    const {\n      backScreen,\n      location,\n      locationType,\n      otherLocation\n    } = this.props\n    const suppressNearby = otherLocation &&\n      otherLocation.category === 'CURRENT_LOCATION'\n    return (\n      <MobileContainer>\n        <MobileNavigationBar\n          headerText={`Set ${locationType === 'to' ? 'Destination' : 'Origin'}`}\n          showBackButton\n          backScreen={backScreen}\n        />\n        <div className='mobile-padding'>\n          <LocationField\n            type={locationType}\n            hideExistingValue\n            suppressNearby={suppressNearby}\n            label={location ? location.name : 'Enter location'}\n            static\n            onLocationSelected={this._locationSelected}\n          />\n        </div>\n      </MobileContainer>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    location: state.otp.currentQuery[ownProps.locationType],\n    otherLocation: ownProps.type === 'from'\n      ? state.otp.currentQuery.to\n      : state.otp.currentQuery.from\n  }\n}\n\nconst mapDispatchToProps = {\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileLocationSearch)\n"]}