{"version":3,"sources":["main.js"],"names":["MobileMain","nextProps","props","uiState","mobileScreen","MobileScreens","WELCOME_SCREEN","currentQuery","from","to","currentPosition","coords","setMobileScreen","SEARCH_FORM","icons","itineraryClass","map","title","mainPanelContent","MainPanelContent","ROUTE_VIEWER","viewedStop","viewedTrip","SET_INITIAL_LOCATION","newScreen","SET_FROM_LOCATION","SET_TO_LOCATION","SET_DATETIME","SET_OPTIONS","RESULTS_SUMMARY","Component","propTypes","PropTypes","object","func","element","mapStateToProps","state","ownProps","otp","ui","location","mapDispatchToProps"],"mappings":"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","file":"main.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport MobileDateTimeScreen from './date-time-screen'\nimport MobileOptionsScreen from './options-screen'\nimport MobileLocationSearch from './location-search'\nimport MobileWelcomeScreen from './welcome-screen'\nimport MobileResultsScreen from './results-screen'\nimport MobileSearchScreen from './search-screen'\nimport MobileStopViewer from './stop-viewer'\nimport MobileTripViewer from './trip-viewer'\nimport MobileRouteViewer from './route-viewer'\n\nimport { MobileScreens, MainPanelContent, setMobileScreen } from '../../actions/ui'\n\nclass MobileMain extends Component {\n  static propTypes = {\n    currentQuery: PropTypes.object,\n    icons: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    map: PropTypes.element,\n    setMobileScreen: PropTypes.func,\n    title: PropTypes.element,\n    uiState: PropTypes.object\n  }\n\n  componentWillReceiveProps (nextProps) {\n    // Check if we are in the welcome screen and both locations have been set OR\n    // auto-detect is denied and one location is set\n    if (\n      this.props.uiState.mobileScreen === MobileScreens.WELCOME_SCREEN && (\n        (nextProps.currentQuery.from && nextProps.currentQuery.to) ||\n        (!nextProps.currentPosition.coords && (nextProps.currentQuery.from || nextProps.currentQuery.to))\n      )\n    ) {\n      // If so, advance to main search screen\n      this.props.setMobileScreen(MobileScreens.SEARCH_FORM)\n    }\n  }\n\n  render () {\n    const { icons, itineraryClass, map, title, uiState } = this.props\n\n    // check for route viewer\n    if (uiState.mainPanelContent === MainPanelContent.ROUTE_VIEWER) {\n      return <MobileRouteViewer />\n    }\n\n    // check for viewed stop\n    if (uiState.viewedStop) return <MobileStopViewer />\n\n    // check for viewed trip\n    if (uiState.viewedTrip) return <MobileTripViewer />\n\n    switch (uiState.mobileScreen) {\n      case MobileScreens.WELCOME_SCREEN:\n        return <MobileWelcomeScreen map={map} title={title} />\n\n      case MobileScreens.SET_INITIAL_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.WELCOME_SCREEN}\n          />\n        )\n\n      case MobileScreens.SEARCH_FORM:\n        return (\n          <MobileSearchScreen\n            icons={icons}\n            map={map}\n            newScreen={this.newScreen}\n          />\n        )\n\n      case MobileScreens.SET_FROM_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='from'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_TO_LOCATION:\n        return (\n          <MobileLocationSearch\n            locationType='to'\n            backScreen={MobileScreens.SEARCH_FORM}\n          />\n        )\n\n      case MobileScreens.SET_DATETIME:\n        return <MobileDateTimeScreen />\n\n      case MobileScreens.SET_OPTIONS:\n        return <MobileOptionsScreen icons={icons} />\n\n      case MobileScreens.RESULTS_SUMMARY:\n        return <MobileResultsScreen map={map} itineraryClass={itineraryClass} />\n\n      default:\n        return <p>Invalid mobile screen</p>\n    }\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    uiState: state.otp.ui,\n    currentQuery: state.otp.currentQuery,\n    currentPosition: state.otp.location.currentPosition\n  }\n}\n\nconst mapDispatchToProps = {\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileMain)\n"]}