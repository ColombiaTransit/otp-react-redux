{"version":3,"sources":["welcome-screen.js"],"names":["MobileWelcomeScreen","_toFieldClicked","props","setMobileScreen","MobileScreens","SET_INITIAL_LOCATION","_locationSetFromPopup","selection","type","setLocationToCurrent","title","Component","propTypes","map","PropTypes","element","func","mapStateToProps","state","ownProps","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;IAEMA,mB;;;;;;;;;;;;;;sOAQJC,e,GAAkB,YAAM;AACtB,YAAKC,KAAL,CAAWC,eAAX,CAA2BC,kBAAcC,oBAAzC;AACD,K,QAMDC,qB,GAAwB,UAACC,SAAD,EAAe;AACrC;AACA;AACA;AACA,UAAIA,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC7B,cAAKN,KAAL,CAAWO,oBAAX,CAAgC,EAAED,MAAM,IAAR,EAAhC;AACD;AACF,K;;;AAXD;;;;;;6BAaU;AACR,aACE;AAAC,2BAAD;AAAA;AACE,sCAAC,uBAAD,IAAqB,OAAO,KAAKN,KAAL,CAAWQ,KAAvC,GADF;AAEE;AAAA;AAAA,YAAK,WAAU,gBAAf;AACE,wCAAC,uBAAD;AACE,kBAAK,IADP;AAEE,mBAAM,0BAFR;AAGE,qBAAS,KAAKT,eAHhB;AAIE,6BAAiB;AAJnB;AADF,SAFF;AAUE;AAAA;AAAA,YAAK,WAAU,aAAf;AACE,wCAAC,oBAAD,IAAY,eAAe,KAAKK,qBAAhC;AADF;AAVF,OADF;AAgBD;;;EA1C+BK,gB,UACzBC,S,GAAY;AACjBC,OAAKC,oBAAUC,OADE;;AAGjBN,wBAAsBK,oBAAUE,IAHf;AAIjBb,mBAAiBW,oBAAUE;AAJV,C;;AA4CrB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO,EAAP;AACD,CAFD;;AAIA,IAAMC,qBAAqB;AACzBX,iDADyB;AAEzBN;AAFyB,CAA3B;;kBAKe,yBAAQc,eAAR,EAAyBG,kBAAzB,EAA6CpB,mBAA7C,C","file":"welcome-screen.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport DefaultMap from '../map/default-map'\nimport LocationField from '../form/location-field'\nimport MobileContainer from './container'\nimport MobileNavigationBar from './navigation-bar'\n\nimport { MobileScreens, setMobileScreen } from '../../actions/ui'\nimport { setLocationToCurrent } from '../../actions/map'\n\nclass MobileWelcomeScreen extends Component {\n  static propTypes = {\n    map: PropTypes.element,\n\n    setLocationToCurrent: PropTypes.func,\n    setMobileScreen: PropTypes.func\n  }\n\n  _toFieldClicked = () => {\n    this.props.setMobileScreen(MobileScreens.SET_INITIAL_LOCATION)\n  }\n\n  /* Called when the user selects a from/to location using the selection\n   * popup (invoked in mobile mode via a long tap). Note that BaseMap already\n   * takes care of updating the query in the store w/ the selected location */\n\n  _locationSetFromPopup = (selection) => {\n    // If the tapped location was selected as the 'from' endpoint, set the 'to'\n    // endpoint to be the current user location. (If selected as the 'to' point,\n    // no action is needed since 'from' is the current location by default.)\n    if (selection.type === 'from') {\n      this.props.setLocationToCurrent({ type: 'to' })\n    }\n  }\n\n  render () {\n    return (\n      <MobileContainer>\n        <MobileNavigationBar title={this.props.title} />\n        <div className='mobile-padding'>\n          <LocationField\n            type='to'\n            label='Where do you want to go?'\n            onClick={this._toFieldClicked}\n            showClearButton={false}\n          />\n        </div>\n        <div className='welcome-map'>\n          <DefaultMap onSetLocation={this._locationSetFromPopup} />\n        </div>\n      </MobileContainer>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return { }\n}\n\nconst mapDispatchToProps = {\n  setLocationToCurrent,\n  setMobileScreen\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileWelcomeScreen)\n"]}