{"version":3,"sources":["map.js"],"names":["Map","state","activeViewIndex","view","type","props","diagramLeg","mapConfig","showDiagram","views","map","i","visibility","getComponentForView","length","position","bottom","left","zIndex","padding","setState","text","Component","mapStateToProps","ownProps","otp","ui","config"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;IAEMA,G;;;AACJ,iBAAe;AAAA;;AAAA;;AAEb,UAAKC,KAAL,GAAa;AACXC,uBAAiB;AADN,KAAb;AAFa;AAKd;;;;wCAEoBC,I,EAAM;AACzB;AACA,cAAQA,KAAKC,IAAb;AACE,aAAK,SAAL;AAAgB,iBAAO,8BAAC,oBAAD,OAAP;AAChB,aAAK,UAAL;AAAiB,iBAAO,8BAAC,qBAAD,OAAP;AAFnB;AAID;;;6BAES;AAAA;;AAAA,mBAC0B,KAAKC,KAD/B;AAAA,UACAC,UADA,UACAA,UADA;AAAA,UACYC,SADZ,UACYA,SADZ;;;AAGR,UAAMC,cAAcF,UAApB;;AAEA;AACA,UAAMG,QAAQF,UAAUE,KAAV,IAAmB,CAAC,EAAEL,MAAM,SAAR,EAAD,CAAjC;;AAEA,aACE;AAAA;AAAA,UAAK,WAAU,eAAf;AAEGK,cAAMC,GAAN,CAAU,UAACP,IAAD,EAAOQ,CAAP,EAAa;AACtB,iBACE;AAAA;AAAA,cAAK,KAAKA,CAAV;AACE,yBAAU,eADZ;AAEE,qBAAO,EAAEC,YAAYD,MAAM,OAAKV,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C,QAA7D;AAFT;AAIG,mBAAKW,mBAAL,CAAyBV,IAAzB;AAJH,WADF;AAQD,SATA,CAFH;AAcGM,cAAMK,MAAN,GAAe,CAAf,IACC;AAAA;AAAA,YAAK,OAAO,EAAEC,UAAU,UAAZ,EAAwBC,QAAQ,MAAMR,cAAc,GAAd,GAAoB,CAA1B,CAAhC,EAA8DS,MAAM,EAApE,EAAwEC,QAAQ,MAAhF,EAAZ;AACE;AAAC,uCAAD;AAAA;AACGT,kBAAMC,GAAN,CAAU,UAACP,IAAD,EAAOQ,CAAP,EAAa;AACtB,qBACE;AAAC,sCAAD;AAAA;AACE,uBAAKA,CADP;AAEE,0BAAO,QAFT;AAGE,2BAASA,MAAM,OAAKV,KAAL,CAAWC,eAAjB,GAAmC,SAAnC,GAA+C,SAH1D;AAIE,yBAAO,EAAEiB,SAAS,SAAX,EAJT;AAKE,2BAAS,mBAAM;AAAE,2BAAKC,QAAL,CAAc,EAAElB,iBAAiBS,CAAnB,EAAd;AAAuC;AAL1D;AAOGR,qBAAKkB,IAAL,IAAalB,KAAKC;AAPrB,eADF;AAWD,aAZA;AADH;AADF,SAfJ;AAmCGI,uBAAe,8BAAC,oBAAD,IAAY,KAAKF,UAAjB;AAnClB,OADF;AAuCD;;;EA/DegB,gB;;AAkElB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACtB,KAAD,EAAQuB,QAAR,EAAqB;AAC3C,SAAO;AACLlB,gBAAYL,MAAMwB,GAAN,CAAUC,EAAV,CAAapB,UADpB;AAELC,eAAWN,MAAMwB,GAAN,CAAUE,MAAV,CAAiBjB;AAFvB,GAAP;AAID,CALD;;kBAOe,yBAAQa,eAAR,EAAyBvB,GAAzB,C","file":"map.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { ButtonGroup, Button } from 'react-bootstrap'\n\nimport DefaultMap from './default-map'\nimport LegDiagram from './leg-diagram'\nimport StylizedMap from './stylized-map'\n\nclass Map extends Component {\n  constructor () {\n    super()\n    this.state = {\n      activeViewIndex: 0\n    }\n  }\n\n  getComponentForView (view) {\n    // TODO: allow a 'CUSTOM' type\n    switch (view.type) {\n      case 'DEFAULT': return <DefaultMap />\n      case 'STYLIZED': return <StylizedMap />\n    }\n  }\n\n  render () {\n    const { diagramLeg, mapConfig } = this.props\n\n    const showDiagram = diagramLeg\n\n    // Use the views defined in the config; if none defined, just show the default map\n    const views = mapConfig.views || [{ type: 'DEFAULT' }]\n\n    return (\n      <div className='map-container'>\n        {/* The map views -- only one is visible at a time */}\n        {views.map((view, i) => {\n          return (\n            <div key={i}\n              className='map-container'\n              style={{ visibility: i === this.state.activeViewIndex ? 'visible' : 'hidden' }}\n            >\n              {this.getComponentForView(view)}\n            </div>\n          )\n        })}\n\n        {/* The toggle buttons -- only show if multiple views */}\n        {views.length > 1 && (\n          <div style={{ position: 'absolute', bottom: 12 + (showDiagram ? 192 : 0), left: 12, zIndex: 100000 }}>\n            <ButtonGroup>\n              {views.map((view, i) => {\n                return (\n                  <Button\n                    key={i}\n                    bsSize='xsmall'\n                    bsStyle={i === this.state.activeViewIndex ? 'success' : 'default'}\n                    style={{ padding: '3px 6px' }}\n                    onClick={() => { this.setState({ activeViewIndex: i }) }}\n                  >\n                    {view.text || view.type}\n                  </Button>\n                )\n              })}\n            </ButtonGroup>\n          </div>\n        )}\n\n        {/* The leg diagram overlay, if active */}\n        {showDiagram && <LegDiagram leg={diagramLeg} />}\n      </div>\n    )\n  }\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramLeg: state.otp.ui.diagramLeg,\n    mapConfig: state.otp.config.map\n  }\n}\n\nexport default connect(mapStateToProps)(Map)\n"]}