{"version":3,"sources":["itinerary-legs.js"],"names":["ItineraryLegs","_onLegClick","e","index","layer","feature","geometry","leg","props","itinerary","legs","activeLeg","setActiveLeg","map","geojson","polyline","toGeoJSON","legGeometry","points","active","color","mode","Math","random","Component","propTypes","PropTypes","object","number","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;IAEqBA,a;;;;;;;;;;;;;;0NAMnBC,W,GAAc,UAACC,CAAD,EAAO;AACnB,UAAMC,QAAQD,EAAEE,KAAF,CAAQC,OAAR,CAAgBC,QAAhB,CAAyBH,KAAvC;AACA,UAAMI,MAAM,MAAKC,KAAL,CAAWC,SAAX,CAAqBC,IAArB,CAA0BP,KAA1B,CAAZ;AACA,UAAIA,UAAU,MAAKK,KAAL,CAAWG,SAAzB,EAAoC;AAClC,cAAKH,KAAL,CAAWI,YAAX,CAAwB,IAAxB;AACD,OAFD,MAEO;AACL,cAAKJ,KAAL,CAAWI,YAAX,CAAwBT,KAAxB,EAA+BI,GAA/B;AACD;AACF,K;;;;;6BACS;AAAA;;AAAA,mBACyB,KAAKC,KAD9B;AAAA,UACAC,SADA,UACAA,SADA;AAAA,UACWE,SADX,UACWA,SADX;;AAER,aACE;AAAC,kCAAD;AAAA;AACGF,kBAAUC,IAAV,CAAeG,GAAf,CAAmB,UAACN,GAAD,EAAMJ,KAAN,EAAgB;AAClC,cAAMW,UAAUC,mBAASC,SAAT,CAAmBT,IAAIU,WAAJ,CAAgBC,MAAnC,CAAhB;AACAJ,kBAAQX,KAAR,GAAgBA,KAAhB;AACA,cAAMgB,SAASR,cAAcR,KAA7B;AACA,cAAMiB,QAAQD,SACV,QADU,GAEV,0BAAUZ,IAAIc,IAAd,IACA,MADA,GAEA,OAJJ;AAKA,iBACE,8BAAC,qBAAD;AACE,iBAAKC,KAAKC,MAAL,EADP;AAEE,mBAAOH,KAFT;AAGE,qBAAS,OAAKnB,WAHhB;AAIE,kBAAMa,OAJR,GADF;AAOD,SAhBA;AADH,OADF;AAqBD;;;EAtCwCU,gB,UAClCC,S,GAAY;AACjBhB,aAAWiB,iBAAUC,MADJ;AAEjBhB,aAAWe,iBAAUE,MAFJ;AAGjBhB,gBAAcc,iBAAUG;AAHP,C;kBADA7B,a","file":"itinerary-legs.js","sourcesContent":["import React, {Component, PropTypes} from 'react'\nimport { FeatureGroup, GeoJSON } from 'react-leaflet'\nimport polyline from '@mapbox/polyline'\n\nimport { isTransit } from '../../util/itinerary'\n\nexport default class ItineraryLegs extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object,\n    activeLeg: PropTypes.number,\n    setActiveLeg: PropTypes.func\n  }\n  _onLegClick = (e) => {\n    const index = e.layer.feature.geometry.index\n    const leg = this.props.itinerary.legs[index]\n    if (index === this.props.activeLeg) {\n      this.props.setActiveLeg(null)\n    } else {\n      this.props.setActiveLeg(index, leg)\n    }\n  }\n  render () {\n    const { itinerary, activeLeg } = this.props\n    return (\n      <FeatureGroup>\n        {itinerary.legs.map((leg, index) => {\n          const geojson = polyline.toGeoJSON(leg.legGeometry.points)\n          geojson.index = index\n          const active = activeLeg === index\n          const color = active\n            ? 'yellow'\n            : isTransit(leg.mode)\n            ? 'blue'\n            : 'black'\n          return (\n            <GeoJSON\n              key={Math.random()}\n              color={color}\n              onClick={this._onLegClick}\n              data={geojson} />\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n"]}