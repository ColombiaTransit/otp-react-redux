{"version":3,"sources":["leg-diagram.js"],"names":["METERS_TO_FEET","LegDiagram","props","_onMouseMove","evt","m","clientX","container","getBoundingClientRect","left","scrollLeft","setElevationPoint","state","xAxisCompression","_onMouseLeave","_onCloseButtonClick","showLegDiagram","useImperialUnits","elev","Math","round","elevationPoint","unitConversion","leg","yAxisPanelSvgContent","backgroundSvgContent","mainSvgContent","foregroundSvgContent","minElev","maxElev","traversed","steps","forEach","step","distance","elevation","length","i","second","height","yAxisPanelWidth","lineY","topElevYPx","bottomElevYPx","elevHeight","width","rangeUnit","minDisplayed","floor","maxDisplayed","ceil","displayedRange","y","push","_formatElevation","currentX","ptArr","map","stepIndex","stepWidthPx","elevPair","x","first","compressStreetName","streetName","pts","pt","join","Component","propTypes","PropTypes","number","func","name","split","str","mapStateToProps","ownProps","otp","ui","mapDispatchToProps"],"mappings":"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","file":"leg-diagram.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { setElevationPoint, showLegDiagram } from '../../actions/map'\nimport { legElevationAtDistance } from '../../util/itinerary'\n\nconst METERS_TO_FEET = 3.28084\n\nclass LegDiagram extends Component {\n  static propTypes = {\n    elevationPoint: PropTypes.number,\n    showLegDiagram: PropTypes.func,\n    setElevationPoint: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      useImperialUnits: true,\n      xAxisCompression: 0.5\n    }\n  }\n\n  _onMouseMove = (evt) => {\n    const m = evt.clientX - this.container.getBoundingClientRect().left + this.container.scrollLeft\n    this.props.setElevationPoint(m / this.state.xAxisCompression)\n  }\n\n  _onMouseLeave = () => {\n    this.props.setElevationPoint(null)\n  }\n\n  _onCloseButtonClick = () => {\n    this.props.showLegDiagram(null)\n    this.props.setElevationPoint(null)\n  }\n\n  _formatElevation (elev) {\n    return Math.round(elev * 10) / 10 + (this.state.useImperialUnits ? `'` : 'm')\n  }\n\n  render () {\n    const { elevationPoint } = this.props\n    const { useImperialUnits, xAxisCompression } = this.state\n    const unitConversion = useImperialUnits ? METERS_TO_FEET : 1\n\n    const { leg } = this.props\n    if (!leg) return null\n\n    const yAxisPanelSvgContent = []\n\n    const backgroundSvgContent = []\n    const mainSvgContent = []\n    const foregroundSvgContent = []\n\n    // Do an initial iteration through all steps to determine the min/max elevation\n    let minElev = 100000\n    let maxElev = -100000\n    let traversed = 0\n    leg.steps.forEach(step => {\n      traversed += step.distance\n      if (!step.elevation || step.elevation.length === 0) return\n      for (let i = 0; i < step.elevation.length; i++) {\n        const elev = step.elevation[i].second * unitConversion\n        if (elev < minElev) minElev = elev\n        if (elev > maxElev) maxElev = elev\n      }\n    })\n\n    const height = 160\n    const yAxisPanelWidth = 40\n    const lineY = height - 20\n    const topElevYPx = 20\n    const bottomElevYPx = height - 40\n    const elevHeight = bottomElevYPx - topElevYPx\n    const width = traversed * xAxisCompression\n    const rangeUnit = useImperialUnits ? 100 : 50\n\n    // Compute the displayed elevation range and draw the y-axis labels & guidelines\n    const minDisplayed = Math.floor(minElev / rangeUnit) * rangeUnit\n    const maxDisplayed = Math.ceil(maxElev / rangeUnit) * rangeUnit\n    const displayedRange = maxDisplayed - minDisplayed\n\n    for (let elev = minDisplayed; elev <= maxDisplayed; elev += rangeUnit) {\n      const y = topElevYPx + elevHeight - elevHeight * (elev - minDisplayed) / displayedRange\n      yAxisPanelSvgContent.push(\n        <text\n          key={`axis-label-${elev}`}\n          x={yAxisPanelWidth - 3}\n          y={y + 3}\n          fontSize={11}\n          textAnchor='end'\n        >\n          {this._formatElevation(elev)}\n        </text>\n      )\n      backgroundSvgContent.push(\n        <line\n          key={`axis-guideline-${elev}`}\n          x1={0}\n          y1={y}\n          x2={width}\n          y2={y}\n          strokeWidth={1}\n          stroke='#ccc'\n          strokeDasharray='1, 1'\n        />\n      )\n    }\n\n    // Process each step in this leg\n    let currentX = 0\n    const ptArr = []\n    leg.steps.map((step, stepIndex) => {\n      const stepWidthPx = step.distance * xAxisCompression\n\n      // Add this step to the polyline coords\n      if (step.elevation && step.elevation.length > 0) {\n        for (let i = 0; i < step.elevation.length; i++) {\n          const elevPair = step.elevation[i]\n          const x = currentX + elevPair.first * xAxisCompression\n          const y = topElevYPx + elevHeight - elevHeight * (elevPair.second * unitConversion - minDisplayed) / displayedRange\n          ptArr.push([x, y])\n        }\n      }\n\n      // Add the street segment as a horizontal line at the bottom of the diagram\n      mainSvgContent.push(\n        <line\n          key={`step-${stepIndex}-line`}\n          x1={currentX + 1}\n          y1={lineY}\n          x2={currentX + stepWidthPx - 1}\n          y2={lineY}\n          strokeWidth={6}\n          stroke='#aaa'\n        />\n      )\n\n      // Add The street name label, including clipping path to prevent overflow\n      if (stepWidthPx > 100) {\n        mainSvgContent.push(\n          <g key={`step-${stepIndex}-label`}>\n            <clipPath id={`clip-${stepIndex}`}>\n              <rect x={currentX + 10} y={0} width={stepWidthPx - 10} height={200} />\n            </clipPath>\n            <text\n              x={currentX + stepWidthPx / 2}\n              y={lineY + 16}\n              fontSize={11}\n              clipPath={`url(#clip-${stepIndex})`}\n              textAnchor='middle'\n            >\n              {compressStreetName(step.streetName)}\n            </text>\n          </g>\n        )\n      }\n      currentX += stepWidthPx\n    })\n\n    // Construct and add the main elevation contour line\n    const pts = ptArr.map(pt => `${pt[0]},${pt[1]}`).join(' ')\n    mainSvgContent.push(\n      <polyline\n        key='elev-polyline'\n        points={pts}\n        strokeWidth={2}\n        stroke='#000'\n        fill='none'\n      />\n    )\n\n    // Add the highlighted elevation point, if active\n    if (elevationPoint) {\n      const elev = legElevationAtDistance(leg, elevationPoint) * unitConversion\n      const x = elevationPoint * xAxisCompression\n      const y = topElevYPx + elevHeight - elevHeight * (elev - minDisplayed) / displayedRange\n      backgroundSvgContent.push(\n        <line\n          key='elev-point-line'\n          x1={x}\n          y1={y}\n          x2={x}\n          y2={lineY}\n          strokeWidth={1}\n          stroke='#aaa'\n        />\n      )\n      foregroundSvgContent.push(\n        <circle\n          key='elev-point-circle'\n          cx={x}\n          cy={y}\n          r='4'\n          fill='blue'\n          stroke='white'\n          strokeWidth='2'\n        />\n      )\n\n      // Add the current elevation text label\n      foregroundSvgContent.push(\n        <text key='elev-point-label' x={x} y={y - 10} fontSize={11} textAnchor='middle'>\n          {this._formatElevation(elev)}\n        </text>\n      )\n    }\n\n    return (\n      <div className='leg-diagram'>\n        {/* The y-axis labels, which are fixed to the left side */}\n        <div className='y-axis-panel' style={{ width: yAxisPanelWidth }}>\n          <svg>\n            {yAxisPanelSvgContent}\n          </svg>\n        </div>\n\n        {/* The main, scrollable diagram */}\n        <div\n          ref={(container) => { this.container = container }}\n          onMouseMove={this._onMouseMove}\n          onMouseLeave={this._onMouseLeave}\n          className='main-diagram'\n          style={{ left: 40 }}\n        >\n          <svg height={height} width={width + 10}>\n            {backgroundSvgContent}\n            {mainSvgContent}\n            {foregroundSvgContent}\n          </svg>\n        </div>\n\n        {/* The close button */}\n        <Button\n          className='close-button clear-button-formatting'\n          onClick={this._onCloseButtonClick}\n        >\n          <i className='fa fa-close' />\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction compressStreetName (name) {\n  return name.split(' ').map(str => {\n    if (str === 'Northwest') return 'NW'\n    if (str === 'Northeast') return 'NE'\n    if (str === 'Southwest') return 'SW'\n    if (str === 'Southeast') return 'SE'\n    if (str === 'North') return 'N'\n    if (str === 'East') return 'E'\n    if (str === 'South') return 'S'\n    if (str === 'West') return 'W'\n    if (str === 'Street') return 'St'\n    if (str === 'Avenue') return 'Ave'\n    if (str === 'Road') return 'Rd'\n    if (str === 'Drive') return 'Dr'\n    if (str === 'Boulevard') return 'Blvd'\n    return str\n  }).join(' ')\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    elevationPoint: state.otp.ui.elevationPoint\n  }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram,\n  setElevationPoint\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagram)\n"]}