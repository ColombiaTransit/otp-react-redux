{"version":3,"sources":["leg-diagram.js"],"names":["height","yAxisPanelWidth","BASELINE_Y","topElevYPx","bottomElevYPx","elevHeight","METERS_TO_FEET","LegDiagram","props","_determineCompressionFactor","width","leg","_getElevationProfile","traversed","xAxisCompression","setState","_onResize","_onMouseMove","evt","m","clientX","container","getBoundingClientRect","left","scrollLeft","setElevationPoint","state","_onMouseLeave","_onCloseButtonClick","showLegDiagram","_unitConversion","useImperialUnits","steps","nextProps","startTime","elev","Math","round","elevationPoint","yAxisPanelSvgContent","backgroundSvgContent","mainSvgContent","foregroundSvgContent","minElev","maxElev","points","SVG_WIDTH","range","rangeUnit","minDisplayed","floor","maxDisplayed","ceil","displayedRange","y","push","_formatElevation","currentX","ptArr","stepArr","stepDetails","previousPair","map","step","stepIndex","stepWidthPx","distance","gain","loss","elevation","length","i","elevPair","diff","second","x","first","console","warn","unshift","pts","pt","join","elevConverted","beginStep","stepWidth","name","compressStreetName","streetName","fontSize","midPoint","anchor","halfLabelWidth","Component","propTypes","PropTypes","number","func","split","str","mapStateToProps","ownProps","otp","ui","mapDispatchToProps"],"mappings":"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","file":"leg-diagram.js","sourcesContent":["import memoize from 'lodash.memoize'\nimport React, {PropTypes, Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { setElevationPoint, showLegDiagram } from '../../actions/map'\nimport { getElevationProfile, getTextWidth, legElevationAtDistance } from '../../util/itinerary'\n\n// Fixed dimensions for chart\nconst height = 160\nconst yAxisPanelWidth = 40 // width of y axis labels\nconst BASELINE_Y = height - 20\nconst topElevYPx = 20\nconst bottomElevYPx = height - 40\nconst elevHeight = bottomElevYPx - topElevYPx\n\nconst METERS_TO_FEET = 3.28084\n\nclass LegDiagram extends Component {\n  static propTypes = {\n    elevationPoint: PropTypes.number,\n    showLegDiagram: PropTypes.func,\n    setElevationPoint: PropTypes.func\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      useImperialUnits: true,\n      xAxisCompression: 0.5\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { leg } = nextProps\n    if (leg && this.props.leg && leg.startTime !== this.props.leg.startTime) {\n      this._determineCompressionFactor(this.state.width, leg)\n    }\n  }\n\n  _determineCompressionFactor = (width, leg) => {\n    const { traversed } = this._getElevationProfile(leg)\n    if (traversed > 0) {\n      // Determine the appropriate compression factor to scale the elevation\n      // chart to fit the container width (i.e., remove the need for x-scrolling).\n      const xAxisCompression = width / (traversed + yAxisPanelWidth)\n      this.setState({ xAxisCompression, width })\n    }\n  }\n\n  _onResize = (width, height) => {\n    this._determineCompressionFactor(width, this.props.leg)\n  }\n\n  /** Set mouse hover location for drawing elevation point. */\n  _onMouseMove = (evt) => {\n    const m = evt.clientX - this.container.getBoundingClientRect().left + this.container.scrollLeft\n    this.props.setElevationPoint(m / this.state.xAxisCompression)\n  }\n\n  _onMouseLeave = () => {\n    this.props.setElevationPoint(null)\n  }\n\n  _onCloseButtonClick = () => {\n    this.props.showLegDiagram(null)\n    this.props.setElevationPoint(null)\n  }\n\n  _unitConversion = () => this.state.useImperialUnits ? METERS_TO_FEET : 1\n\n  /** Round elevation to whole number and add symbol. */\n  _formatElevation (elev) {\n    return Math.round(elev) + (this.state.useImperialUnits ? `'` : 'm')\n  }\n\n  _getElevationProfile = memoize((leg) => {\n    if (!leg) return {}\n    return getElevationProfile(leg.steps, this._unitConversion())\n  })\n\n  render () {\n    const { elevationPoint } = this.props\n    const { xAxisCompression } = this.state\n\n    const { leg } = this.props\n    if (!leg) return null\n\n    const yAxisPanelSvgContent = []\n\n    const backgroundSvgContent = []\n    const mainSvgContent = []\n    const foregroundSvgContent = []\n\n    const { minElev, maxElev, points, traversed } = this._getElevationProfile(leg)\n\n    const SVG_WIDTH = traversed * xAxisCompression\n    const range = maxElev - minElev\n    const rangeUnit = range >= 500\n      ? 100\n      : 50\n\n    // Compute the displayed elevation range\n    const minDisplayed = Math.floor(minElev / rangeUnit) * rangeUnit\n    const maxDisplayed = Math.ceil(maxElev / rangeUnit) * rangeUnit\n    const displayedRange = maxDisplayed - minDisplayed\n\n    // Draw the y-axis labels & guidelines\n    for (let elev = minDisplayed; elev <= maxDisplayed; elev += rangeUnit) {\n      const y = topElevYPx + elevHeight - elevHeight * (elev - minDisplayed) / displayedRange\n      yAxisPanelSvgContent.push(\n        <text\n          key={`axis-label-${elev}`}\n          x={yAxisPanelWidth - 3}\n          y={y + 3}\n          fontSize={11}\n          textAnchor='end'\n        >\n          {this._formatElevation(elev)}\n        </text>\n      )\n      backgroundSvgContent.push(\n        <line\n          key={`axis-guideline-${elev}`}\n          x1={0}\n          y1={y}\n          x2={SVG_WIDTH}\n          y2={y}\n          strokeWidth={1}\n          stroke='#ccc'\n          strokeDasharray='1, 1'\n        />\n      )\n    }\n\n    // Process each step in this leg\n    let currentX = 0\n    const ptArr = []\n    const stepArr = [currentX]\n    const stepDetails = []\n    let previousPair\n    leg.steps.map((step, stepIndex) => {\n      const stepWidthPx = step.distance * xAxisCompression\n      let gain = 0\n      let loss = 0\n      // Add this step to the polyline coords\n      if (step.elevation && step.elevation.length > 0) {\n        for (let i = 0; i < step.elevation.length; i++) {\n          const elevPair = step.elevation[i]\n          if (previousPair) {\n            const diff = (elevPair.second - previousPair.second) * this._unitConversion()\n            if (diff > 0) gain += diff\n            else loss += diff\n          }\n          const x = currentX + elevPair.first * xAxisCompression // - firstX\n          const y = topElevYPx + elevHeight - elevHeight * (elevPair.second * this._unitConversion() - minDisplayed) / displayedRange\n          ptArr.push([x, y])\n          previousPair = elevPair\n        }\n      }\n\n      // Add the street segment as a horizontal line at the bottom of the diagram\n      mainSvgContent.push(\n        <line\n          key={`step-${stepIndex}-line`}\n          x1={currentX + 1}\n          y1={BASELINE_Y}\n          x2={currentX + stepWidthPx - 1}\n          y2={BASELINE_Y}\n          strokeWidth={6}\n          stroke='#aaa'\n        />\n      )\n      // Add The street name label, including clipping path to prevent overflow\n      if (stepWidthPx > 30) {\n        mainSvgContent.push(\n          <g key={`step-${stepIndex}-label`}>\n            <clipPath id={`clip-${stepIndex}`}>\n              <rect x={currentX + 10} y={0} width={stepWidthPx - 10} height={200} />\n            </clipPath>\n            <text\n              x={currentX + stepWidthPx / 2}\n              y={BASELINE_Y + 16}\n              fontSize={11}\n              textAnchor='middle'\n            >\n              {// FIXME: bug where gain is shown for a single step even though\n                // the elevation gain actually begins accumulating with a different step\n              }\n              {gain >= 10 && <tspan fill='red'>↑{this._formatElevation(gain)}{'  '}</tspan>}\n              {loss <= -10 && <tspan fill='green'>↓{this._formatElevation(-loss)}</tspan>}\n            </text>\n          </g>\n        )\n      }\n      currentX += stepWidthPx\n      stepArr.push(currentX)\n      stepDetails.push({ gain, loss })\n    })\n    if (ptArr.length === 0) {\n      console.warn(`There is no elevation data to render for leg`, leg)\n      return null\n    }\n    // Add initial point if the first elevation entry does not start at zero\n    // distance.\n    if (ptArr[0][0] !== 0) ptArr.unshift([0, ptArr[0][1]])\n    // Add final points in order to round out area field.\n    ptArr.push([SVG_WIDTH, ptArr[ptArr.length - 1][1]])\n    ptArr.push([ptArr[ptArr.length - 1][0], BASELINE_Y])\n    ptArr.push([0, BASELINE_Y])\n    // Construct and add the main elevation contour area\n    const pts = ptArr.map((pt, i) => i === 0 ? `M${pt[0]} ${pt[1]}` : `L${pt[0]} ${pt[1]}`).join(' ')\n    mainSvgContent.unshift(\n      <path\n        key='elev-polyline'\n        d={`${pts} Z`}\n        strokeWidth={0}\n        fill='lightsteelblue'\n        fillOpacity={0.5}\n      />\n    )\n\n    // Add the highlighted elevation point (on mouse hover), if actively hovering.\n    if (elevationPoint) {\n      const elev = legElevationAtDistance(points, elevationPoint)\n      const elevConverted = elev * this._unitConversion()\n      const x = elevationPoint * xAxisCompression\n      for (var i = 0; i < stepArr.length; i++) {\n        if (x >= stepArr[i] && x <= stepArr[i + 1]) {\n          const beginStep = stepArr[i]\n          // Mouse hover is at step i, add hover fill for street step and draw\n          // street label\n          const stepWidth = stepArr[i + 1] - beginStep\n          backgroundSvgContent.push(\n            <rect\n              key={`step-hover-${i}`}\n              x={beginStep}\n              y={0}\n              width={stepWidth}\n              height={200}\n              fillOpacity={0.5}\n              fill='#eee' />\n          )\n          const name = compressStreetName(leg.steps[i].streetName)\n          const fontSize = 22\n          const midPoint = beginStep + stepWidth / 2\n          // Determine where to anchor hover street label text (to avoid\n          // clipping on edges of svg).\n          let anchor = 'middle'\n          let x = midPoint\n          const halfLabelWidth = getTextWidth(name) / 2\n          if (midPoint - halfLabelWidth < 0) {\n            // Anchor left edge of text to left of svg\n            anchor = 'start'\n            x = 0 + 3\n          } else if (midPoint + halfLabelWidth > SVG_WIDTH) {\n            // Anchor right edge of text to right of svg\n            anchor = 'end'\n            x = SVG_WIDTH - 3\n          }\n          backgroundSvgContent.push(\n            <text\n              key={`step-text-hover-${i}`}\n              x={x}\n              y={height / 2}\n              fontSize={fontSize}\n              textAnchor={anchor}\n              fill='#777'\n              opacity={0.6}\n            >\n              {name}\n            </text>\n          )\n        }\n      }\n      const y = elev !== null\n        ? topElevYPx + elevHeight - elevHeight * (elevConverted - minDisplayed) / displayedRange\n        : height / 2\n      backgroundSvgContent.push(\n        <line\n          key='elev-point-line'\n          x1={x}\n          y1={elev !== null ? y : topElevYPx}\n          x2={x}\n          y2={BASELINE_Y}\n          strokeWidth={1}\n          stroke='#aaa'\n        />\n      )\n      // Only add the current elevation indicator and label if there is a data\n      // point available.\n      if (elev !== null) {\n        foregroundSvgContent.push(\n          <circle\n            key='elev-point-circle'\n            cx={x}\n            cy={y}\n            r='4'\n            fill='#084c8d'\n            stroke='white'\n            strokeWidth='0'\n          />\n        )\n        // Add the current elevation text label\n        foregroundSvgContent.push(\n          <text\n            key='elev-point-label'\n            x={x}\n            y={y - 10}\n            fontSize={11}\n            textAnchor='middle'>\n            {this._formatElevation(elevConverted)}\n          </text>\n        )\n      }\n    }\n    return (\n      <div className='leg-diagram'>\n        {/* The y-axis labels, which are fixed to the left side */}\n        <div className='y-axis-panel' style={{ width: yAxisPanelWidth }}>\n          <svg>\n            {yAxisPanelSvgContent}\n          </svg>\n        </div>\n\n        {/* The main, scrollable diagram */}\n        <div\n          ref={(container) => { this.container = container }}\n          onMouseMove={this._onMouseMove}\n          onMouseLeave={this._onMouseLeave}\n          className='main-diagram'\n          style={{ left: 40 }}\n        >\n          <svg height={height} width={SVG_WIDTH + 10}>\n            {backgroundSvgContent}\n            {mainSvgContent}\n            {foregroundSvgContent}\n          </svg>\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n\n        {/* The close button */}\n        <Button\n          className='close-button clear-button-formatting'\n          onClick={this._onCloseButtonClick}\n        >\n          <i className='fa fa-close' />\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction compressStreetName (name) {\n  return name.split(' ').map(str => {\n    if (str === 'Northwest') return 'NW'\n    if (str === 'Northeast') return 'NE'\n    if (str === 'Southwest') return 'SW'\n    if (str === 'Southeast') return 'SE'\n    if (str === 'North') return 'N'\n    if (str === 'East') return 'E'\n    if (str === 'South') return 'S'\n    if (str === 'West') return 'W'\n    if (str === 'Street') return 'St'\n    if (str === 'Avenue') return 'Ave'\n    if (str === 'Road') return 'Rd'\n    if (str === 'Drive') return 'Dr'\n    if (str === 'Boulevard') return 'Blvd'\n    return str\n  }).join(' ')\n}\n\n// Connect to Redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    elevationPoint: state.otp.ui.elevationPoint\n  }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram,\n  setElevationPoint\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagram)\n"]}