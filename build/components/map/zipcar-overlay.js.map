{"version":3,"sources":["zipcar-overlay.js"],"names":["zipcarIcon","ZipcarOverlay","props","zipcarLocationsQuery","api","_refreshTimer","setInterval","clearInterval","visible","_startRefreshing","_stopRefreshing","nextProps","locations","length","markerIcon","iconSize","popupAnchor","html","className","bulletIconStyle","color","fontSize","width","map","location","location_id","coordinates","lat","lng","display_name","num_vehicles","context","lon","name","setLocation","MapLayer","propTypes","PropTypes","string","array","func","mapStateToProps","state","ownProps","otp","overlay","zipcar","mapDispatchToProps"],"mappings":"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","file":"zipcar-overlay.js","sourcesContent":["import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\nimport { zipcarLocationsQuery } from '../../actions/zipcar'\n\nconst zipcarIcon = '<svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 120.09 120.1\"><defs><style>.cls-1{fill:#59ad46;}.cls-2{fill:#fff;}.cls-3{fill:#5c5d5f;}</style></defs><title>zipcar-icon</title><path class=\"cls-1\" d=\"M246.37,396.78a60,60,0,1,1,60,60,60.05,60.05,0,0,1-60-60\" transform=\"translate(-246.37 -336.74)\"/><path class=\"cls-2\" d=\"M363.6,418.66q0.47-1.28.9-2.58H314.16l2.46-3.15h34.87a1.27,1.27,0,1,0,0-2.53H318.6l2.42-3.09h17.74a1.31,1.31,0,0,0,0-2.58H291.69l28.85-37.59H273.06v10.27h25.28l-26.48,34.34-5.45,6.9h21a12,12,0,0,1,22.29,0H363.6\" transform=\"translate(-246.37 -336.74)\"/><path class=\"cls-3\" d=\"M307.84,423.3a9.27,9.27,0,1,1-9.27-9.27,9.27,9.27,0,0,1,9.27,9.27\" transform=\"translate(-246.37 -336.74)\"/></svg>'\n\nclass ZipcarOverlay extends MapLayer {\n  static propTypes = {\n    api: PropTypes.string,\n    locations: PropTypes.array,\n    zipcarLocationsQuery: PropTypes.func,\n    setLocation: PropTypes.func\n  }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.zipcarLocationsQuery(this.props.api)\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.zipcarLocationsQuery(this.props.api)\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    if (this.props.visible) this._startRefreshing()\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing()\n    } else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { locations } = this.props\n    if (!locations || locations.length === 0) return <FeatureGroup />\n\n\n    const markerIcon = divIcon({\n      iconSize: [24, 24],\n      popupAnchor: [0, -12],\n      html: zipcarIcon,\n      className: ''\n    })\n\n    const bulletIconStyle = {\n      color: 'gray',\n      fontSize: 12,\n      width: 15\n    }\n\n    return (\n      <FeatureGroup>\n        {locations.map((location) => {\n          return (\n            <Marker\n              icon={markerIcon}\n              key={location.location_id}\n              position={[location.coordinates.lat, location.coordinates.lng]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    Zipcar Location\n                  </div>\n\n                  {/* Location info bullet */}\n                  <div className='popup-row'>\n                    <i className='fa fa-map-marker' style={bulletIconStyle} /> {location.display_name}\n                  </div>\n\n                  {/* Vehicle-count bullet */}\n                  <div className='popup-row'>\n                    <i className='fa fa-car' style={bulletIconStyle} /> {location.num_vehicles} Vehicles\n                  </div>\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: location.coordinates.lat,\n                        lon: location.coordinates.lng,\n                        name: location.display_name\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    locations: state.otp.overlay.zipcar && state.otp.overlay.zipcar.locations\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation,\n  zipcarLocationsQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ZipcarOverlay)\n"]}