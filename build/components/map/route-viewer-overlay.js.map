{"version":3,"sources":["route-viewer-overlay.js"],"names":["RouteViewerOverlay","nextProps","isGeomComplete","routeData","patterns","reduce","acc","ptn","geometry","props","allPoints","concat","polyline","decode","points","context","map","fitBounds","routeColor","color","segments","forEach","pattern","pts","push","id","length","MapLayer","propTypes","mapStateToProps","state","ownProps","viewedRoute","otp","ui","transitIndex","routes","routeId","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AAEA;;;;;;IAEMA,kB;;;;;;;;;;wCAGiB,CAAE;;AAEvB;;;;2CACwB,CAAE;;;8CAECC,S,EAAW;AACpC;AACA,UAAMC,iBAAiB,SAAjBA,cAAiB,YAAa;AAClC,eACEC,aACAA,UAAUC,QADV,IAEA,sBAAcD,UAAUC,QAAxB,EAAkCC,MAAlC,CACE,UAACC,GAAD,EAAMC,GAAN;AAAA,iBAAcD,OAAO,OAAOC,IAAIC,QAAX,KAAwB,WAA7C;AAAA,SADF,EAEE,IAFF,CAHF;AAQD,OATD;;AAWA;AACA,UACE,CAACN,eAAe,KAAKO,KAAL,CAAWN,SAA1B,CAAD,IACAD,eAAeD,UAAUE,SAAzB,CAFF,EAGE;AACA,YAAMO,YAAY,sBAAcT,UAAUE,SAAV,CAAoBC,QAAlC,EAA4CC,MAA5C,CAChB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACZ,iBAAOD,IAAIK,MAAJ,CAAWC,mBAASC,MAAT,CAAgBN,IAAIC,QAAJ,CAAaM,MAA7B,CAAX,CAAP;AACD,SAHe,EAIhB,EAJgB,CAAlB;AAMA,aAAKC,OAAL,CAAaC,GAAb,CAAiBC,SAAjB,CAA2BP,SAA3B;AACD;AACF;;;2CAEuB,CAAE;;;2CAEF,CAAE;;;6BAEhB;AAAA,UACAP,SADA,GACc,KAAKM,KADnB,CACAN,SADA;;;AAGR,UAAI,CAACA,SAAD,IAAc,CAACA,UAAUC,QAA7B,EAAuC,OAAO,8BAAC,0BAAD,OAAP;;AAEvC,UAAMc,aAAaf,UAAUgB,KAAV,SAAsBhB,UAAUgB,KAAhC,GAA0C,SAA7D;AACA,UAAMC,WAAW,EAAjB;AACA,4BAAcjB,UAAUC,QAAxB,EAAkCiB,OAAlC,CAA0C,mBAAW;AACnD,YAAI,CAACC,QAAQd,QAAb,EAAuB;AACvB,YAAMe,MAAMX,mBAASC,MAAT,CAAgBS,QAAQd,QAAR,CAAiBM,MAAjC,CAAZ;AACAM,iBAASI,IAAT,CACE,8BAAC,sBAAD;AACE,qBAAWD,GADb;AAEE,kBAAQ,CAFV;AAGE,iBAAOL,UAHT;AAIE,mBAAS,CAJX;AAKE,eAAKI,QAAQG;AALf,UADF;AASD,OAZD;;AAcA,aAAOL,SAASM,MAAT,GAAkB,CAAlB,GACH;AAAC,kCAAD;AAAA;AAAc;AAAA;AAAA;AAAMN;AAAN;AAAd,OADG,GAEH,8BAAC,0BAAD,OAFJ;AAGD;;;EAhE8BO,sB,UACxBC,S,GAAY,E;;AAkErB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,cAAcF,MAAMG,GAAN,CAAUC,EAAV,CAAaF,WAAjC;AACA,SAAO;AACLA,4BADK;AAEL7B,eAAW6B,cACPF,MAAMG,GAAN,CAAUE,YAAV,CAAuBC,MAAvB,CAA8BJ,YAAYK,OAA1C,CADO,GAEP;AAJC,GAAP;AAMD,CARD;;AAUA,IAAMC,qBAAqB,EAA3B;;kBAEe,yBAAQT,eAAR,EAAyBS,kBAAzB,EAA6CtC,kBAA7C,C","file":"route-viewer-overlay.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Polyline } from 'react-leaflet'\n\nimport polyline from '@mapbox/polyline'\n\nclass RouteViewerOverlay extends MapLayer {\n  static propTypes = {}\n\n  componentDidMount () {}\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () {}\n\n  componentWillReceiveProps (nextProps) {\n    // helper fn to check if geometry has been populated for all patterns in route\n    const isGeomComplete = routeData => {\n      return (\n        routeData &&\n        routeData.patterns &&\n        Object.values(routeData.patterns).reduce(\n          (acc, ptn) => acc && typeof ptn.geometry !== 'undefined',\n          true\n        )\n      )\n    }\n\n    // if pattern geometry just finished populating, update the map points\n    if (\n      !isGeomComplete(this.props.routeData) &&\n      isGeomComplete(nextProps.routeData)\n    ) {\n      const allPoints = Object.values(nextProps.routeData.patterns).reduce(\n        (acc, ptn) => {\n          return acc.concat(polyline.decode(ptn.geometry.points))\n        },\n        []\n      )\n      this.context.map.fitBounds(allPoints)\n    }\n  }\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { routeData } = this.props\n\n    if (!routeData || !routeData.patterns) return <FeatureGroup />\n\n    const routeColor = routeData.color ? `#${routeData.color}` : '#00bfff'\n    const segments = []\n    Object.values(routeData.patterns).forEach(pattern => {\n      if (!pattern.geometry) return\n      const pts = polyline.decode(pattern.geometry.points)\n      segments.push(\n        <Polyline\n          positions={pts}\n          weight={4}\n          color={routeColor}\n          opacity={1}\n          key={pattern.id}\n        />\n      )\n    })\n\n    return segments.length > 0\n      ? <FeatureGroup><div>{segments}</div></FeatureGroup>\n      : <FeatureGroup />\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedRoute = state.otp.ui.viewedRoute\n  return {\n    viewedRoute,\n    routeData: viewedRoute\n      ? state.otp.transitIndex.routes[viewedRoute.routeId]\n      : null\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RouteViewerOverlay)\n"]}