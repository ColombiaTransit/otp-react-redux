{"version":3,"sources":["base-map.js"],"names":["L","Evented","addInitHook","_singleClickTimeout","on","_scheduleSingleClick","_cancelSingleClick","include","setTimeout","_clearSingleClickTimeout","bind","e","_fireSingleClick","options","singleClickTimeout","originalEvent","_stopped","fire","Util","extend","type","clearTimeout","BaseMap","props","overlayVisibility","React","Children","toArray","children","forEach","child","name","visible","state","oldProps","newProps","popupLocation","map","refs","padding","oldItinBounds","itinerary","fromChanged","query","from","toChanged","to","newItinBounds","equals","leafletElement","fitBounds","activeLeg","legs","lat","lon","panTo","activeStep","leg","step","steps","_updateBounds","lmap","_onLeftClick","nextProps","overlaysConfig","config","overlays","mode","oldModes","split","newModes","removed","filter","includes","m","added","oConfig","modes","length","overlayMode","companies","overlayCompany","setState","eachLayer","layer","removeLayer","diagramLeg","elevationPoint","baseLayers","showElevationProfile","Boolean","elevationProfile","userControlledOverlays","fixedOverlays","childWithVisibility","cloneElement","push","center","initLat","initLon","elevationPointMarker","pos","initZoom","_onOverlayAdd","_onOverlayRemove","l","i","url","attribution","maxZoom","_popupClosed","width","fontSize","marginBottom","splice","join","margin","_onClickFrom","_onClickTo","Component","propTypes","PropTypes","object","mapClick","func","setLocation","toggleName","element","_setLocationFromPopup","setMapPopupLocation","location","reverseGeocode","onSetLocation","setMapPopupLocationAndGeocode","latlng","onClick","evt","_mapBoundsChanged","bounds","target","getBounds","mapState","updateMapState","mapStateToProps","ownProps","activeSearch","otp","ui","isFromSet","currentQuery","isToSet","mapPopupLocation","mapDispatchToProps"],"mappings":"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","file":"base-map.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport isEqual from 'lodash.isequal'\n\nimport { Map, TileLayer, LayersControl, Popup, CircleMarker } from 'react-leaflet'\n\nimport { setLocation, setMapPopupLocation, setMapPopupLocationAndGeocode } from '../../actions/map'\nimport LocationIcon from '../icons/location-icon'\nimport { constructLocation } from '../../util/map'\nimport { getActiveItinerary, getActiveSearch } from '../../util/state'\nimport { getItineraryBounds, getLegBounds, legLocationAtDistance } from '../../util/itinerary'\n\nimport L from 'leaflet'\n\nL.Evented.addInitHook(function () {\n  this._singleClickTimeout = null\n  this.on('click', this._scheduleSingleClick, this)\n  this.on('dblclick dragstart zoomstart', this._cancelSingleClick, this)\n})\n\nL.Evented.include({\n  _cancelSingleClick: function () {\n    // This timeout is key to workaround an issue where double-click events\n    // are fired in this order on some touch browsers: ['click', 'dblclick', 'click']\n    // instead of ['click', 'click', 'dblclick']\n    setTimeout(this._clearSingleClickTimeout.bind(this), 0)\n  },\n\n  _scheduleSingleClick: function (e) {\n    this._clearSingleClickTimeout()\n\n    this._singleClickTimeout = setTimeout(\n      this._fireSingleClick.bind(this, e),\n      (this.options.singleClickTimeout || 500)\n    )\n  },\n\n  _fireSingleClick: function (e) {\n    if (!e.originalEvent._stopped) {\n      this.fire('singleclick', L.Util.extend(e, { type: 'singleclick' }))\n    }\n  },\n\n  _clearSingleClickTimeout: function () {\n    if (this._singleClickTimeout !== null) {\n      clearTimeout(this._singleClickTimeout)\n      this._singleClickTimeout = null\n    }\n  }\n})\n\nclass BaseMap extends Component {\n  static propTypes = {\n    config: PropTypes.object,\n    mapClick: PropTypes.func,\n    setLocation: PropTypes.func, // TODO: rename from action name to avoid namespace conflict?\n    toggleName: PropTypes.element\n  }\n\n  /* Constructor */\n\n  constructor (props) {\n    super(props)\n\n    // For controlled overlays, maintain a map of boolean visibility status,\n    // indexed by 'name' string\n    const overlayVisibility = {}\n    React.Children.toArray(this.props.children).forEach(child => {\n      if (child.props.name && child.props.visible) {\n        overlayVisibility[child.props.name] = child.props.visible\n      }\n    })\n\n    this.state = { overlayVisibility }\n  }\n\n  /* Internal Methods */\n\n  _setLocationFromPopup = (type) => {\n    const { setMapPopupLocation, setLocation, popupLocation: location } = this.props\n    setMapPopupLocation({ location: null })\n    setLocation({ type, location, reverseGeocode: true })\n    if (typeof this.props.onSetLocation === 'function') {\n      this.props.onSetLocation({type, location})\n    }\n  }\n\n  _onClickTo = () => this._setLocationFromPopup('to')\n\n  _onClickFrom = () => this._setLocationFromPopup('from')\n\n  _onLeftClick = (e) => {\n    this.props.setMapPopupLocationAndGeocode({ location: constructLocation(e.latlng) })\n    if (typeof this.props.onClick === 'function') this.props.onClick(e)\n  }\n\n  _onOverlayAdd = (evt) => {\n    const overlayVisibility = {...this.state.overlayVisibility}\n    overlayVisibility[evt.name] = true\n    this.setState({ overlayVisibility })\n  }\n\n  _onOverlayRemove = (evt) => {\n    const overlayVisibility = {...this.state.overlayVisibility}\n    overlayVisibility[evt.name] = false\n    this.setState({ overlayVisibility })\n  }\n\n  // TODO: make map controlled component\n  _mapBoundsChanged = e => {\n    // if (this.state.zoomToTarget) {\n    //   setTimeout(() => { this.setState({zoomToTarget: false}) }, 200)\n    //   return false\n    // } else {\n    // const zoom = e.target.getZoom()\n    const bounds = e.target.getBounds()\n    // if (this.props.mapState.zoom !== zoom) {\n    //   this.props.updateMapState({zoom})\n    // }\n    if (!bounds.equals(this.props.mapState.bounds)) {\n      this.props.updateMapState({ bounds: e.target.getBounds() })\n    }\n    // }\n  }\n\n  _updateBounds (oldProps, newProps) {\n    // TODO: maybe setting bounds ought to be handled in map props...\n\n    oldProps = oldProps || {}\n    newProps = newProps || {}\n\n    // Don't auto-fit if popup us active\n    if (oldProps.popupLocation || newProps.popupLocation) return\n\n    const { map } = this.refs\n    if (!map) return\n\n    const padding = [30, 30]\n\n    // Fit map to to entire itinerary if active itinerary bounds changed\n    const oldItinBounds = oldProps.itinerary && getItineraryBounds(oldProps.itinerary)\n    const fromChanged = !isEqual(oldProps.query && oldProps.query.from, newProps.query && newProps.query.from)\n    const toChanged = !isEqual(oldProps.query && oldProps.query.to, newProps.query && newProps.query.to)\n    const newItinBounds = newProps.itinerary && getItineraryBounds(newProps.itinerary)\n    if (\n      (!oldItinBounds && newItinBounds) ||\n      (oldItinBounds && newItinBounds && !oldItinBounds.equals(newItinBounds))\n    ) {\n      map.leafletElement.fitBounds(newItinBounds, { padding })\n\n    // Pan to to itinerary leg if made active (clicked); newly active leg must be non-null\n    } else if (newProps.itinerary && newProps.activeLeg !== oldProps.activeLeg && newProps.activeLeg !== null) {\n      map.leafletElement.fitBounds(\n        getLegBounds(newProps.itinerary.legs[newProps.activeLeg]),\n        { padding }\n      )\n\n    // If no itinerary update but from/to locations are present, fit to those\n    } else if (newProps.query.from && newProps.query.to && (fromChanged || toChanged)) {\n      map.leafletElement.fitBounds([\n        [newProps.query.from.lat, newProps.query.from.lon],\n        [newProps.query.to.lat, newProps.query.to.lon]\n      ], { padding })\n\n    // If only from or to is set, pan to that\n    } else if (newProps.query.from && fromChanged) {\n      map.leafletElement.panTo([newProps.query.from.lat, newProps.query.from.lon])\n    } else if (newProps.query.to && toChanged) {\n      map.leafletElement.panTo([newProps.query.to.lat, newProps.query.to.lon])\n\n    // Pan to to itinerary step if made active (clicked)\n    } else if (\n      newProps.itinerary &&\n      newProps.activeLeg !== null &&\n      newProps.activeStep !== null &&\n      newProps.activeStep !== oldProps.activeStep\n    ) {\n      const leg = newProps.itinerary.legs[newProps.activeLeg]\n      const step = leg.steps[newProps.activeStep]\n      map.leafletElement.panTo([step.lat, step.lon])\n    }\n  }\n\n  _popupClosed = () => {\n    this.props.setMapPopupLocation({ location: null })\n  }\n\n  /* React Lifecycle methods */\n\n  componentDidMount () {\n    this._updateBounds(null, this.props)\n\n    const lmap = this.refs.map.leafletElement\n    lmap.options.singleClickTimeout = 250\n    lmap.on('singleclick', (e) => { this._onLeftClick(e) })\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this._updateBounds(this.props, nextProps)\n\n    // Check if any overlays should be toggled due to mode change\n    const overlaysConfig = this.props.config.map.overlays\n\n    if (overlaysConfig && this.props.query.mode) {\n      // Determine any added/removed modes\n      const oldModes = this.props.query.mode.split(',')\n      const newModes = nextProps.query.mode.split(',')\n      const removed = oldModes.filter(m => !newModes.includes(m))\n      const added = newModes.filter(m => !oldModes.includes(m))\n\n      const overlayVisibility = {...this.state.overlayVisibility}\n\n      for (const oConfig of overlaysConfig) {\n        if (!oConfig.modes || oConfig.modes.length !== 1) continue\n        // TODO: support multi-mode overlays\n        const overlayMode = oConfig.modes[0]\n\n        if (\n          (\n            overlayMode === 'CAR_RENT' ||\n            overlayMode === 'CAR_HAIL' ||\n            overlayMode === 'MICROMOBILITY_RENT'\n          ) &&\n          oConfig.companies\n        ) {\n          // Special handling for company-based mode overlays (e.g. carshare, car-hail)\n          const overlayCompany = oConfig.companies[0] // TODO: handle multi-company overlays\n          if (added.includes(overlayMode)) {\n            // Company-based mode was just selected; enable overlay iff overlay's company is active\n            if (nextProps.query.companies.includes(overlayCompany)) overlayVisibility[oConfig.name] = true\n          } else if (removed.includes(overlayMode)) {\n            // Company-based mode was just deselected; disable overlay (regardless of company)\n            overlayVisibility[oConfig.name] = false\n          } else if (newModes.includes(overlayMode) && this.props.query.companies !== nextProps.query.companies) {\n            // Company-based mode remains selected but companies change\n            overlayVisibility[oConfig.name] = nextProps.query.companies.includes(overlayCompany)\n          }\n        } else { // Default handling for other modes\n          if (added.includes(overlayMode)) overlayVisibility[oConfig.name] = true\n          if (removed.includes(overlayMode)) overlayVisibility[oConfig.name] = false\n        }\n      }\n\n      this.setState({ overlayVisibility })\n    }\n  }\n\n  // remove custom overlays on unmount\n  componentWillUnmount () {\n    const lmap = this.refs.map.leafletElement\n    lmap.eachLayer((layer) => {\n      lmap.removeLayer(layer)\n    })\n  }\n\n  render () {\n    const { config, children, diagramLeg, elevationPoint, popupLocation } = this.props\n    const { baseLayers } = config.map\n    const showElevationProfile = Boolean(config.elevationProfile)\n    const userControlledOverlays = []\n    const fixedOverlays = []\n    React.Children.toArray(children).forEach(child => {\n      if (child.props.name) {\n        // Add the visibility flag to this layer and push to the internal\n        // array of user-controlled overlays\n        const visible = this.state.overlayVisibility[child.props.name]\n        const childWithVisibility = React.cloneElement(child, { visible })\n        userControlledOverlays.push(childWithVisibility)\n      } else {\n        fixedOverlays.push(child)\n      }\n    })\n\n    const center = config.map && config.map.initLat && config.map.initLon\n      ? [config.map.initLat, config.map.initLon]\n      : null\n\n    /* TODO: currently mapProps is unused, but may later be used for controlling\n     * map location state\n\n    // const position = [+mapState.lat, +mapState.lon]\n    // const zoom = +mapState.zoom\n    const bounds = null // mapState.bounds\n    const mapProps = {\n      ref: 'map',\n      className: 'map',\n      // center: position,\n      // bounds: mapState.bounds || null,\n      // zoom: config.initZoom,\n      // zoom: +mapState.zoom,\n      onContextMenu: this._onRightClick\n      // onMoveEnd: this._mapBoundsChanged,\n      // onZoomEnd: this._mapBoundsChanged,\n    }\n    if (bounds) {\n      mapProps.bounds = bounds\n    } else if (position && zoom) {\n      mapProps.center = position\n      mapProps.zoom = zoom\n    } else {\n      console.error('no map position/bounds provided!', {position, zoom, bounds})\n    } */\n\n    // Compute the elevation point marker, if activeLeg and elevation profile is enabled.\n    let elevationPointMarker = null\n    if (showElevationProfile && diagramLeg && elevationPoint) {\n      const pos = legLocationAtDistance(diagramLeg, elevationPoint)\n      if (pos) {\n        elevationPointMarker = (\n          <CircleMarker\n            center={pos}\n            fillColor='#084c8d'\n            weight={6}\n            color='#555'\n            opacity={0.4}\n            radius={5}\n            fill\n            fillOpacity={1} />\n        )\n      }\n    }\n\n    return (\n      <Map\n        ref='map'\n        className='map'\n        center={center}\n        zoom={config.map.initZoom || 13}\n        onOverlayAdd={this._onOverlayAdd}\n        onOverlayRemove={this._onOverlayRemove}\n        /* Note: Map-click is handled via single-click plugin, set up in componentDidMount() */\n      >\n        {/* Create the layers control, including base map layers and any\n          * user-controlled overlays. */}\n        <LayersControl position='topright'>\n          { /* base layers */\n            baseLayers && baseLayers.map((l, i) => (\n              <LayersControl.BaseLayer\n                name={l.name}\n                checked={i === 0}\n                key={i}>\n                <TileLayer\n                  url={l.url}\n                  attribution={l.attribution}\n                  maxZoom={l.maxZoom}\n                  detectRetina />\n              </LayersControl.BaseLayer>\n            ))\n          }\n\n          { /* user-controlled overlay layers */\n            userControlledOverlays.map((child, i) => {\n              return (\n                <LayersControl.Overlay key={i}\n                  name={child.props.name}\n                  checked={child.props.visible}\n                >\n                  {child}\n                </LayersControl.Overlay>\n              )\n            })\n          }\n        </LayersControl>\n\n        {/* Add the fixed, i.e. non-user-controllable overlays */}\n        {fixedOverlays}\n\n        {/* Add the location selection popup, if visible */}\n        {popupLocation && (\n          <Popup ref='clickPopup'\n            position={[popupLocation.lat, popupLocation.lon]}\n            onClose={this._popupClosed}\n          >\n            <div style={{ width: 240 }}>\n              <div style={{ fontSize: 14, marginBottom: 6 }}>\n                {popupLocation.name.split(',').length > 3\n                  ? popupLocation.name.split(',').splice(0, 3).join(',')\n                  : popupLocation.name\n                }\n              </div>\n              <div>\n                Plan a trip:\n                <span style={{ margin: '0px 5px' }}><LocationIcon type='from' /></span>\n                <button className='link-button'\n                  onClick={this._onClickFrom}>\n                  From here\n                </button>{' '}|{' '}\n                <span style={{ margin: '0px 5px' }}><LocationIcon type='to' /></span>\n                <button className='link-button'\n                  onClick={this._onClickTo}>\n                  To here\n                </button>\n              </div>\n            </div>\n          </Popup>\n        )}\n\n        {/* Add the elevation point marker */}\n        {elevationPointMarker}\n      </Map>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    config: state.otp.config,\n    diagramLeg: state.otp.ui.diagramLeg,\n    elevationPoint: state.otp.ui.elevationPoint,\n    mapState: state.otp.mapState,\n    isFromSet:\n      state.otp.currentQuery.from &&\n      state.otp.currentQuery.from.lat !== null &&\n      state.otp.currentQuery.from.lon !== null,\n    isToSet:\n      state.otp.currentQuery.to &&\n      state.otp.currentQuery.to.lat !== null &&\n      state.otp.currentQuery.to.lon !== null,\n    itinerary: getActiveItinerary(state.otp),\n    popupLocation: state.otp.ui.mapPopupLocation,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation,\n  setMapPopupLocation,\n  setMapPopupLocationAndGeocode\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap)\n"]}