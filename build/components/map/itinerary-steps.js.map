{"version":3,"sources":["itinerary-steps.js"],"names":["ItinerarySteps","array","item","stopId","indexOf","push","props","itinerary","activeLeg","activeStep","steps","legs","map","l","legIndex","s","stepIndex","step","index","relativeDirection","active","icon","html","className","lat","lon","Component","propTypes","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;AAEA;;;;IAEqBA,c;;;;;;;;;;qCAIDC,K,EAAOC,I,EAAM;AAC7B,UAAIA,KAAKC,MAAL,IAAeF,MAAMG,OAAN,CAAcF,KAAKC,MAAnB,MAA+B,CAAC,CAAnD,EAAsD;AACpDF,cAAMI,IAAN,CAAWH,IAAX;AACD;AACF;;;6BACS;AAAA,mBACqC,KAAKI,KAD1C;AAAA,UACAC,SADA,UACAA,SADA;AAAA,UACWC,SADX,UACWA,SADX;AAAA,UACsBC,UADtB,UACsBA,UADtB;;AAER,UAAIC,QAAQ,EAAZ;AACAH,gBAAUI,IAAV,CAAeC,GAAf,CAAmB,UAACC,CAAD,EAAIC,QAAJ,EAAiB;AAClCJ,2DACKA,KADL,oCAEKG,EAAEH,KAAF,CAAQE,GAAR,CAAY,UAACG,CAAD,EAAIC,SAAJ,EAAkB;AAC/BD,YAAED,QAAF,GAAaA,QAAb;AACAC,YAAEC,SAAF,GAAcA,SAAd;AACA,iBAAOD,CAAP;AACD,SAJE,CAFL;AAQD,OATD;AAUA,aACE;AAAA;AAAA;AACGL,cAAME,GAAN,CAAU,UAACK,IAAD,EAAOC,KAAP,EAAiB;AAC1B,cAAID,KAAKE,iBAAL,KAA2B,QAA/B,EAAyC;AACvC,mBAAO,IAAP;AACD;AACD,cAAMC,SAASH,KAAKH,QAAL,KAAkBN,SAAlB,IAA+BS,KAAKD,SAAL,KAAmBP,UAAjE;AACA,cAAMY,OAAO,sBAAQ;AACnBC,yDAA0CF,SAAS,gBAAT,GAA4B,EAAtE,YADmB;AAEnBG,uBAAW;AAFQ,WAAR,CAAb;AAIA,iBACE,8BAAC,oBAAD;AACE,kBAAMF,IADR;AAEE,mBAAO,oCAAoBJ,IAApB,CAFT;AAGE,sBAAU,CAACA,KAAKO,GAAN,EAAWP,KAAKQ,GAAhB,CAHZ;AAIE,iBAAKP;AAJP,YADF;AAQD,SAjBA;AADH,OADF;AAsBD;;;EA5CyCQ,gB,UACnCC,S,GAAY;AACjBpB,aAAWqB,iBAAUC;AADJ,C;kBADA7B,c","file":"itinerary-steps.js","sourcesContent":["import { divIcon } from 'leaflet'\nimport React, {Component, PropTypes} from 'react'\nimport { Marker } from 'react-leaflet'\n\nimport { getStepInstructions } from '../../util/itinerary'\n\nexport default class ItinerarySteps extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n  addItineraryStop (array, item) {\n    if (item.stopId && array.indexOf(item.stopId) === -1) {\n      array.push(item)\n    }\n  }\n  render () {\n    const { itinerary, activeLeg, activeStep } = this.props\n    let steps = []\n    itinerary.legs.map((l, legIndex) => {\n      steps = [\n        ...steps,\n        ...l.steps.map((s, stepIndex) => {\n          s.legIndex = legIndex\n          s.stepIndex = stepIndex\n          return s\n        })\n      ]\n    })\n    return (\n      <div>\n        {steps.map((step, index) => {\n          if (step.relativeDirection === 'DEPART') {\n            return null\n          }\n          const active = step.legIndex === activeLeg && step.stepIndex === activeStep\n          const icon = divIcon({\n            html: `<i class=\"fa fa-circle-o\" style=\"${active ? 'color: #ffffff' : ''}\"></i>`,\n            className: ''\n          })\n          return (\n            <Marker\n              icon={icon}\n              title={getStepInstructions(step)}\n              position={[step.lat, step.lon]}\n              key={index}\n            />\n          )\n        })}\n      </div>\n    )\n  }\n}\n"]}