{"version":3,"sources":["connected-transitive-overlay.js"],"names":["mapStateToProps","state","ownProps","activeSearch","otp","transitiveData","query","routingType","response","plan","itins","coreUtils","map","itineraryToTransitive","activeItinerary","visible","mapDispatchToProps","TransitiveCanvasOverlay"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,MAAIC,cAAc,GAAG,IAArB;;AACA,MACEF,YAAY,IACZA,YAAY,CAACG,KAAb,CAAmBC,WAAnB,KAAmC,WADnC,IAEAJ,YAAY,CAACK,QAFb,IAGAL,YAAY,CAACK,QAAb,CAAsBC,IAJxB,EAKE;AACA,QAAMC,KAAK,GAAG,iCAAqBT,KAAK,CAACG,GAA3B,CAAd,CADA,CAEA;;AACAC,IAAAA,cAAc,GAAGM,mBAAUC,GAAV,CAAcC,qBAAd,CAAoCH,KAAK,CAACP,YAAY,CAACW,eAAd,CAAzC,CAAjB;AACD,GATD,MASO,IACLX,YAAY,IACZA,YAAY,CAACK,QADb,IAEAL,YAAY,CAACK,QAAb,CAAsBJ,GAHjB,EAIL;AACAC,IAAAA,cAAc,GAAGF,YAAY,CAACK,QAAb,CAAsBJ,GAAvC;AACD;;AAED,SAAO;AACLU,IAAAA,eAAe,EAAEX,YAAY,IAAIA,YAAY,CAACW,eADzC;AAELP,IAAAA,WAAW,EAAEJ,YAAY,IAAIA,YAAY,CAACG,KAA7B,IAAsCH,YAAY,CAACG,KAAb,CAAmBC,WAFjE;AAGLF,IAAAA,cAAc,EAAdA,cAHK;AAILU,IAAAA,OAAO,EAAE;AAJJ,GAAP;AAMD,CA1BD;;AA4BA,IAAMC,kBAAkB,GAAG,EAA3B;;eAEe,yBAAQhB,eAAR,EAAyBgB,kBAAzB,EAA6CC,0BAA7C,C","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport TransitiveCanvasOverlay from '@opentripplanner/transitive-overlay'\nimport { connect } from 'react-redux'\n\nimport { getActiveSearch, getActiveItineraries } from '../../util/state'\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  let transitiveData = null\n  if (\n    activeSearch &&\n    activeSearch.query.routingType === 'ITINERARY' &&\n    activeSearch.response &&\n    activeSearch.response.plan\n  ) {\n    const itins = getActiveItineraries(state.otp)\n    // TODO: prevent itineraryToTransitive() from being called more than needed\n    transitiveData = coreUtils.map.itineraryToTransitive(itins[activeSearch.activeItinerary])\n  } else if (\n    activeSearch &&\n    activeSearch.response &&\n    activeSearch.response.otp\n  ) {\n    transitiveData = activeSearch.response.otp\n  }\n\n  return {\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    routingType: activeSearch && activeSearch.query && activeSearch.query.routingType,\n    transitiveData,\n    visible: true\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransitiveCanvasOverlay)\n"]}