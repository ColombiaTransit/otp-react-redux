{"version":3,"sources":["car-rental-overlay.js"],"names":["CarRentalOverlay","props","refreshVehicles","_refreshTimer","setInterval","clearInterval","visible","_startRefreshing","_stopRefreshing","nextProps","companies","stations","length","markerIcon","iconSize","popupAnchor","html","className","bulletIconStyle","color","fontSize","width","map","station","stationName","networks","join","id","y","x","address","split","context","lat","lon","name","setLocation","Component","propTypes","queryMode","PropTypes","string","vehicles","array","func","mapStateToProps","state","ownProps","otp","currentQuery","overlay","carRental","mapDispatchToProps","carRentalQuery"],"mappings":"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","file":"car-rental-overlay.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { carRentalQuery } from '../../actions/api'\nimport { setLocation } from '../../actions/map'\n\nclass CarRentalOverlay extends Component {\n  static propTypes = {\n    queryMode: PropTypes.string,\n    vehicles: PropTypes.array,\n    refreshVehicles: PropTypes.func\n  }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.refreshVehicles()\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.refreshVehicles()\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    if (this.props.visible) this._startRefreshing()\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing()\n    } else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing()\n    } else if (\n      this.props.visible &&\n      nextProps.visible &&\n      this.props.companies !== nextProps.companies\n    ) {\n      this._startRefreshing()\n    }\n  }\n\n  render () {\n    const { stations } = this.props\n\n    if (!stations || stations.length === 0) return <FeatureGroup />\n\n    const markerIcon = divIcon({\n      iconSize: [11, 16],\n      popupAnchor: [0, -6],\n      html: '<i />',\n      className: 'fa fa-map-marker car-rental-icon'\n    })\n\n    const bulletIconStyle = {\n      color: 'gray',\n      fontSize: 12,\n      width: 10\n    }\n\n    return (\n      <FeatureGroup>\n        {stations.map((station) => {\n          const stationName = `${station.networks.join('/')} ${station.id}`\n          return (\n            <Marker\n              icon={markerIcon}\n              key={station.id}\n              position={[station.y, station.x]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    {stationName}\n                  </div>\n\n                  {/* Car address bullet */}\n                  {station.address && (\n                    <div className='popup-row'>\n                      <i className='fa fa-map-marker' style={bulletIconStyle} /> {station.address.split(',')[0]}\n                    </div>\n                  )}\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: station.y,\n                        lon: station.x,\n                        name: stationName\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    companies: state.otp.currentQuery.companies,\n    stations: state.otp.overlay.carRental.stations\n  }\n}\n\nconst mapDispatchToProps = {\n  refreshVehicles: carRentalQuery,\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarRentalOverlay)\n"]}