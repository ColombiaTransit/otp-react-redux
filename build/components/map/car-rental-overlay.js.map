{"version":3,"sources":["car-rental-overlay.js"],"names":["CarRentalOverlay","props","refreshVehicles","_refreshTimer","setInterval","clearInterval","visible","_startRefreshing","_stopRefreshing","nextProps","stations","companies","filteredStations","filter","station","networks","includes","value","length","bulletIconStyle","color","fontSize","width","map","stationName","join","name","id","className","toLowerCase","markerIcon","iconSize","popupAnchor","html","y","x","address","split","context","lat","lon","setLocation","Component","propTypes","queryMode","PropTypes","string","vehicles","array","func","mapStateToProps","state","ownProps","otp","overlay","carRental","mapDispatchToProps","carRentalQuery"],"mappings":"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","file":"car-rental-overlay.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { carRentalQuery } from '../../actions/api'\nimport { setLocation } from '../../actions/map'\n\nclass CarRentalOverlay extends Component {\n  static propTypes = {\n    queryMode: PropTypes.string,\n    vehicles: PropTypes.array,\n    refreshVehicles: PropTypes.func\n  }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.refreshVehicles()\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.refreshVehicles()\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    if (this.props.visible) this._startRefreshing()\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing()\n    } else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  render () {\n    const { stations, companies } = this.props\n\n    let filteredStations = stations\n    if (companies) {\n      filteredStations = stations.filter(station => station.networks.filter(value => companies.includes(value)).length > 0)\n    }\n\n    if (!filteredStations || filteredStations.length === 0) return <FeatureGroup />\n\n    // Default icon is gray, styling can be overridden by network-specific classes\n    const bulletIconStyle = {\n      color: 'gray',\n      fontSize: 12,\n      width: 10\n    }\n\n    return (\n      <FeatureGroup>\n        {filteredStations.map((station) => {\n          const stationName = `${station.networks.join('/')} ${station.name || station.id}`\n\n          let className = 'fa fa-map-marker car-rental-icon'\n          // If this station is exclusive to a single network, apply the the class for that network\n          if (station.networks.length === 1) className += ' car-rental-icon-' + station.networks[0].toLowerCase()\n          const markerIcon = divIcon({\n            iconSize: [11, 16],\n            popupAnchor: [0, -6],\n            html: '<i />',\n            className\n          })\n\n          return (\n            <Marker\n              icon={markerIcon}\n              key={station.id}\n              position={[station.y, station.x]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    {stationName}\n                  </div>\n\n                  {/* Car address bullet */}\n                  {station.address && (\n                    <div className='popup-row'>\n                      <i className='fa fa-map-marker' style={bulletIconStyle} /> {station.address.split(',')[0]}\n                    </div>\n                  )}\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: station.y,\n                        lon: station.x,\n                        name: stationName\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stations: state.otp.overlay.carRental.stations\n  }\n}\n\nconst mapDispatchToProps = {\n  refreshVehicles: carRentalQuery,\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CarRentalOverlay)\n"]}