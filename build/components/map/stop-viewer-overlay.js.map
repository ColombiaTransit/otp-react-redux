{"version":3,"sources":["stop-viewer-overlay.js"],"names":["StopViewerOverlay","nextProps","props","stopData","context","map","setView","lat","lon","viewedStop","id","name","MapLayer","propTypes","PropTypes","object","mapStateToProps","state","ownProps","otp","ui","transitIndex","stops","stopId","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;IAEMA,iB;;;;;;;;;;wCAMiB,CAAG;;AAExB;;;;2CACwB,CAAG;;;8CAEAC,S,EAAW;AACpC,UAAI,KAAKC,KAAL,CAAWC,QAAX,KAAwBF,UAAUE,QAAlC,IAA8C,CAACF,UAAUE,QAA7D,EAAuE;AACvE,WAAKC,OAAL,CAAaC,GAAb,CAAiBC,OAAjB,CAAyB,CAACL,UAAUE,QAAV,CAAmBI,GAApB,EAAyBN,UAAUE,QAAV,CAAmBK,GAA5C,CAAzB;AACD;;;2CAEuB,CAAG;;;2CAEH,CAAG;;;6BAEjB;AAAA,mBACyB,KAAKN,KAD9B;AAAA,UACAO,UADA,UACAA,UADA;AAAA,UACYN,QADZ,UACYA,QADZ;;;AAGR,UAAI,CAACM,UAAD,IAAe,CAACN,QAApB,EAA8B,OAAO,8BAAC,0BAAD,OAAP;;AAE9B,aACE;AAAC,kCAAD;AAAA;AACE;AAAC,oCAAD;AAAA;AACE,iBAAKA,SAASO,EADhB;AAEE,oBAAQ,CAACP,SAASI,GAAV,EAAeJ,SAASK,GAAxB,CAFV;AAGE,oBAAQ,CAHV;AAIE,yBAAa,CAJf;AAKE,uBAAU,MALZ;AAME,mBAAM,MANR;AAOE,oBAAQ;AAPV;AASE;AAAC,+BAAD;AAAA;AACE;AAAA;AAAA;AACGL,uBAASQ;AADZ;AADF;AATF;AADF,OADF;AAmBD;;;EA5C6BC,sB,UACvBC,S,GAAY;AACjBV,YAAUW,iBAAUC,MADH;AAEjBN,cAAYK,iBAAUC;AAFL,C;;AA8CrB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMT,aAAaQ,MAAME,GAAN,CAAUC,EAAV,CAAaX,UAAhC;AACA,SAAO;AACLA,gBAAYA,UADP;AAELN,cAAUM,aACNQ,MAAME,GAAN,CAAUE,YAAV,CAAuBC,KAAvB,CAA6Bb,WAAWc,MAAxC,CADM,GAEN;AAJC,GAAP;AAMD,CARD;;AAUA,IAAMC,qBAAqB,EAA3B;;kBAGe,yBAAQR,eAAR,EAAyBQ,kBAAzB,EAA6CxB,iBAA7C,C","file":"stop-viewer-overlay.js","sourcesContent":["import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Popup, CircleMarker } from 'react-leaflet'\n\nclass StopViewerOverlay extends MapLayer {\n  static propTypes = {\n    stopData: PropTypes.object,\n    viewedStop: PropTypes.object\n  }\n\n  componentDidMount () { }\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () { }\n\n  componentWillReceiveProps (nextProps) {\n    if (this.props.stopData === nextProps.stopData || !nextProps.stopData) return\n    this.context.map.setView([nextProps.stopData.lat, nextProps.stopData.lon])\n  }\n\n  createLeafletElement () { }\n\n  updateLeafletElement () { }\n\n  render () {\n    const { viewedStop, stopData } = this.props\n\n    if (!viewedStop || !stopData) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        <CircleMarker\n          key={stopData.id}\n          center={[stopData.lat, stopData.lon]}\n          radius={9}\n          fillOpacity={1}\n          fillColor='cyan'\n          color='#000'\n          weight={3}\n        >\n          <Popup>\n            <div>\n              {stopData.name}\n            </div>\n          </Popup>\n        </CircleMarker>\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const viewedStop = state.otp.ui.viewedStop\n  return {\n    viewedStop: viewedStop,\n    stopData: viewedStop\n      ? state.otp.transitIndex.stops[viewedStop.stopId]\n      : null\n  }\n}\n\nconst mapDispatchToProps = {\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StopViewerOverlay)\n"]}