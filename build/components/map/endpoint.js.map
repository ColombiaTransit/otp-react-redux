{"version":3,"sources":["endpoint.js"],"names":["Endpoint","_onDragEnd","e","props","setLocation","type","location","target","getLatLng","reverseGeocode","position","lat","lon","iconHtml","ReactDOMServer","renderToStaticMarkup","name","opacity","marginLeft","marginTop","color","fontSize","width","height","paddingTop","html","className","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;AAEA;;AACA;;;;;;IAGqBA,Q;;;;;;;;;;;;;;gNACnBC,U,GAAa,UAACC,CAAD,EAAO;AAAA,wBACU,MAAKC,KADf;AAAA,UACXC,WADW,eACXA,WADW;AAAA,UACEC,IADF,eACEA,IADF;;AAElB,UAAMC,WAAW,4BAAkBJ,EAAEK,MAAF,CAASC,SAAT,EAAlB,CAAjB;AACAJ,kBAAY,EAACC,UAAD,EAAOC,kBAAP,EAAiBG,gBAAgB,IAAjC,EAAZ;AACD,K;;;;;6BAES;AAAA,mBACmB,KAAKN,KADxB;AAAA,UACAE,IADA,UACAA,IADA;AAAA,UACMC,QADN,UACMA,QADN;;AAER,UAAMI,WAAWJ,YAAYA,SAASK,GAArB,IAA4BL,SAASM,GAArC,GAA2C,CAACN,SAASK,GAAV,EAAeL,SAASM,GAAxB,CAA3C,GAA0E,IAA3F;AACA,UAAI,CAACF,QAAL,EAAe,OAAO,IAAP;;AAEf,UAAMG,WAAWC,iBAAeC,oBAAf,CACf;AAAA;AAAA,UAAM,OAAOT,SAASU,IAAtB,EAA4B,kCAAgCX,IAAhC,UAA5B,EAAyE,OAAO,EAAEY,SAAS,GAAX,EAAgBC,YAAY,CAAC,EAA7B,EAAiCC,WAAW,CAAC,CAA7C,EAAhF;AACE,sCAAC,sBAAD,IAAc,MAAMd,IAApB,EAA0B,WAAU,aAApC,EAAkD,OAAO,EAAEe,OAAO,MAAT,EAAiBC,UAAU,EAA3B,EAA+BC,OAAO,EAAtC,EAA0CC,QAAQ,EAAlD,EAAsDC,YAAY,CAAlE,EAAzD,GADF;AAEE,sCAAC,sBAAD,IAAc,MAAMnB,IAApB,EAA0B,WAAU,aAApC,EAAkD,OAAO,EAAEgB,UAAU,EAAZ,EAAgBC,OAAO,EAAvB,EAA2BC,QAAQ,EAAnC,EAAzD;AAFF,OADe,CAAjB;;AAOA,aACE,8BAAC,oBAAD;AACE,uBADF;AAEE,cAAM,sBAAQ,EAAEE,MAAMZ,QAAR,EAAkBa,WAAW,EAA7B,EAAR,CAFR;AAGE,kBAAUhB,QAHZ;AAIE,mBAAW,KAAKT;AAJlB,QADF;AAQD;;;EA3BmC0B,gB;;kBAAjB3B,Q","file":"endpoint.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\nimport { Marker } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport { constructLocation } from '../../util/map'\nimport LocationIcon from '../icons/location-icon'\n\n\nexport default class Endpoint extends Component {\n  _onDragEnd = (e) => {\n    const {setLocation, type} = this.props\n    const location = constructLocation(e.target.getLatLng())\n    setLocation({type, location, reverseGeocode: true})\n  }\n\n  render () {\n    const { type, location } = this.props\n    const position = location && location.lat && location.lon ? [location.lat, location.lon] : null\n    if (!position) return null\n\n    const iconHtml = ReactDOMServer.renderToStaticMarkup(\n      <span title={location.name} className={`fa-stack endpoint-${type}-icon`} style={{ opacity: 1.0, marginLeft: -10, marginTop: -7 }}>\n        <LocationIcon type={type} className='fa-stack-1x' style={{ color: '#fff', fontSize: 32, width: 32, height: 32, paddingTop: 1 }} />\n        <LocationIcon type={type} className='fa-stack-1x' style={{ fontSize: 24, width: 32, height: 32 }} />\n      </span>\n    )\n\n    return (\n      <Marker\n        draggable\n        icon={divIcon({ html: iconHtml, className: '' })}\n        position={position}\n        onDragEnd={this._onDragEnd}\n      />\n    )\n  }\n}\n"]}