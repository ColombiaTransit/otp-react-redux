{"version":3,"sources":["endpoint.js"],"names":["Endpoint","_onDragEnd","e","props","setLocation","type","location","target","getLatLng","reverseGeocode","position","lat","lon","fgStyle","fontSize","width","height","bgStyle","paddingTop","iconHtml","ReactDOMServer","renderToStaticMarkup","name","opacity","marginLeft","marginTop","color","html","className","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;AAEA;;AACA;;;;;;IAGqBA,Q;;;;;;;;;;;;;;gNACnBC,U,GAAa,UAACC,CAAD,EAAO;AAAA,wBACU,MAAKC,KADf;AAAA,UACXC,WADW,eACXA,WADW;AAAA,UACEC,IADF,eACEA,IADF;;AAElB,UAAMC,WAAW,4BAAkBJ,EAAEK,MAAF,CAASC,SAAT,EAAlB,CAAjB;AACAJ,kBAAY,EAACC,UAAD,EAAOC,kBAAP,EAAiBG,gBAAgB,IAAjC,EAAZ;AACD,K;;;;;6BAES;AAAA,mBACmB,KAAKN,KADxB;AAAA,UACAE,IADA,UACAA,IADA;AAAA,UACMC,QADN,UACMA,QADN;;AAER,UAAMI,WAAWJ,YAAYA,SAASK,GAArB,IAA4BL,SAASM,GAArC,GAA2C,CAACN,SAASK,GAAV,EAAeL,SAASM,GAAxB,CAA3C,GAA0E,IAA3F;AACA,UAAI,CAACF,QAAL,EAAe,OAAO,IAAP;AACf,UAAMG,UAAU,EAAEC,UAAU,EAAZ,EAAgBC,OAAO,EAAvB,EAA2BC,QAAQ,EAAnC,EAAhB;AACA,UAAMC,UAAU,EAAEH,UAAU,EAAZ,EAAgBC,OAAO,EAAvB,EAA2BC,QAAQ,EAAnC,EAAuCE,YAAY,CAAnD,EAAhB;AACA,UAAMC,WAAWC,iBAAeC,oBAAf,CACf;AAAA;AAAA,UAAM,OAAOf,SAASgB,IAAtB,EAA4B,kCAAgCjB,IAAhC,UAA5B,EAAyE,OAAO,EAAEkB,SAAS,GAAX,EAAgBC,YAAY,CAAC,EAA7B,EAAiCC,WAAW,CAAC,CAA7C,EAAhF;AACGpB,iBAAS;AACR;AADD,UAEG,qCAAG,WAAU,0BAAb,EAAwC,gCAAQqB,OAAO,MAAf,IAA0Bb,OAA1B,CAAxC,GAFH,GAGG;AAAA;AAAA;AACA,wCAAC,sBAAD,IAAc,MAAMR,IAApB,EAA0B,WAAU,aAApC,EAAkD,gCAAQqB,OAAO,MAAf,IAA0BT,OAA1B,CAAlD,GADA;AAEA,+CAAG,WAAU,0BAAb,EAAwC,gCAAQS,OAAO,MAAf,IAA0BT,OAA1B,IAAmCH,UAAU,EAA7C,EAAiDW,WAAW,CAAC,CAA7D,GAAxC;AAFA,SAJN;AASE,sCAAC,sBAAD,IAAc,MAAMpB,IAApB,EAA0B,WAAU,aAApC,EAAkD,OAAOQ,OAAzD;AATF,OADe,CAAjB;;AAcA,aACE,8BAAC,oBAAD;AACE,uBADF;AAEE,cAAM,sBAAQ,EAAEc,MAAMR,QAAR,EAAkBS,WAAW,EAA7B,EAAR,CAFR;AAGE,kBAAUlB,QAHZ;AAIE,mBAAW,KAAKT;AAJlB,QADF;AAQD;;;EAnCmC4B,gB;;kBAAjB7B,Q","file":"endpoint.js","sourcesContent":["import React, {Component} from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\nimport { Marker } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport { constructLocation } from '../../util/map'\nimport LocationIcon from '../icons/location-icon'\n\n\nexport default class Endpoint extends Component {\n  _onDragEnd = (e) => {\n    const {setLocation, type} = this.props\n    const location = constructLocation(e.target.getLatLng())\n    setLocation({type, location, reverseGeocode: true})\n  }\n\n  render () {\n    const { type, location } = this.props\n    const position = location && location.lat && location.lon ? [location.lat, location.lon] : null\n    if (!position) return null\n    const fgStyle = { fontSize: 24, width: 32, height: 32 }\n    const bgStyle = { fontSize: 32, width: 32, height: 32, paddingTop: 1 }\n    const iconHtml = ReactDOMServer.renderToStaticMarkup(\n      <span title={location.name} className={`fa-stack endpoint-${type}-icon`} style={{ opacity: 1.0, marginLeft: -10, marginTop: -7 }}>\n        {type === 'from'\n          // From icon should have white circle background\n          ? <i className='fa-stack-1x fa fa-circle' style={{color: '#fff', ...fgStyle}} />\n          : <span>\n            <LocationIcon type={type} className='fa-stack-1x' style={{color: '#333', ...bgStyle}} />\n            <i className='fa-stack-1x fa fa-circle' style={{color: '#fff', ...bgStyle, fontSize: 12, marginTop: -4}} />\n          </span>\n        }\n        <LocationIcon type={type} className='fa-stack-1x' style={fgStyle} />\n      </span>\n    )\n\n    return (\n      <Marker\n        draggable\n        icon={divIcon({ html: iconHtml, className: '' })}\n        position={position}\n        onDragEnd={this._onDragEnd}\n      />\n    )\n  }\n}\n"]}