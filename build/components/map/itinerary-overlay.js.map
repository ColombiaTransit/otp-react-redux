{"version":3,"sources":["itinerary-overlay.js"],"names":["ItineraryOverlay","props","activeLeg","activeStep","itinerary","setActiveLeg","Component","propTypes","PropTypes","number","object","mapStateToProps","state","ownProps","activeSearch","otp","mapDispatchToProps","dispatch","index","leg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;AAGA;;AACA;;;;AACA;;;;AACA;;;;;;IAEMA,gB;;;;;;;;;;6BAOM;AAAA,mBACqC,KAAKC,KAD1C;AAAA,UACAC,SADA,UACAA,SADA;AAAA,UACWC,UADX,UACWA,UADX;AAAA,UACuBC,SADvB,UACuBA,SADvB;;AAER,UAAI,CAACA,SAAL,EAAgB,OAAO,IAAP;AAChB,aACE;AAAA;AAAA;AACE,sCAAC,uBAAD;AACE,qBAAWA,SADb;AAEE,qBAAWF,SAFb;AAGE,wBAAc,KAAKD,KAAL,CAAWI;AAH3B,UADF;AAME,sCAAC,wBAAD;AACE,qBAAWD,SADb;AAEE,qBAAWF,SAFb;AAGE,wBAAc,KAAKD,KAAL,CAAWI;AAH3B,UANF;AAWE,sCAAC,wBAAD;AACE,qBAAWD,SADb;AAEE,qBAAWF,SAFb;AAGE,sBAAYC;AAHd;AAXF,OADF;AAmBD;;;EA7B4BG,gB,UACtBC,S,GAAY;AACjBL,aAAWM,iBAAUC,MADJ;AAEjBN,cAAYK,iBAAUC,MAFL;AAGjBL,aAAWI,iBAAUE;AAHJ,C;;AA+BrB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,eAAe,4BAAgBF,MAAMG,GAAtB,CAArB;AACA,SAAO;AACLX,eAAW,+BAAmBQ,MAAMG,GAAzB,CADN;AAELb,eAAWY,gBAAgBA,aAAaZ,SAFnC;AAGLC,gBAAYW,gBAAgBA,aAAaX;AAHpC,GAAP;AAKD,CAPD;;AASA,IAAMa,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAWJ,QAAX,EAAwB;AACjD,SAAO;AACLR,kBAAc,sBAACa,KAAD,EAAQC,GAAR,EAAgB;AAAEF,eAAS,6BAAa,EAAEC,YAAF,EAASC,QAAT,EAAb,CAAT;AAAwC;AADnE,GAAP;AAGD,CAJD;;kBAMe,yBAAQR,eAAR,EAAyBK,kBAAzB,EAA6ChB,gBAA7C,C","file":"itinerary-overlay.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  setActiveLeg\n} from '../../actions/narrative'\nimport { getActiveItinerary, getActiveSearch } from '../../util/state'\nimport ItinerarySteps from './itinerary-steps'\nimport ItineraryStops from './itinerary-stops'\nimport ItineraryLegs from './itinerary-legs'\n\nclass ItineraryOverlay extends Component {\n  static propTypes = {\n    activeLeg: PropTypes.number,\n    activeStep: PropTypes.number,\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { activeLeg, activeStep, itinerary } = this.props\n    if (!itinerary) return null\n    return (\n      <div>\n        <ItineraryLegs\n          itinerary={itinerary}\n          activeLeg={activeLeg}\n          setActiveLeg={this.props.setActiveLeg}\n        />\n        <ItineraryStops\n          itinerary={itinerary}\n          activeLeg={activeLeg}\n          setActiveLeg={this.props.setActiveLeg}\n        />\n        <ItinerarySteps\n          itinerary={itinerary}\n          activeLeg={activeLeg}\n          activeStep={activeStep}\n        />\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    itinerary: getActiveItinerary(state.otp),\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setActiveLeg: (index, leg) => { dispatch(setActiveLeg({ index, leg })) }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItineraryOverlay)\n"]}