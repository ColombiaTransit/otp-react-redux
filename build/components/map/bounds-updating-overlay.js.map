{"version":3,"sources":["bounds-updating-overlay.js"],"names":["BoundsUpdatingOverlay","updateBounds","props","prevProps","oldProps","newProps","popupLocation","map","leaflet","padding","newFrom","query","from","newItinBounds","itinerary","newTo","to","oldFrom","oldItinBounds","oldTo","fromChanged","toChanged","equals","fitBounds","activeLeg","legs","coreUtils","ui","isMobile","lat","lon","panTo","activeStep","leg","step","steps","MapLayer","mapStateToProps","state","ownProps","activeSearch","otp","mapPopupLocation","currentQuery","mapDispatchToProps"],"mappings":"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","sourcesContent":["import isEqual from 'lodash.isequal'\nimport coreUtils from '@opentripplanner/core-utils'\nimport { MapLayer, withLeaflet } from 'react-leaflet'\nimport { connect } from 'react-redux'\n\nimport {\n  getLeafletItineraryBounds,\n  getLeafletLegBounds\n} from '../../util/itinerary'\nimport { getActiveItinerary, getActiveSearch } from '../../util/state'\n\n/**\n * This MapLayer component will automatically update the leaflet bounds\n * depending on what data is in the redux store. This component does not\n * \"render\" anything on the map.\n */\nclass BoundsUpdatingOverlay extends MapLayer {\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  componentDidMount () {\n    this.updateBounds(null, this.props)\n  }\n\n  componentDidUpdate (prevProps) {\n    this.updateBounds(prevProps, this.props)\n  }\n\n  componentWillUnmount () {}\n\n  /* eslint-disable-next-line complexity */\n  updateBounds (oldProps, newProps) {\n    // TODO: maybe setting bounds ought to be handled in map props...\n\n    oldProps = oldProps || {}\n    newProps = newProps || {}\n\n    // Don't auto-fit if popup us active\n    if (oldProps.popupLocation || newProps.popupLocation) return\n\n    const { map } = newProps.leaflet\n    if (!map) return\n\n    const padding = [30, 30]\n\n    // Fit map to to entire itinerary if active itinerary bounds changed\n    const newFrom = newProps.query && newProps.query.from\n    const newItinBounds = newProps.itinerary && getLeafletItineraryBounds(newProps.itinerary)\n    const newTo = newProps.query && newProps.query.to\n    const oldFrom = oldProps.query && oldProps.query.from\n    const oldItinBounds = oldProps.itinerary && getLeafletItineraryBounds(oldProps.itinerary)\n    const oldTo = oldProps.query && oldProps.query.to\n    const fromChanged = !isEqual(oldFrom, newFrom)\n    const toChanged = !isEqual(oldTo, newTo)\n    if (\n      (!oldItinBounds && newItinBounds) ||\n      (oldItinBounds && newItinBounds && !oldItinBounds.equals(newItinBounds))\n    ) {\n      map.fitBounds(newItinBounds, { padding })\n    // Pan to to itinerary leg if made active (clicked); newly active leg must be non-null\n    } else if (\n      newProps.itinerary &&\n        newProps.activeLeg !== oldProps.activeLeg &&\n        newProps.activeLeg !== null\n    ) {\n      map.fitBounds(\n        getLeafletLegBounds(newProps.itinerary.legs[newProps.activeLeg]),\n        { padding }\n      )\n\n    // If no itinerary update but from/to locations are present, fit to those\n    } else if (newFrom && newTo && (fromChanged || toChanged)) {\n      // On certain mobile devices (e.g., Android + Chrome), setting from and to\n      // locations via the location search component causes issues for this\n      // fitBounds invocation. The map does not appear to be visible when these\n      // prop changes are detected, so for now we should perhaps just skip this\n      // fitBounds on mobile.\n      // See https://github.com/opentripplanner/otp-react-redux/issues/133 for\n      // more info.\n      // TODO: Fix this so mobile devices will also update the bounds to the\n      // from/to locations.\n      if (!coreUtils.ui.isMobile()) {\n        map.fitBounds([\n          [newFrom.lat, newFrom.lon],\n          [newTo.lat, newTo.lon]\n        ], { padding })\n      }\n\n    // If only from or to is set, pan to that\n    } else if (newFrom && fromChanged) {\n      map.panTo([newFrom.lat, newFrom.lon])\n    } else if (newTo && toChanged) {\n      map.panTo([newTo.lat, newTo.lon])\n\n    // Pan to to itinerary step if made active (clicked)\n    } else if (\n      newProps.itinerary &&\n      newProps.activeLeg !== null &&\n      newProps.activeStep !== null &&\n      newProps.activeStep !== oldProps.activeStep\n    ) {\n      const leg = newProps.itinerary.legs[newProps.activeLeg]\n      const step = leg.steps[newProps.activeStep]\n      map.panTo([step.lat, step.lon])\n    }\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    itinerary: getActiveItinerary(state.otp),\n    popupLocation: state.otp.ui.mapPopupLocation,\n    query: state.otp.currentQuery\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default withLeaflet(\n  connect(mapStateToProps, mapDispatchToProps)(BoundsUpdatingOverlay)\n)\n"]}