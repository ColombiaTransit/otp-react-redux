{"version":3,"sources":["bike-rental-overlay.js"],"names":["BikeRentalOverlay","props","refreshStations","_refreshTimer","setInterval","clearInterval","visible","_startRefreshing","_stopRefreshing","nextProps","stations","length","map","station","icon","isFloatingBike","iconSize","iconAnchor","popupAnchor","html","className","pctFull","bikesAvailable","spacesAvailable","i","Math","round","id","y","x","name","context","lat","lon","setLocation","Component","propTypes","queryMode","PropTypes","string","array","func","mapStateToProps","state","ownProps","otp","overlay","bikeRental","mapDispatchToProps","bikeRentalQuery"],"mappings":"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","file":"bike-rental-overlay.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport { bikeRentalQuery } from '../../actions/api'\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\n\nclass BikeRentalOverlay extends Component {\n  static propTypes = {\n    queryMode: PropTypes.string,\n    stations: PropTypes.array,\n    refreshStations: PropTypes.func\n  }\n\n  _startRefreshing () {\n    // ititial station retrieval\n    this.props.refreshStations()\n\n    // set up timer to refresh stations periodically\n    this._refreshTimer = setInterval(() => {\n      this.props.refreshStations()\n    }, 30000) // defaults to every 30 sec. TODO: make this configurable?*/\n  }\n\n  _stopRefreshing () {\n    if (this._refreshTimer) clearInterval(this._refreshTimer)\n  }\n\n  componentDidMount () {\n    if (this.props.visible) this._startRefreshing()\n  }\n\n  componentWillUnmount () {\n    this._stopRefreshing()\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!this.props.visible && nextProps.visible) {\n      this._startRefreshing()\n    } else if (this.props.visible && !nextProps.visible) {\n      this._stopRefreshing()\n    }\n  }\n\n  render () {\n    const { stations } = this.props\n\n    if (!stations || stations.length === 0) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        {stations.map((station) => {\n          let icon\n          if (station.isFloatingBike) {\n            icon = divIcon({\n              iconSize: [24, 24],\n              iconAnchor: [12, 24],\n              popupAnchor: [0, -12],\n              html: `<div class=\"bike-rental-hub-icon bike-rental-out-of-hub\"></div>`,\n              className: ''\n            })\n          } else {\n            const pctFull = station.bikesAvailable / (station.bikesAvailable + station.spacesAvailable)\n            const i = Math.round(pctFull * 9)\n            icon = divIcon({\n              iconSize: [24, 24],\n              iconAnchor: [12, 24],\n              popupAnchor: [0, -12],\n              html: `<div class=\"bike-rental-hub-icon bike-rental-hub-icon-${i}\"></div>`,\n              className: ''\n            })\n          }\n          return (\n            <Marker\n              icon={icon}\n              key={station.id}\n              position={[station.y, station.x]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    {station.isFloatingBike\n                      ? <span>Floating bike: {station.name}</span>\n                      : <span>{station.name}</span>\n                    }\n                  </div>\n\n                  {/* Details */}\n                  {!station.isFloatingBike && (\n                    <div className='popup-row'>\n                      <div>Available bikes: {station.bikesAvailable}</div>\n                      <div>Available docks: {station.spacesAvailable}</div>\n                    </div>\n                  )}\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: station.y,\n                        lon: station.x,\n                        name: station.name\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stations: state.otp.overlay.bikeRental.stations\n  }\n}\n\nconst mapDispatchToProps = {\n  refreshStations: bikeRentalQuery,\n  setLocation\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BikeRentalOverlay)\n"]}