{"version":3,"sources":["park-and-ride-overlay.js"],"names":["ParkAndRideOverlay","props","parkAndRideQuery","locations","length","markerIcon","iconSize","popupAnchor","html","className","map","location","k","name","startsWith","substring","y","x","context","lat","lon","setLocation","MapLayer","propTypes","PropTypes","array","zipcarLocationsQuery","func","mapStateToProps","state","ownProps","otp","overlay","parkAndRide","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AAEA;;;;AACA;;AACA;;;;IAEMA,kB;;;;;;;;;;wCAOiB;AACnB,WAAKC,KAAL,CAAWC,gBAAX;AACD;;;2CAEuB,CAAE;;;2CAEF,CAAE;;;2CAEF,CAAE;;;6BAEhB;AAAA;;AAAA,UACAC,SADA,GACc,KAAKF,KADnB,CACAE,SADA;;AAER,UAAI,CAACA,SAAD,IAAcA,UAAUC,MAAV,KAAqB,CAAvC,EAA0C,OAAO,8BAAC,0BAAD,OAAP;;AAE1C,UAAMC,aAAa,sBAAQ;AACzBC,kBAAU,CAAC,EAAD,EAAK,EAAL,CADe;AAEzBC,qBAAa,CAAC,CAAD,EAAI,CAAC,EAAL,CAFY;AAGzBC,cAAM,iMAHmB;AAIzBC,mBAAW;AAJc,OAAR,CAAnB;;AAOA,aACE;AAAC,kCAAD;AAAA;AACGN,kBAAUO,GAAV,CAAc,UAACC,QAAD,EAAWC,CAAX,EAAiB;AAC9B,cAAMC,OAAOF,SAASE,IAAT,CAAcC,UAAd,CAAyB,MAAzB,IAAmCH,SAASE,IAAT,CAAcE,SAAd,CAAwB,CAAxB,CAAnC,GAAgEJ,SAASE,IAAtF;AACA,iBACE;AAAC,gCAAD;AAAA;AACE,oBAAMR,UADR;AAEE,mBAAKO,CAFP;AAGE,wBAAU,CAACD,SAASK,CAAV,EAAaL,SAASM,CAAtB;AAHZ;AAKE;AAAC,iCAAD;AAAA;AACE;AAAA;AAAA,kBAAK,WAAU,mBAAf;AAEE;AAAA;AAAA,oBAAK,WAAU,aAAf;AACGJ;AADH,iBAFF;AAOE;AAAA;AAAA,oBAAK,WAAU,WAAf;AACE,gDAAC,mBAAD;AACE,yBAAK,OAAKK,OAAL,CAAaR,GADpB;AAEE,8BAAU;AACRS,2BAAKR,SAASK,CADN;AAERI,2BAAKT,SAASM,CAFN;AAGRJ;AAHQ,qBAFZ;AAOE,iCAAa,OAAKZ,KAAL,CAAWoB;AAP1B;AADF;AAPF;AADF;AALF,WADF;AA6BD,SA/BA;AADH,OADF;AAoCD;;;EAhE8BC,sB,UACxBC,S,GAAY;AACjBpB,aAAWqB,iBAAUC,KADJ;AAEjBC,wBAAsBF,iBAAUG,IAFf;AAGjBN,eAAaG,iBAAUG;AAHN,C;;AAkErB;;AAEA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACL3B,eAAW0B,MAAME,GAAN,CAAUC,OAAV,CAAkBC,WAAlB,IAAiCJ,MAAME,GAAN,CAAUC,OAAV,CAAkBC,WAAlB,CAA8B9B;AADrE,GAAP;AAGD,CAJD;;AAMA,IAAM+B,qBAAqB;AACzBb,+BADyB;AAEzBnB;AAFyB,CAA3B;;kBAKe,yBAAQ0B,eAAR,EAAyBM,kBAAzB,EAA6ClC,kBAA7C,C","file":"park-and-ride-overlay.js","sourcesContent":["import React, { PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Marker, Popup } from 'react-leaflet'\nimport { divIcon } from 'leaflet'\n\nimport SetFromToButtons from './set-from-to'\nimport { setLocation } from '../../actions/map'\nimport { parkAndRideQuery } from '../../actions/api'\n\nclass ParkAndRideOverlay extends MapLayer {\n  static propTypes = {\n    locations: PropTypes.array,\n    zipcarLocationsQuery: PropTypes.func,\n    setLocation: PropTypes.func\n  }\n\n  componentDidMount () {\n    this.props.parkAndRideQuery()\n  }\n\n  componentWillUnmount () {}\n\n  createLeafletElement () {}\n\n  updateLeafletElement () {}\n\n  render () {\n    const { locations } = this.props\n    if (!locations || locations.length === 0) return <FeatureGroup />\n\n    const markerIcon = divIcon({\n      iconSize: [20, 20],\n      popupAnchor: [0, -10],\n      html: '<div style=\"width: 20px; height: 20px; background: #000; color: #fff; border-radius: 10px; font-weight: bold; font-size: 16px; padding-left: 4px; padding-top: 10px; line-height: 0px;\">P</div>',\n      className: ''\n    })\n\n    return (\n      <FeatureGroup>\n        {locations.map((location, k) => {\n          const name = location.name.startsWith('P+R ') ? location.name.substring(4) : location.name\n          return (\n            <Marker\n              icon={markerIcon}\n              key={k}\n              position={[location.y, location.x]}\n            >\n              <Popup>\n                <div className='map-overlay-popup'>\n                  {/* Popup title */}\n                  <div className='popup-title'>\n                    {name}\n                  </div>\n\n                  {/* Set as from/to toolbar */}\n                  <div className='popup-row'>\n                    <SetFromToButtons\n                      map={this.context.map}\n                      location={{\n                        lat: location.y,\n                        lon: location.x,\n                        name\n                      }}\n                      setLocation={this.props.setLocation}\n                    />\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          )\n        })}\n      </FeatureGroup>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    locations: state.otp.overlay.parkAndRide && state.otp.overlay.parkAndRide.locations\n  }\n}\n\nconst mapDispatchToProps = {\n  setLocation,\n  parkAndRideQuery\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParkAndRideOverlay)\n"]}