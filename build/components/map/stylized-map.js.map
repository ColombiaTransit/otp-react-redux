{"version":3,"sources":["stylized-map.js"],"names":["STYLES","places","display","place","getId","fill","stroke","r","stops_merged","data","index","utils","StylizedMap","el","document","getElementById","_transitive","Transitive","styles","gridCellSize","zoomFactors","minScale","internalVertexFactor","angleConstraint","mergeVertexThreshold","render","call","scaleExtent","on","setTransform","event","transform","nextProps","transitiveData","props","updateData","routingType","activeItinerary","focusJourney","journeys","journey_id","position","top","bottom","left","right","Component","propTypes","PropTypes","number","string","toggleLabel","element","object","defaultProps","toggleName","mapStateToProps","state","ownProps","activeSearch","otp","query","response","plan","itins","mapDispatchToProps"],"mappings":"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","file":"stylized-map.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { select, event } from 'd3-selection'\nimport { zoom } from 'd3-zoom'\n\nimport Transitive from 'transitive-js'\n\nimport { getActiveSearch, getActiveItineraries } from '../../util/state'\nimport { isBikeshareStation, itineraryToTransitive } from '../../util/map'\n\n\nvar STYLES = {}\n\nSTYLES.places = {\n  display: function (display, place) {\n    if (\n      place.getId() !== 'from' &&\n      place.getId() !== 'to' &&\n      !isBikeshareStation(place)\n    ) {\n      return 'none'\n    }\n  },\n  fill: '#fff',\n  stroke: '#000',\n  'stroke-width': 2,\n  r: 8\n}\n\nSTYLES.stops_merged = {\n  r: function (display, data, index, utils) {\n    return 6\n  }\n}\n\nclass StylizedMap extends Component {\n  static propTypes = {\n    activeItinerary: PropTypes.number,\n    routingType: PropTypes.string,\n    toggleLabel: PropTypes.element,\n    transitiveData: PropTypes.object\n  }\n\n  static defaultProps = {\n    toggleName: 'Stylized'\n  }\n\n  componentDidMount () {\n    const el = document.getElementById('trn-canvas')\n    this._transitive = new Transitive({\n      el,\n      display: 'svg',\n      styles: STYLES,\n      gridCellSize: 200,\n      zoomFactors: [\n        {\n          minScale: 0,\n          gridCellSize: 300,\n          internalVertexFactor: 1000000,\n          angleConstraint: 45,\n          mergeVertexThreshold: 200\n        }\n      ]\n    })\n    this._transitive.render()\n\n    select(el).call(zoom()\n      .scaleExtent([1 / 2, 4])\n      .on('zoom', () => {\n        this._transitive.setTransform(event.transform)\n      })\n    )\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.transitiveData !== this.props.transitiveData) {\n      this._transitive.updateData(nextProps.transitiveData, true)\n      this._transitive.render()\n    }\n\n    if ( // this block only applies for profile trips where active option changed\n      nextProps.routingType === 'PROFILE' &&\n      nextProps.activeItinerary !== this.props.activeItinerary\n    ) {\n      if (nextProps.activeItinerary == null) {\n        // no option selected; clear focus\n        this._transitive.focusJourney(null)\n        this._transitive.render()\n      } else if (nextProps.transitiveData) {\n        this._transitive.focusJourney(\n          nextProps.transitiveData.journeys[nextProps.activeItinerary]\n            .journey_id\n        )\n        this._transitive.render()\n      }\n    }\n  }\n\n  render () {\n    return (\n      <div\n        id='trn-canvas'\n        style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 }}\n      />\n    )\n  }\n}\n\n// connect to the redux store\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  let transitiveData = null\n  if (\n    activeSearch &&\n    activeSearch.query.routingType === 'ITINERARY' &&\n    activeSearch.response &&\n    activeSearch.response.plan\n  ) {\n    const itins = getActiveItineraries(state.otp)\n    transitiveData = itineraryToTransitive(itins[activeSearch.activeItinerary])\n  } else if (\n    activeSearch &&\n    activeSearch.response &&\n    activeSearch.response.otp\n  ) {\n    transitiveData = activeSearch.response.otp\n  }\n\n  return {\n    transitiveData,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    routingType: activeSearch && activeSearch.query && activeSearch.query.routingType\n  }\n}\n\nconst mapDispatchToProps = {}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StylizedMap)\n"]}