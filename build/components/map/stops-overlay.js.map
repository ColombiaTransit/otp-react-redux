{"version":3,"sources":["stops-overlay.js"],"names":["StopsOverlay","context","map","on","_refreshStops","getZoom","props","minZoom","forceUpdate","bounds","getBounds","equals","lastBounds","setTimeout","refreshStops","minLat","getSouth","maxLat","getNorth","minLon","getWest","maxLon","getEast","queryMode","setLocation","setViewedStop","setMainPanelContent","stops","mobileView","length","stop","id","MapLayer","propTypes","PropTypes","number","string","array","func","defaultProps","StopMarker","_onClickView","stopId","name","lat","lon","idArr","split","Component","bool","object","mapStateToProps","state","ownProps","otp","overlay","transit","currentQuery","mode","mapDispatchToProps","findStopsWithinBBox","clearStops"],"mappings":"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","file":"stops-overlay.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { FeatureGroup, MapLayer, Popup, CircleMarker } from 'react-leaflet'\nimport { Button } from 'react-bootstrap'\n\nimport SetFromToButtons from './set-from-to'\nimport { hasTransit } from '../../util/itinerary'\nimport { isMobile } from '../../util/ui'\nimport { findStopsWithinBBox, clearStops } from '../../actions/api'\nimport { setLocation } from '../../actions/map'\nimport { setViewedStop, setMainPanelContent } from '../../actions/ui'\n\nclass StopsOverlay extends MapLayer {\n  static propTypes = {\n    minZoom: PropTypes.number,\n    queryMode: PropTypes.string,\n    stops: PropTypes.array,\n    refreshStops: PropTypes.func\n  }\n\n  static defaultProps = {\n    minZoom: 15\n  }\n\n  componentDidMount () {\n    // set up pan/zoom listener\n    this.context.map.on('moveend', () => {\n      this._refreshStops()\n    })\n  }\n\n  // TODO: determine why the default MapLayer componentWillUnmount() method throws an error\n  componentWillUnmount () { }\n\n  _refreshStops () {\n    if (this.context.map.getZoom() < this.props.minZoom) {\n      this.forceUpdate()\n      return\n    }\n\n    const bounds = this.context.map.getBounds()\n    if (!bounds.equals(this.lastBounds)) {\n      setTimeout(() => {\n        this.props.refreshStops({\n          minLat: bounds.getSouth(),\n          maxLat: bounds.getNorth(),\n          minLon: bounds.getWest(),\n          maxLon: bounds.getEast()\n        })\n        this.lastBounds = bounds\n      }, 300)\n    }\n  }\n\n  createLeafletElement () {\n  }\n\n  updateLeafletElement () {\n  }\n\n  render () {\n    const { minZoom, queryMode, setLocation, setViewedStop, setMainPanelContent, stops } = this.props\n    const mobileView = isMobile()\n    // don't render if below zoom threshold or transit not currently selected\n    if (\n      this.context.map.getZoom() < minZoom ||\n      !hasTransit(queryMode) ||\n      !stops ||\n      stops.length === 0\n    ) return <FeatureGroup />\n\n    return (\n      <FeatureGroup>\n        {stops.map((stop) => (\n          <StopMarker\n            key={stop.id}\n            stop={stop}\n            mobileView={mobileView}\n            setLocation={setLocation}\n            setViewedStop={setViewedStop}\n            setMainPanelContent={setMainPanelContent}\n          />\n        ))}\n      </FeatureGroup>\n    )\n  }\n}\n\nclass StopMarker extends Component {\n  static propTypes = {\n    mobileView: PropTypes.bool,\n    setLocation: PropTypes.func,\n    setViewedStop: PropTypes.func,\n    setMainPanelContent: PropTypes.func,\n    stop: PropTypes.object\n  }\n\n  _onClickView = () => {\n    this.props.setMainPanelContent(null)\n    this.props.setViewedStop({ stopId: this.props.stop.id })\n  }\n\n  render () {\n    const { mobileView, setLocation, stop } = this.props\n    const { id, name, lat, lon } = stop\n    const idArr = id.split(':')\n    return (\n      <CircleMarker\n        key={id}\n        center={[lat, lon]}\n        radius={mobileView ? 10 : 4}\n        fillOpacity={1}\n        fillColor='#fff'\n        color='#000'\n        weight={1.5}\n      >\n        <Popup>\n          <div className='map-overlay-popup'>\n            <div className='popup-title'>{name}</div>\n\n            <div className='popup-row'><b>Agency:</b> {idArr[0]}</div>\n            <div className='popup-row'>\n              <span><b>Stop ID:</b> {idArr[1]}</span>\n              {/* The Stop Viewer button\n                * Note: we use a vanilla Button instead of ViewStopButton because\n                * connected components don't work within react-leaflet Popups)\n                * TODO: Make ViewStopButton work here, perhaps w/ React 16 portals\n                */}\n              <Button\n                className='view-stop-button'\n                bsSize='xsmall'\n                onClick={this._onClickView}\n              >Stop Viewer</Button>\n            </div>\n\n            {/* The \"Set as [from/to]\" ButtonGroup */}\n            <div className='popup-row'>\n              <SetFromToButtons\n                map={this.context.map}\n                location={{ lat, lon, name }}\n                setLocation={setLocation}\n              />\n            </div>\n          </div>\n        </Popup>\n      </CircleMarker>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stops: state.otp.overlay.transit.stops,\n    queryMode: state.otp.currentQuery.mode\n  }\n}\n\nconst mapDispatchToProps = {\n  refreshStops: findStopsWithinBBox,\n  clearStops,\n  setLocation,\n  setViewedStop,\n  setMainPanelContent\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StopsOverlay)\n"]}