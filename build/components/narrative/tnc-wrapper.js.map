{"version":3,"sources":["tnc-wrapper.js"],"names":["TNCWrapper","state","_resolveTncData","props","nextProps","isMounting","companies","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate","leg","tncData","from","to","rideType","defaultTncRideTypes","now","Date","getTime","stateUpdate","eta","rideEstimate","hasTncEtaData","etaEstimates","tncEtaDataIsValid","estimateTimestamp","noEtaEstimateAvailable","hasTncRideData","rideEstimates","tncRideDataIsValid","company","noRideEstimateAvailable","setState","React","createElement","componentClass","Component","propTypes","PropTypes","object","legMode","mapStateToProps","ownProps","otp","config","LYFT_CLIENT_ID","UBER_CLIENT_ID","currentQuery","tnc","mapDispatchToProps"],"mappings":"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","file":"tnc-wrapper.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../actions/api'\n\nimport { getTNCLocation } from '../../util/itinerary'\n\nclass TNCWrapper extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.object\n  }\n\n  state = {}\n\n  componentWillMount () {\n    this._resolveTncData(this.props, true)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this._resolveTncData(nextProps)\n  }\n\n  _resolveTncData (props, isMounting) {\n    const {\n      companies,\n      getTransportationNetworkCompanyEtaEstimate,\n      getTransportationNetworkCompanyRideEstimate,\n      leg,\n      tncData\n    } = props\n    const from = getTNCLocation(leg, 'from')\n    const to = getTNCLocation(leg, 'to')\n    const rideType = defaultTncRideTypes[companies]\n    const now = (new Date()).getTime()\n\n    const stateUpdate = {\n      eta: null,\n      rideEstimate: null\n    }\n\n    const hasTncEtaData = tncData.etaEstimates[from] &&\n      tncData.etaEstimates[from][companies] &&\n      tncData.etaEstimates[from][companies][rideType]\n\n    const tncEtaDataIsValid = hasTncEtaData &&\n      tncData.etaEstimates[from][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncEtaData && tncEtaDataIsValid) {\n      stateUpdate.eta = tncData.etaEstimates[from][companies][rideType]\n    } else if (isMounting || (hasTncEtaData && !tncEtaDataIsValid)) {\n      getTransportationNetworkCompanyEtaEstimate({\n        companies, from\n      })\n    } else {\n      stateUpdate.noEtaEstimateAvailable = true\n    }\n\n    const hasTncRideData = tncData.rideEstimates[from] &&\n      tncData.rideEstimates[from][to] &&\n      tncData.rideEstimates[from][to][companies] &&\n      tncData.rideEstimates[from][to][companies][rideType]\n\n    const tncRideDataIsValid = hasTncRideData &&\n      tncData.rideEstimates[from][to][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncRideData && tncRideDataIsValid) {\n      stateUpdate.rideEstimate = tncData.rideEstimates[from][to][companies][rideType]\n    } else if (isMounting || (hasTncRideData && !tncRideDataIsValid)) {\n      getTransportationNetworkCompanyRideEstimate({\n        company: companies, from, rideType, to\n      })\n    } else {\n      stateUpdate.noRideEstimateAvailable = true\n    }\n\n    this.setState(stateUpdate)\n  }\n\n  render () {\n    const {eta, noEtaEstimateAvailable, noRideEstimateAvailable, rideEstimate} = this.state\n    return React.createElement(this.props.componentClass, {\n      eta,\n      noEtaEstimateAvailable,\n      rideEstimate,\n      noRideEstimateAvailable,\n      ...this.props\n    })\n  }\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {LYFT_CLIENT_ID, UBER_CLIENT_ID} = state.otp.config\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc,\n    LYFT_CLIENT_ID,\n    UBER_CLIENT_ID\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TNCWrapper)\n"]}