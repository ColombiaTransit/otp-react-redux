{"version":3,"sources":["tnc-leg.js"],"names":["TransportationNetworkCompanyLeg","state","props","leg","legMode","LYFT_CLIENT_ID","UBER_CLIENT_ID","universalLinks","from","lat","lon","encodeURI","name","to","defaultTncRideTypes","tncData","label","toUpperCase","marginBottom","estimatedArrival","minCost","currencyFormatter","format","code","currency","maxCost","Component","propTypes","PropTypes","object","mapStateToProps","ownProps","otp","config","companies","currentQuery","tnc","mapDispatchToProps","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;AAIA;;AACA;;AACA;;;;IAEMA,+B;;;;;;;;;;;;;;8PAMJC,K,GAAQ,E;;;;;6BAEE;AAAA,mBACiD,KAAKC,KADtD;AAAA,UACAC,GADA,UACAA,GADA;AAAA,UACKC,OADL,UACKA,OADL;AAAA,UACcC,cADd,UACcA,cADd;AAAA,UAC8BC,cAD9B,UAC8BA,cAD9B;;AAER,UAAMC,iBAAiB;AACrB,yCAA8B,sBAAa,KAAb,GAAqB,EAAnD,oBAAmED,cAAnE,2CAAuHH,IAAIK,IAAJ,CAASC,GAAhI,2BAAyJN,IAAIK,IAAJ,CAASE,GAAlK,0BAA0LC,UAAUR,IAAIK,IAAJ,CAASI,IAAnB,CAA1L,2BAAwOT,IAAIU,EAAJ,CAAOJ,GAA/O,4BAAyQN,IAAIU,EAAJ,CAAOH,GAAhR,2BAAySC,UAAUR,IAAIU,EAAJ,CAAOD,IAAjB,CADpR;AAErB,8CAAoCE,oBAAoB,MAApB,CAApC,iBAA2ET,cAA3E,0BAA8GF,IAAIK,IAAJ,CAASC,GAAvH,2BAAgJN,IAAIK,IAAJ,CAASE,GAAzJ,+BAAsLP,IAAIU,EAAJ,CAAOJ,GAA7L,gCAA2NN,IAAIU,EAAJ,CAAOH;AAF7M,OAAvB;AAFQ,UAMAK,OANA,GAMYZ,GANZ,CAMAY,OANA;;AAOR,aACE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE;AAAA;AAAA;AACE,uBAAU,iBADZ;AAEE,kBAAMR,eAAeH,QAAQY,KAAR,CAAcC,WAAd,EAAf,CAFR;AAGE,mBAAO,EAAEC,cAAc,EAAhB,EAHT;AAIE,oBAAQ,sBAAa,OAAb,GAAuB,QAJjC;AAAA;AAAA,SAFF;AASGH,mBAAWA,QAAQI,gBAAnB,GACG;AAAA;AAAA;AAAA;AAAsB,oCAAeJ,QAAQI,gBAAvB;AAAtB,SADH,GAEG;AAAA;AAAA;AAAA;AAAuC,yCAAef,QAAQY,KAAvB,CAAvC;AAAA;AAAA,SAXN;AAeGD,mBAAWA,QAAQK,OAAnB,GACG;AAAA;AAAA;AAAA;AACGC,sCAAkBC,MAAlB,CAAyBP,QAAQK,OAAjC,EAA0C,EAAEG,MAAMR,QAAQS,QAAhB,EAA1C,CADH,WAC8EH,4BAAkBC,MAAlB,CAAyBP,QAAQU,OAAjC,EAA0C,EAAEF,MAAMR,QAAQS,QAAhB,EAA1C;AAD9E,SADH,GAIG;AAAA;AAAA;AAAA;AAAwC,yCAAepB,QAAQY,KAAvB,CAAxC;AAAA;AAAA,SAnBN;AAAA;AAAA,OADF;AAwBD;;;EAvC2CU,gB,UACrCC,S,GAAY;AACjBxB,OAAKyB,iBAAUC,MADE;AAEjBzB,WAASwB,iBAAUC;AAFF,C;;;AAyCrB,IAAMf,sBAAsB;AAC1B,UAAQ,MADkB;AAE1B,UAAQ;AAFkB,CAA5B;;AAKA,IAAMgB,kBAAkB,SAAlBA,eAAkB,CAAC7B,KAAD,EAAQ8B,QAAR,EAAqB;AAAA,0BACA9B,MAAM+B,GAAN,CAAUC,MADV;AAAA,MACnC5B,cADmC,qBACnCA,cADmC;AAAA,MACnBC,cADmB,qBACnBA,cADmB;;AAE3C,SAAO;AACL4B,eAAWjC,MAAM+B,GAAN,CAAUG,YAAV,CAAuBD,SAD7B;AAELnB,aAASd,MAAM+B,GAAN,CAAUI,GAFd;AAGL/B,kCAHK;AAILC;AAJK,GAAP;AAMD,CARD;;AAUA,IAAM+B,qBAAqB;AACzBC,6FADyB;AAEzBC;AAFyB,CAA3B;;kBAKe,yBAAQT,eAAR,EAAyBO,kBAAzB,EAA6CrC,+BAA7C,C","file":"tnc-leg.js","sourcesContent":["import currencyFormatter from 'currency-formatter'\nimport React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../../actions/api'\nimport { toSentenceCase } from '../../../util/itinerary'\nimport { formatDuration } from '../../../util/time'\nimport { isMobile } from '../../../util/ui'\n\nclass TransportationNetworkCompanyLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.object\n  }\n\n  state = {}\n\n  render () {\n    const { leg, legMode, LYFT_CLIENT_ID, UBER_CLIENT_ID } = this.props\n    const universalLinks = {\n      'UBER': `https://m.uber.com/${isMobile() ? 'ul/' : ''}?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&pickup[nickname]=${encodeURI(leg.from.name)}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${leg.to.lon}&dropoff[nickname]=${encodeURI(leg.to.name)}`,\n      'LYFT': `https://lyft.com/ride?id=${defaultTncRideTypes['LYFT']}&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n    }\n    const { tncData } = leg\n    return (\n      <div>\n        <p>* estimated travel time does not account for traffic.</p>\n        <a\n          className='btn btn-default'\n          href={universalLinks[legMode.label.toUpperCase()]}\n          style={{ marginBottom: 15 }}\n          target={isMobile() ? '_self' : '_blank'}>\n          Book Ride\n        </a>\n        {tncData && tncData.estimatedArrival\n          ? <p>ETA for a driver: {formatDuration(tncData.estimatedArrival)}</p>\n          : <p>Could not obtain eta estimate from {toSentenceCase(legMode.label)}!</p>\n        }\n        {/* tncData && tncData.travelDuration &&\n          <p>Estimated drive time: {formatDuration(tncData.travelDuration)}</p> */}\n        {tncData && tncData.minCost\n          ? <p>Estimated cost: {\n            `${currencyFormatter.format(tncData.minCost, { code: tncData.currency })} - ${currencyFormatter.format(tncData.maxCost, { code: tncData.currency })}`\n          }</p>\n          : <p>Could not obtain ride estimate from {toSentenceCase(legMode.label)}!</p>}\n        }\n      </div>\n    )\n  }\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { LYFT_CLIENT_ID, UBER_CLIENT_ID } = state.otp.config\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc,\n    LYFT_CLIENT_ID,\n    UBER_CLIENT_ID\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransportationNetworkCompanyLeg)\n"]}