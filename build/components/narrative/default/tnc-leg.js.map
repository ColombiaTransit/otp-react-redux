{"version":3,"sources":["tnc-leg.js"],"names":["TransportationNetworkCompanyLeg","state","_resolveTncData","props","nextProps","isMounting","companies","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate","leg","tncData","from","getTNCLocation","to","rideType","defaultTncRideTypes","now","Date","getTime","stateUpdate","eta","rideEstimate","hasTncEtaData","etaEstimates","tncEtaDataIsValid","estimateTimestamp","noEtaEstimateAvailable","hasTncRideData","rideEstimates","tncRideDataIsValid","company","noRideEstimateAvailable","setState","legMode","LYFT_CLIENT_ID","UBER_CLIENT_ID","universalLinks","lat","lon","encodeURI","name","label","toUpperCase","marginBottom","estimatedSeconds","currencyFormatter","format","minCost","code","currency","maxCost","Component","propTypes","PropTypes","object","type","location","toFixed","mapStateToProps","ownProps","otp","config","currentQuery","tnc","mapDispatchToProps"],"mappings":"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","file":"tnc-leg.js","sourcesContent":["import currencyFormatter from 'currency-formatter'\nimport React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../../actions/api'\nimport { toSentenceCase } from '../../../util/itinerary'\nimport { formatDuration } from '../../../util/time'\nimport { isMobile } from '../../../util/ui'\n\nclass TransportationNetworkCompanyLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.object\n  }\n\n  state = {}\n\n  componentWillMount () {\n    this._resolveTncData(this.props, true)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this._resolveTncData(nextProps)\n  }\n\n  _resolveTncData (props, isMounting) {\n    const {\n      companies,\n      getTransportationNetworkCompanyEtaEstimate,\n      getTransportationNetworkCompanyRideEstimate,\n      leg,\n      tncData\n    } = props\n    const from = getTNCLocation(leg, 'from')\n    const to = getTNCLocation(leg, 'to')\n    const rideType = defaultTncRideTypes[companies]\n    const now = (new Date()).getTime()\n\n    const stateUpdate = {\n      eta: null,\n      rideEstimate: null\n    }\n\n    const hasTncEtaData = tncData.etaEstimates[from] &&\n      tncData.etaEstimates[from][companies] &&\n      tncData.etaEstimates[from][companies][rideType]\n\n    const tncEtaDataIsValid = hasTncEtaData &&\n      tncData.etaEstimates[from][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncEtaData && tncEtaDataIsValid) {\n      stateUpdate.eta = tncData.etaEstimates[from][companies][rideType]\n    } else if (isMounting || (hasTncEtaData && !tncEtaDataIsValid)) {\n      getTransportationNetworkCompanyEtaEstimate({\n        companies, from\n      })\n    } else {\n      stateUpdate.noEtaEstimateAvailable = true\n    }\n\n    const hasTncRideData = tncData.rideEstimates[from] &&\n      tncData.rideEstimates[from][to] &&\n      tncData.rideEstimates[from][to][companies] &&\n      tncData.rideEstimates[from][to][companies][rideType]\n\n    const tncRideDataIsValid = hasTncRideData &&\n      tncData.rideEstimates[from][to][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncRideData && tncRideDataIsValid) {\n      stateUpdate.rideEstimate = tncData.rideEstimates[from][to][companies][rideType]\n    } else if (isMounting || (hasTncRideData && !tncRideDataIsValid)) {\n      getTransportationNetworkCompanyRideEstimate({\n        company: companies, from, rideType, to\n      })\n    } else {\n      stateUpdate.noRideEstimateAvailable = true\n    }\n\n    this.setState(stateUpdate)\n  }\n\n  render () {\n    const {leg, legMode, LYFT_CLIENT_ID, UBER_CLIENT_ID} = this.props\n    const universalLinks = {\n      'UBER': `https://m.uber.com/${isMobile() ? 'ul/' : ''}?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&pickup[nickname]=${encodeURI(leg.from.name)}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${leg.to.lon}&dropoff[nickname]=${encodeURI(leg.to.name)}`,\n      'LYFT': `https://lyft.com/ride?id=${defaultTncRideTypes['LYFT']}&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n    }\n    const {eta, noEtaEstimateAvailable, noRideEstimateAvailable, rideEstimate} = this.state\n    return (\n      <div>\n        <p>* estimated travel time does not account for traffic.</p>\n        <a\n          className='btn btn-default'\n          href={universalLinks[legMode.label.toUpperCase()]}\n          style={{marginBottom: 15}}\n          target={isMobile() ? '_self' : '_blank'}\n          >\n          Book Ride\n        </a>\n        {!eta && !noEtaEstimateAvailable &&\n          <p>Getting eta estimate from {toSentenceCase(legMode.label)}...</p>}\n        {!eta && noEtaEstimateAvailable &&\n          <p>Could not obtain eta estimate from {toSentenceCase(legMode.label)}!</p>}\n        {eta &&\n          <p>ETA for a driver: {formatDuration(eta.estimatedSeconds)}</p>}\n        {!rideEstimate && !noRideEstimateAvailable &&\n          <p>Getting ride estimate from {toSentenceCase(legMode.label)}...</p>}\n        {!rideEstimate && noRideEstimateAvailable &&\n          <p>Could not obtain ride estimate from {toSentenceCase(legMode.label)}!</p>}\n        {/*rideEstimate &&\n          <p>Estimated drive time: {formatDuration(rideEstimate.duration)}</p>*/}\n        {rideEstimate &&\n          <p>Estimated cost: {\n            `${currencyFormatter.format(rideEstimate.minCost, { code: rideEstimate.currency })} - ${currencyFormatter.format(rideEstimate.maxCost, { code: rideEstimate.currency })}`\n          }</p>}\n      </div>\n    )\n  }\n}\n\nfunction getTNCLocation (leg, type) {\n  const location = leg[type]\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {LYFT_CLIENT_ID, UBER_CLIENT_ID} = state.otp.config\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc,\n    LYFT_CLIENT_ID,\n    UBER_CLIENT_ID\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransportationNetworkCompanyLeg)\n"]}