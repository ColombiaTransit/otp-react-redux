{"version":3,"sources":["transit-leg.js"],"names":["TransitLeg","props","_onClick","setState","expanded","state","e","leg","index","active","setActiveLeg","numStops","to","stopIndex","from","_onLegClick","mode","routeShortName","routeLongName","headsign","realTime","startTime","backgroundColor","float","stopId","formatLocation","name","tripId","duration","clear","intermediateStops","map","s","i","alerts","alert","alertDescriptionText","alertUrl","agencyUrl","agencyName","endTime","Component","propTypes","itinerary","PropTypes","object","str","trim","toLowerCase","replace","split","includes","toUpperCase","capitalizeFirst","join","charAt","slice"],"mappings":"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","file":"transit-leg.js","sourcesContent":["import Icon from '../icon'\nimport React, { Component, PropTypes } from 'react'\n\nimport ModeIcon from '../../icons/mode-icon'\nimport ViewTripButton from '../../viewers/view-trip-button'\nimport ViewStopButton from '../../viewers/view-stop-button'\n\nimport { getMapColor } from '../../../util/itinerary'\nimport { formatDuration, formatTime } from '../../../util/time'\n\nexport default class TransitLeg extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _onLegClick (e, leg, index) {\n    if (this.props.active) {\n      this.props.setActiveLeg(null)\n    } else {\n      this.props.setActiveLeg(index, leg)\n    }\n  }\n\n  _onClick = () => {\n    this.setState({expanded: !this.state.expanded})\n  }\n\n  render () {\n    const { active, index, leg } = this.props\n    const { expanded } = this.state\n    const numStops = leg.to.stopIndex - leg.from.stopIndex - 1\n\n    return (\n      <div\n        className={`leg${active ? ' active' : ''} transit-leg`}>\n        <button\n          className={`header`}\n          onClick={(e) => this._onLegClick(e, leg, index)}\n          >\n          <div className='mode-icon-container'>\n            <ModeIcon mode={leg.mode} />\n          </div>\n          <div className='route-name'>\n            <div>\n              {leg.routeShortName && <span className='route-short-name'>{leg.routeShortName}</span>}\n              {leg.routeLongName && <span className='route-long-name'>{leg.routeLongName}</span>}\n            </div>\n            {leg.headsign && <div className='headsign'>To {leg.headsign}</div>}\n          </div>\n          {leg.realTime ? <Icon type='rss' /> : null}\n        </button>\n        <div className='step-by-step'>\n          <div className='transit-leg-body'>\n\n            {/* 'from' Stop Row */}\n            <div className='from-row'>\n              <div className='time-cell'>{formatTime(leg.startTime)}</div>\n              <div className='trip-line-cell'>\n                <div className='trip-line-top' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                <div className='stop-bubble' />\n              </div>\n              <div className='stop-name-cell'>\n                <div style={{ float: 'right' }}>\n                  <ViewStopButton stopId={leg.from.stopId} />\n                </div>\n                {formatLocation(leg.from.name)}\n              </div>\n            </div>\n\n            {/* Trip Details Row (intermediate stops, alerts, etc.) ${getMapColor(leg.mode)} */}\n            <div className='trip-details-row'>\n              <div className='time-cell' />\n              <div className='trip-line-cell'>\n                <div className='trip-line-middle' style={{ backgroundColor: getMapColor(leg.mode) }} />\n              </div>\n              <div className='trip-details-cell'>\n                {/* Intermediate Stops (expandable) */}\n                <div className='intermediate-stops'>\n                  <div>\n                    {/* Trip Viewer Button */}\n                    <div style={{float: 'right'}}>\n                      <ViewTripButton\n                        tripId={leg.tripId}\n                        fromIndex={leg.from.stopIndex}\n                        toIndex={leg.to.stopIndex}\n                      />\n                    </div>\n\n                    {/* Expand Stops Button */}\n                    <button className='clear-button-formatting' onClick={this._onClick}>\n                      <Icon type={`caret-${expanded ? 'down' : 'right'}`} />\n                      <span className='transit-duration'>{formatDuration(leg.duration)}</span>\n                      {' '}\n                      ({numStops ? `${numStops} stops` : 'non-stop'})\n                    </button>\n                    <div style={{ clear: 'both' }} />\n                  </div>\n\n                  {/* Expanded Stops */}\n                  {expanded &&\n                    <div>\n                      <div className='stop-list'>\n                        {leg.intermediateStops.map((s, i) => (\n                          <div key={i} className='stop-item item'>\n                            <div className='trip-line-stop' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                            <span className='stop-name'>{formatLocation(s.name)}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  }\n                </div>\n\n                {/* Service Alerts for Leg */}\n                {leg.alerts &&\n                  <div>\n                    <div className='item'><Icon type='exclamation-circle' /> Information</div>\n                    {expanded &&\n                      <div>\n                        {leg.alerts.map((alert, i) => (\n                          <div className='alert-item item' key={i}>\n                            {alert.alertDescriptionText}\n                            {' '}\n                            {alert.alertUrl ? <a target='_blank' href={alert.alertUrl}>more info</a> : null}\n                          </div>\n                        ))}\n                      </div>\n                    }\n                  </div>\n                }\n\n                {/* General Info */}\n                <div className='item info-item'>\n                  <span className='agency-info'>Service operated by <a href={leg.agencyUrl}>{leg.agencyName}</a></span>\n                  {\n                    // route info included?\n                    // <span className='route-info'><a target='_blank' href={leg.routeUrl}>Route information</a></span>\n                  }\n                </div>\n              </div>\n            </div>\n\n            {/* 'to' stop row */}\n            <div className='to-row'>\n              <div className='time-cell'>{formatTime(leg.endTime)}</div>\n              <div className='trip-line-cell'>\n                <div className='trip-line-bottom' style={{ backgroundColor: getMapColor(leg.mode) }} />\n                <div className='stop-bubble' />\n              </div>\n              <div className='stop-name-cell'>\n                <div style={{ float: 'right' }}>\n                  <ViewStopButton stopId={leg.to.stopId} />\n                </div>\n                {formatLocation(leg.to.name)}\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction formatLocation (str) {\n  return str\n    .trim()\n    .toLowerCase()\n    .replace('/', ' / ')\n    .replace('-', ' - ')\n    .replace('@', ' @ ')\n    .replace('(', '( ')\n    .replace('  ', ' ')\n    .split(' ')\n    .map(s => {\n      if (['ne', 'sw', 'nw', 'se'].includes(s)) return s.toUpperCase()\n      return capitalizeFirst(s)\n    })\n    .join(' ')\n    .replace('( ', '(')\n}\n\nfunction capitalizeFirst (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n"]}