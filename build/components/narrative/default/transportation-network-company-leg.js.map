{"version":3,"sources":["transportation-network-company-leg.js"],"names":["TransportationNetworkCompanyLeg","state","_resolveTncData","props","nextProps","companies","getTransportationNetworkCompanyEtaEstimate","getTransportationNetworkCompanyRideEstimate","leg","tncData","from","getTNCLocation","to","rideType","defaultTncRideTypes","now","Date","getTime","stateUpdate","eta","rideEstimate","hasTncEtaData","etaEstimates","estimateTimestamp","hasTncRideData","rideEstimates","company","setState","legMode","label","estimatedSeconds","duration","format","minCost","code","currency","maxCost","propTypes","Object","type","location","lat","toFixed","lon","mapStateToProps","ownProps","otp","currentQuery","tnc","mapDispatchToProps"],"mappings":"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","file":"transportation-network-company-leg.js","sourcesContent":["import currencyFormatter from 'currency-formatter'\nimport React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n} from '../../actions/api'\nimport { toSentenceCase } from '../../../util/itinerary'\nimport { formatDuration } from '../../../util/time'\n\nclass TransportationNetworkCompanyLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.Object,\n    legMode: PropTypes.Object\n  }\n\n  state = {}\n\n  componentWillMount () {\n    this._resolveTncData(this.props)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this._resolveTncData(nextProps)\n  }\n\n  _resolveTncData (props) {\n    const {\n      companies,\n      getTransportationNetworkCompanyEtaEstimate,\n      getTransportationNetworkCompanyRideEstimate,\n      leg,\n      tncData\n    } = this.props\n    const from = getTNCLocation(leg, 'from')\n    const to = getTNCLocation(leg, 'to')\n    const rideType = defaultTncRideTypes[companies]\n    const now = (new Date()).getTime()\n\n    const stateUpdate = {\n      eta: null,\n      rideEstimate: null\n    }\n\n    const hasTncEtaData = tncData.etaEstimates[from] &&\n      tncData.etaEstimates[from][companies] &&\n      tncData.etaEstimates[from][companies][rideType] &&\n      tncData.etaEstimates[from][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncEtaData) {\n      stateUpdate.eta = tncData.etaEstimates[from][companies][rideType]\n    } else {\n      getTransportationNetworkCompanyEtaEstimate({\n        companies, from\n      })\n    }\n\n    const hasTncRideData = tncData.rideEstimates[from] &&\n      tncData.rideEstimates[from][to] &&\n      tncData.rideEstimates[from][to][companies] &&\n      tncData.rideEstimates[from][to][companies][rideType] &&\n      tncData.rideEstimates[from][to][companies][rideType].estimateTimestamp.getTime() + 30000 > now\n\n    if (hasTncRideData) {\n      stateUpdate.rideEstimate = tncData.rideEstimates[from][to][companies][rideType]\n    } else {\n      getTransportationNetworkCompanyRideEstimate({\n        company: companies, from, rideType, to\n      })\n    }\n\n    this.setState(stateUpdate)\n  }\n\n  render () {\n    const {legMode} = this.props\n    const {eta, rideEstimate} = this.state\n    return (\n      <div>\n        <p>* estimated travel time does not account for traffic.</p>\n        {!eta &&\n          <p>Getting eta estimate from {toSentenceCase(legMode.label)}...</p>}\n        {eta &&\n          <p>Eta for a driver: {formatDuration(eta.estimatedSeconds)}</p>}\n        {!rideEstimate &&\n          <p>Getting ride estimate from {toSentenceCase(legMode.label)}...</p>}\n        {rideEstimate &&\n          <p>Estimated drive time: {formatDuration(rideEstimate.duration)}</p>}\n        {rideEstimate &&\n          <p>Estimated cost: {\n            currencyFormatter.format(rideEstimate.minCost, { code: rideEstimate.currency }) -\n            currencyFormatter.format(rideEstimate.maxCost, { code: rideEstimate.currency })\n          }</p>}\n      </div>\n    )\n  }\n}\n\nfunction getTNCLocation (leg, type) {\n  const location = leg[type]\n  return `${location.lat.toFixed(5)},${location.lon.toFixed(5)}`\n}\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    companies: state.otp.currentQuery.companies,\n    tncData: state.otp.tnc\n  }\n}\n\nconst mapDispatchToProps = {\n  getTransportationNetworkCompanyEtaEstimate,\n  getTransportationNetworkCompanyRideEstimate\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransportationNetworkCompanyLeg)\n"]}