{"version":3,"sources":["tabbed-itineraries.js"],"names":["TabbedItineraries","_toggleRealtimeItineraryClick","e","props","setUseRealtimeResponse","useRealtime","activeItinerary","itineraries","itineraryClass","realtimeEffects","showRealtimeAnnotation","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","map","itinerary","index","timeOptions","format","offset","classNames","caloriesBurned","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","plus","push","join","setActiveItinerary","duration","startTime","endTime","Math","round","transfers","React","createElement","key","active","routingType","Component","propTypes","PropTypes","array","func","pending","bool","number","setActiveLeg","setActiveStep","defaultProps","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","companies","currentQuery","tnc","mapDispatchToProps","dispatch","leg","step"],"mappings":"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","file":"tabbed-itineraries.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\n\nimport { setActiveItinerary, setActiveLeg, setActiveStep, setUseRealtimeResponse } from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveItineraries, getActiveSearch, getRealtimeEffects } from '../../util/state'\nimport { calculateFares, calculatePhysicalActivity, getTimeZoneOffset } from '../../util/itinerary'\nimport { formatDuration, formatTime } from '../../util/time'\n\nclass TabbedItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.bool,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const { setUseRealtimeResponse, useRealtime } = this.props\n    setUseRealtimeResponse({ useRealtime: !useRealtime })\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      useRealtime\n    } = this.props\n    if (!itineraries) return null\n\n    /* TODO: should this be moved? */\n    const showRealtimeAnnotation =\n      realtimeEffects.isAffectedByRealtimeData && (\n        realtimeEffects.exceedsThreshold ||\n        realtimeEffects.routesDiffer ||\n        !useRealtime\n      )\n\n    return (\n      <div className='options itinerary tabbed-itineraries'>\n        <div className='tab-row'>\n          {itineraries.map((itinerary, index) => {\n            const timeOptions = {\n              format: 'h:mm a', // TODO: make configurable\n              offset: getTimeZoneOffset(itinerary)\n            }\n            const classNames = ['tab-button', 'clear-button-formatting']\n            const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n            const {\n              centsToString,\n              maxTNCFare,\n              minTNCFare,\n              transitFare\n            } = calculateFares(itinerary)\n            // TODO: support non-USD\n            let minTotalFare = minTNCFare * 100 + transitFare\n            const plus = maxTNCFare && maxTNCFare > minTNCFare ? '+' : ''\n            if (index === activeItinerary) classNames.push('selected')\n            return (\n              <Button\n                key={`tab-button-${index}`}\n                className={classNames.join(' ')}\n                onClick={() => { this.props.setActiveItinerary(index) }}\n              >\n                <div className='title'><span>Option {index + 1}</span></div>\n                <div className='details'>\n                  {/* The itinerary duration in hrs/mins */}\n                  {formatDuration(itinerary.duration)}\n\n                  {/* The duration as a time range */}\n                  <span>\n                    <br />\n                    {formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}\n                  </span>\n\n                  {/* the fare / calories summary line */}\n                  <span>\n                    <br />\n                    {minTotalFare ? <span>{`${centsToString(minTotalFare)}${plus}`} &bull; </span> : ''}\n                    {Math.round(caloriesBurned)} Cal\n                  </span>\n\n                  {/* The 'X tranfers' line, if applicable */}\n                  {itinerary.transfers > 0 && (\n                    <span>\n                      <br />\n                      {itinerary.transfers} transfer{itinerary.transfers > 1 ? 's' : ''}\n                    </span>\n                  )}\n                </div>\n              </Button>\n            )\n          })}\n        </div>\n\n        {/* <RealtimeAnnotation\n          realtimeEffects={realtimeEffects}\n          toggleRealtime={this._toggleRealtimeItineraryClick}\n          useRealtime={useRealtime} />\n        */}\n\n        {/* Show the active itinerary */}\n        {(activeItinerary !== null) && React.createElement(itineraryClass, {\n          itinerary: itineraries[activeItinerary],\n          index: activeItinerary,\n          key: activeItinerary,\n          active: true,\n          routingType: 'ITINERARY',\n          showRealtimeAnnotation,\n          ...this.props\n        })}\n\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const itineraries = getActiveItineraries(state.otp)\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    itineraries,\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies,\n    tnc: state.otp.tnc\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setActiveItinerary: index => {\n      dispatch(setActiveItinerary({index}))\n    },\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  TabbedItineraries\n)\n"]}