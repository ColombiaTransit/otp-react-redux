{"version":3,"sources":["tabbed-itineraries.js"],"names":["coreUtils","itinerary","calculateFares","calculatePhysicalActivity","getTimeZoneOffset","time","formatDuration","formatTime","getTimeFormat","TabbedItineraries","e","props","setUseRealtimeResponse","useRealtime","activeItinerary","itineraries","itineraryClass","realtimeEffects","timeFormat","showRealtimeAnnotation","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","map","index","timeOptions","format","offset","classNames","caloriesBurned","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","plus","push","join","setActiveItinerary","duration","startTime","endTime","Math","round","transfers","React","createElement","key","active","routingType","Component","PropTypes","array","func","pending","bool","number","setActiveLeg","setActiveStep","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","companies","currentQuery","tnc","config","mapDispatchToProps","dispatch","leg","step"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, { Component } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nimport { setActiveItinerary, setActiveLeg, setActiveStep, setUseRealtimeResponse } from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveSearch, getRealtimeEffects } from '../../util/state'\n\nconst { calculateFares, calculatePhysicalActivity, getTimeZoneOffset } = coreUtils.itinerary\nconst { formatDuration, formatTime, getTimeFormat } = coreUtils.time\n\nclass TabbedItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.bool,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const { setUseRealtimeResponse, useRealtime } = this.props\n    setUseRealtimeResponse({ useRealtime: !useRealtime })\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      useRealtime,\n      timeFormat\n    } = this.props\n    if (!itineraries) return null\n\n    /* TODO: should this be moved? */\n    const showRealtimeAnnotation =\n      realtimeEffects.isAffectedByRealtimeData && (\n        realtimeEffects.exceedsThreshold ||\n        realtimeEffects.routesDiffer ||\n        !useRealtime\n      )\n\n    return (\n      <div className='options itinerary tabbed-itineraries'>\n        <div className='tab-row'>\n          {itineraries.map((itinerary, index) => {\n            const timeOptions = {\n              format: timeFormat,\n              offset: getTimeZoneOffset(itinerary)\n            }\n            const classNames = ['tab-button', 'clear-button-formatting']\n            const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n            const {\n              centsToString,\n              maxTNCFare,\n              minTNCFare,\n              transitFare\n            } = calculateFares(itinerary)\n            // TODO: support non-USD\n            let minTotalFare = minTNCFare * 100 + transitFare\n            const plus = maxTNCFare && maxTNCFare > minTNCFare ? '+' : ''\n            if (index === activeItinerary) classNames.push('selected')\n            return (\n              <Button\n                key={`tab-button-${index}`}\n                className={classNames.join(' ')}\n                onClick={() => { this.props.setActiveItinerary(index) }}\n              >\n                <div className='title'><span>Option {index + 1}</span></div>\n                <div className='details'>\n                  {/* The itinerary duration in hrs/mins */}\n                  {formatDuration(itinerary.duration)}\n\n                  {/* The duration as a time range */}\n                  <span>\n                    <br />\n                    {formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}\n                  </span>\n\n                  {/* the fare / calories summary line */}\n                  <span>\n                    <br />\n                    {minTotalFare ? <span>{`${centsToString(minTotalFare)}${plus}`} &bull; </span> : ''}\n                    {Math.round(caloriesBurned)} Cal\n                  </span>\n\n                  {/* The 'X tranfers' line, if applicable */}\n                  {itinerary.transfers > 0 && (\n                    <span>\n                      <br />\n                      {itinerary.transfers} transfer{itinerary.transfers > 1 ? 's' : ''}\n                    </span>\n                  )}\n                </div>\n              </Button>\n            )\n          })}\n        </div>\n\n        {/* <RealtimeAnnotation\n          realtimeEffects={realtimeEffects}\n          toggleRealtime={this._toggleRealtimeItineraryClick}\n          useRealtime={useRealtime} />\n        */}\n\n        {/* Show the active itinerary */}\n        {(activeItinerary !== null) && React.createElement(itineraryClass, {\n          itinerary: itineraries[activeItinerary],\n          index: activeItinerary,\n          key: activeItinerary,\n          active: true,\n          routingType: 'ITINERARY',\n          showRealtimeAnnotation,\n          ...this.props\n        })}\n\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies,\n    tnc: state.otp.tnc,\n    timeFormat: getTimeFormat(state.otp.config)\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setActiveItinerary: index => {\n      dispatch(setActiveItinerary({index}))\n    },\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  TabbedItineraries\n)\n"]}