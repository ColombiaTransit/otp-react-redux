{"version":3,"sources":["tabbed-itineraries.js"],"names":["TabbedItineraries","_toggleRealtimeItineraryClick","e","props","setUseRealtimeResponse","useRealtime","activeItinerary","itineraries","itineraryClass","realtimeEffects","map","itinerary","index","classNames","push","join","setActiveItinerary","duration","transfers","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","React","createElement","key","active","routingType","Component","propTypes","PropTypes","array","func","pending","bool","number","setActiveLeg","setActiveStep","defaultProps","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","companies","currentQuery","mapDispatchToProps","dispatch","leg","step"],"mappings":"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","file":"tabbed-itineraries.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\n\nimport { setActiveItinerary, setActiveLeg, setActiveStep, setUseRealtimeResponse } from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveItineraries, getActiveSearch, getRealtimeEffects } from '../../util/state'\nimport RealtimeAnnotation from './realtime-annotation'\nimport { formatDuration } from '../../util/time'\n\nclass TabbedItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.bool,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const {setUseRealtimeResponse, useRealtime} = this.props\n    setUseRealtimeResponse({useRealtime: !useRealtime})\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      useRealtime\n    } = this.props\n    if (!itineraries) return null\n\n    return (\n      <div className='options itinerary tabbed-itineraries'>\n        <div className='tab-row'>\n          {itineraries.map((itinerary, index) => {\n            const classNames = ['tab-button', 'clear-button-formatting']\n            if (index === activeItinerary) classNames.push('selected')\n            return (\n              <Button\n                key={`tab-button-${index}`}\n                className={classNames.join(' ')}\n                onClick={() => { this.props.setActiveItinerary(index) }}\n              >\n                <div className='title'>{index === 0\n                  ? <span>Best Bet</span>\n                  : <span>Option {index + 1}</span>\n                }</div>\n                <div className='details'>\n                  {formatDuration(itinerary.duration)}\n                  {itinerary.transfers > 0 && (\n                    <span><br />{itinerary.transfers} transfer{itinerary.transfers > 1 ? 's' : ''}</span>\n                  )}\n                </div>\n              </Button>\n            )\n          })}\n        </div>\n\n        {/* TODO: should this be moved? */}\n        {realtimeEffects.isAffectedByRealtimeData && (\n          realtimeEffects.exceedsThreshold ||\n          realtimeEffects.routesDiffer ||\n          !useRealtime) && (\n          <RealtimeAnnotation\n            realtimeEffects={realtimeEffects}\n            toggleRealtime={this._toggleRealtimeItineraryClick}\n            useRealtime={useRealtime} />\n          )\n        }\n\n        {/* Show the active itinerary */}\n        {(activeItinerary !== null) && React.createElement(itineraryClass, {\n          itinerary: itineraries[activeItinerary],\n          index: activeItinerary,\n          key: activeItinerary,\n          active: true,\n          routingType: 'ITINERARY',\n          ...this.props\n        })}\n\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const itineraries = getActiveItineraries(state.otp)\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    itineraries,\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setActiveItinerary: index => {\n      dispatch(setActiveItinerary({index}))\n    },\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  TabbedItineraries\n)\n"]}