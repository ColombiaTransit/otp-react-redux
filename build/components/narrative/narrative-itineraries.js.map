{"version":3,"sources":["narrative-itineraries.js"],"names":["NarrativeItineraries","_toggleRealtimeItineraryClick","e","props","setUseRealtimeResponse","useRealtime","activeItinerary","itineraries","itineraryClass","realtimeEffects","length","isAffectedByRealtimeData","exceedsThreshold","routesDiffer","map","itinerary","index","React","createElement","key","active","routingType","Component","propTypes","PropTypes","array","func","pending","bool","number","setActiveItinerary","setActiveLeg","setActiveStep","companies","string","defaultProps","DefaultItinerary","mapStateToProps","state","ownProps","activeSearch","otp","activeLeg","activeStep","currentQuery","mapDispatchToProps","dispatch","leg","step"],"mappings":"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","file":"narrative-itineraries.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport {\n  setActiveItinerary,\n  setActiveLeg,\n  setActiveStep,\n  setUseRealtimeResponse\n} from '../../actions/narrative'\nimport DefaultItinerary from './default/default-itinerary'\nimport { getActiveItineraries, getActiveSearch, getRealtimeEffects } from '../../util/state'\nimport RealtimeAnnotation from './realtime-annotation'\n\nclass NarrativeItineraries extends Component {\n  static propTypes = {\n    itineraries: PropTypes.array,\n    itineraryClass: PropTypes.func,\n    pending: PropTypes.bool,\n    activeItinerary: PropTypes.number,\n    setActiveItinerary: PropTypes.func,\n    setActiveLeg: PropTypes.func,\n    setActiveStep: PropTypes.func,\n    setUseRealtimeResponse: PropTypes.func,\n    useRealtime: PropTypes.bool,\n    companies: PropTypes.string\n  }\n\n  static defaultProps = {\n    itineraryClass: DefaultItinerary\n  }\n\n  _toggleRealtimeItineraryClick = (e) => {\n    const {setUseRealtimeResponse, useRealtime} = this.props\n    setUseRealtimeResponse({useRealtime: !useRealtime})\n  }\n\n  render () {\n    const {\n      activeItinerary,\n      itineraries,\n      itineraryClass,\n      realtimeEffects,\n      useRealtime\n    } = this.props\n    if (!itineraries) return null\n\n    return (\n      <div className='options itinerary'>\n        <div className='header'>\n          We found {itineraries.length} itineraries:\n        </div>\n\n        {realtimeEffects.isAffectedByRealtimeData && (\n          realtimeEffects.exceedsThreshold ||\n          realtimeEffects.routesDiffer ||\n          !useRealtime) && (\n          <RealtimeAnnotation\n            realtimeEffects={realtimeEffects}\n            toggleRealtime={this._toggleRealtimeItineraryClick}\n            useRealtime={useRealtime} />\n          )\n        }\n\n        {itineraries.map((itinerary, index) => {\n          return React.createElement(itineraryClass, {\n            itinerary,\n            index,\n            key: index,\n            active: index === activeItinerary,\n            routingType: 'ITINERARY',\n            ...this.props\n          })\n        })}\n      </div>\n    )\n  }\n}\n\n// connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  // const { activeItinerary, activeLeg, activeStep } = activeSearch ? activeSearch.activeItinerary : {}\n  const pending = activeSearch ? activeSearch.pending : false\n  const itineraries = getActiveItineraries(state.otp)\n  const realtimeEffects = getRealtimeEffects(state.otp)\n  const useRealtime = state.otp.useRealtime\n  return {\n    // swap out realtime itineraries with non-realtime depending on boolean\n    itineraries,\n    pending,\n    realtimeEffects,\n    activeItinerary: activeSearch && activeSearch.activeItinerary,\n    activeLeg: activeSearch && activeSearch.activeLeg,\n    activeStep: activeSearch && activeSearch.activeStep,\n    useRealtime,\n    companies: state.otp.currentQuery.companies\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    setActiveItinerary: index => {\n      dispatch(setActiveItinerary({index}))\n    },\n    setActiveLeg: (index, leg) => {\n      dispatch(setActiveLeg({index, leg}))\n    },\n    setActiveStep: (index, step) => {\n      dispatch(setActiveStep({index, step}))\n    },\n    setUseRealtimeResponse: ({useRealtime}) => {\n      dispatch(setUseRealtimeResponse({useRealtime}))\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  NarrativeItineraries\n)\n"]}