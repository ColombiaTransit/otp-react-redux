{"version":3,"sources":["place-row.js"],"names":["defaultRouteColor","PlaceRow","leg","mode","backgroundColor","routeColor","props","customIcons","legIndex","place","time","timeOptions","followsTransit","stackIcon","name","color","size","fontSize","icon","interline","interlineWithPreviousLeg","rowKey","_createLegLine","stopId","split","rentedBike","rentedCar","from","networks","join","transitLeg","setActiveLeg","companies","legMode","routingType","Component"],"mappings":"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","file":"place-row.js","sourcesContent":["import React, { Component } from 'react'\n\nimport LocationIcon from '../../icons/location-icon'\nimport ViewStopButton from '../../viewers/view-stop-button'\nimport { getLegMode, getPlaceName } from '../../../util/itinerary'\nimport { formatTime } from '../../../util/time'\n\nimport TransitLegBody from './transit-leg-body'\nimport AccessLegBody from './access-leg-body'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nexport default class PlaceRow extends Component {\n\n  _createLegLine (leg) {\n    switch (leg.mode) {\n      case 'WALK': return <div className='leg-line leg-line-walk' />\n      case 'BICYCLE':\n      case 'BICYCLE_RENT':\n        return <div className='leg-line leg-line-bicycle' />\n      case 'CAR': return <div className='leg-line leg-line-car' />\n      default:\n        return <div className='leg-line leg-line-transit' style={{\n          backgroundColor: leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n        }} />\n    }\n  }\n\n  render () {\n    const { customIcons, leg, legIndex, place, time, timeOptions, followsTransit } = this.props\n\n    const stackIcon = (name, color, size) => <i className={`fa fa-${name} fa-stack-1x`} style={{ color, fontSize: size + 'px' }} />\n\n    let icon\n    if (!leg) { // This is the itinerary destination\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 26)}\n          <LocationIcon type='to' className='fa-stack-1x' style={{ fontSize: 20 }} />\n        </span>\n      )\n    } else if (legIndex === 0) { // The is the origin\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 26)}\n          <LocationIcon type='from' className='fa-stack-1x' style={{ fontSize: 20 }} />\n        </span>\n      )\n    } else { // This is an intermediate place\n      icon = (\n        <span className='fa-stack place-icon-group'>\n          {stackIcon('circle', 'white', 22)}\n          {stackIcon('circle-o', 'black', 22)}\n        </span>\n      )\n    }\n\n    const interline = leg && leg.interlineWithPreviousLeg\n\n    return (\n      <div className='place-row' key={this.rowKey++}>\n        <div className='time'>\n          {time && formatTime(time, timeOptions)}\n        </div>\n        <div className='line-container'>\n          {leg && this._createLegLine(leg) }\n          <div>{!interline && icon}</div>\n        </div>\n        <div className='place-details'>\n          {/* Dot separating interlined segments, if applicable */}\n          {interline && <div className='interline-dot'>&bull;</div>}\n\n          {/* The place name */}\n          <div className='place-name'>\n            {interline\n              ? <div className='interline-name'>Stay on Board at <b>{place.name}</b></div>\n              : <div>{getPlaceName(place)}</div>\n            }\n          </div>\n\n          {/* Place subheading: Transit stop */}\n          {place.stopId && !interline && (\n            <div className='place-subheader'>\n              <span>Stop ID {place.stopId.split(':')[1]}</span>\n              <ViewStopButton stopId={place.stopId} />\n            </div>\n          )}\n\n          {/* Place subheading: rented bike pickup */}\n          {leg && leg.rentedBike && (\n            <div className='place-subheader'>\n              Pick up shared bike\n            </div>\n          )}\n\n          {/* Place subheading: rented car pickup */}\n          {leg && leg.rentedCar && (\n            <div className='place-subheader'>\n              Pick up {leg.from.networks ? leg.from.networks.join('/') : 'rented car'} {leg.from.name}\n            </div>\n          )}\n\n          {/* Show the leg, if present */}\n          {leg && (\n            leg.transitLeg\n              ? (/* This is a transit leg */\n                <TransitLegBody\n                  leg={leg}\n                  legIndex={legIndex}\n                  setActiveLeg={this.props.setActiveLeg}\n                  customIcons={customIcons}\n                />\n              )\n              : (/* This is an access (e.g. walk/bike/etc.) leg */\n                <AccessLegBody\n                  leg={leg}\n                  legIndex={legIndex}\n                  legMode={getLegMode(this.props.companies, leg).legMode}\n                  routingType={this.props.routingType}\n                  setActiveLeg={this.props.setActiveLeg}\n                  timeOptions={timeOptions}\n                  followsTransit={followsTransit}\n                  customIcons={customIcons}\n                />\n              )\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n"]}