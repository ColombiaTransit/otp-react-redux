{"version":3,"sources":["itin-summary.js"],"names":["defaultRouteColor","ItinerarySummary","_onSummaryClicked","props","onClick","companies","customIcons","itinerary","timeOptions","centsToString","maxTNCFare","minTNCFare","transitFare","minTotalFare","maxTotalFare","caloriesBurned","duration","startTime","endTime","Math","round","transfers","legs","filter","leg","mode","transitTime","map","k","legMode","customModeForLeg","customMode","backgroundColor","getRouteColorForBadge","getRouteNameForBadge","height","overflow","Component","propTypes","PropTypes","object","getRouteLongName","routes","length","longName","routeLongName","shortName","routeShortName","toLowerCase","startsWith","split","trim","routeColor"],"mappings":"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","file":"itin-summary.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { calculateFares, calculatePhysicalActivity, getLegMode, getModeIcon, isTransit } from '../../../util/itinerary'\nimport { formatDuration, formatTime } from '../../../util/time'\n\n// TODO: make this a prop\nconst defaultRouteColor = '#008'\n\nexport default class ItinerarySummary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  _onSummaryClicked = () => {\n    if (typeof this.props.onClick === 'function') this.props.onClick()\n  }\n\n  render () {\n    const { companies, customIcons, itinerary, timeOptions } = this.props\n    const {\n      centsToString,\n      maxTNCFare,\n      minTNCFare,\n      transitFare\n    } = calculateFares(itinerary)\n    // TODO: support non-USD\n    const minTotalFare = minTNCFare * 100 + transitFare\n    const maxTotalFare = maxTNCFare * 100 + transitFare\n\n    const { caloriesBurned } = calculatePhysicalActivity(itinerary)\n\n    return (\n      <div className='itin-summary' onClick={this._onSummaryClicked}>\n        <div className='details'>\n          {/* Travel time in hrs/mins */}\n          <div className='header'>{formatDuration(itinerary.duration)}</div>\n\n          {/* Duration as time range */}\n          <div className='detail'>{formatTime(itinerary.startTime, timeOptions)} - {formatTime(itinerary.endTime, timeOptions)}</div>\n\n          {/* Fare / Calories */}\n          <div className='detail'>\n            {minTotalFare > 0 && <span>\n              {centsToString(minTotalFare)}\n              {minTotalFare !== maxTotalFare && <span> - {centsToString(maxTotalFare)}</span>}\n              <span> &bull; </span>\n            </span>}\n            {Math.round(caloriesBurned)} Cals\n          </div>\n\n          {/* Number of transfers, if applicable */}\n          {itinerary.transfers > 0 && (\n            <div className='detail'>\n              {itinerary.transfers} transfer{itinerary.transfers > 1 ? 's' : ''}\n            </div>\n          )}\n\n        </div>\n        <div className='routes'>\n          {itinerary.legs.filter(leg => {\n            return !(leg.mode === 'WALK' && itinerary.transitTime > 0)\n          }).map((leg, k) => {\n            let { legMode } = getLegMode(companies, leg)\n            if (typeof customIcons.customModeForLeg === 'function') {\n              const customMode = customIcons.customModeForLeg(leg)\n              if (customMode) legMode = customMode\n            }\n            return <div className='route-preview' key={k}>\n              <div className='mode-icon'>{getModeIcon(legMode, customIcons)}</div>\n              {isTransit(leg.mode)\n                ? (\n                  <div className='short-name' style={{ backgroundColor: getRouteColorForBadge(leg) }}>\n                    {getRouteNameForBadge(leg)}\n                  </div>\n                )\n                : (<div style={{ height: 30, overflow: 'hidden' }} />)\n              }\n            </div>\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\n// Helper functions\n\nfunction getRouteLongName (leg) {\n  return leg.routes && leg.routes.length > 0\n    ? leg.routes[0].longName\n    : leg.routeLongName\n}\n\nfunction getRouteNameForBadge (leg) {\n  const shortName = leg.routes && leg.routes.length > 0\n    ? leg.routes[0].shortName : leg.routeShortName\n\n  const longName = getRouteLongName(leg)\n\n  // check for max\n  if (longName && longName.toLowerCase().startsWith('max')) return null\n\n  // check for streetcar\n  if (longName && longName.startsWith('Portland Streetcar')) return longName.split('-')[1].trim().split(' ')[0]\n\n  return shortName || longName\n}\n\nfunction getRouteColorForBadge (leg) {\n  return leg.routeColor ? '#' + leg.routeColor : defaultRouteColor\n}\n"]}