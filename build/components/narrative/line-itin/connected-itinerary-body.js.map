{"version":3,"sources":["connected-itinerary-body.js"],"names":["noop","ItineraryBodyContainer","styled","div","StyledItineraryBody","ItineraryBody","PlaceNameWrapper","ConnectedItineraryBody","nextProps","nextState","props","itinerary","config","diagramVisible","LegIcon","setActiveLeg","setViewedTrip","showLegDiagram","LineColumnContent","PlaceName","RouteDescription","TransitLegSubheader","TransitLegSummary","Component","mapStateToProps","state","ownProps","otp","ui","diagramLeg","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;AAEA,IAAMC,sBAAsB,GAAGC,0BAAOC,GAAV,mBAA5B;;AAIA,IAAMC,mBAAmB,GAAG,+BAAOC,sBAAP,CAAH,qBACrBC,iBADqB,CAAzB;;IAMMC,sB;;;;;;;;;;;;;;AACJ;0CACuBC,S,EAAWC,S,EAAW;AAC3C,aAAO,CAAC,qBAAQ,KAAKC,KAAL,CAAWC,SAAnB,EAA8BH,SAAS,CAACG,SAAxC,CAAR;AACD;;;6BAES;AAAA,wBASJ,KAAKD,KATD;AAAA,UAENE,MAFM,eAENA,MAFM;AAAA,UAGNC,cAHM,eAGNA,cAHM;AAAA,UAINF,SAJM,eAINA,SAJM;AAAA,UAKNG,OALM,eAKNA,OALM;AAAA,UAMNC,YANM,eAMNA,YANM;AAAA,UAONC,aAPM,eAONA,aAPM;AAAA,UAQNC,cARM,eAQNA,cARM;AAWR,aACE,6BAAC,sBAAD,QACE,6BAAC,mBAAD;AACE,QAAA,MAAM,EAAEL,MADV;AAEE,QAAA,cAAc,EAAEC,cAFlB;AAGE,QAAA,SAAS,EAAEF,SAHb;AAIE,QAAA,OAAO,EAAEG,OAJX;AAKE,QAAA,iBAAiB,EAAEI,0BALrB;AAME,QAAA,SAAS,EAAEC,kBANb;AAOE,QAAA,gBAAgB,EAAEC,yBAPpB;AAQE,QAAA,YAAY,EAAEL,YARhB;AASE,QAAA,aAAa,EAAEE,cATjB;AAUE,QAAA,aAAa,EAAED,aAVjB;AAWE,QAAA,cAAc,MAXhB;AAYE,QAAA,oBAAoB,MAZtB;AAaE,QAAA,WAAW,MAbb;AAcE,QAAA,mBAAmB,EAAE,KAdvB;AAeE,QAAA,kBAAkB,MAfpB;AAgBE,QAAA,mBAAmB,EAAEhB,IAhBvB;AAiBE,QAAA,mBAAmB,EAAEqB,qCAjBvB;AAkBE,QAAA,iBAAiB,EAAEC;AAlBrB,QADF,EAqBE,6BAAC,6BAAD;AAAa,QAAA,SAAS,EAAEX;AAAxB,QArBF,EAsBE,6BAAC,kBAAD;AAAW,QAAA,SAAS,EAAEA;AAAtB,QAtBF,CADF;AA0BD;;;;EA3CkCY,gB;;AA8CrC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,SAAO;AACLd,IAAAA,MAAM,EAAEa,KAAK,CAACE,GAAN,CAAUf,MADb;AAELC,IAAAA,cAAc,EAAEY,KAAK,CAACE,GAAN,CAAUC,EAAV,CAAaC;AAFxB,GAAP;AAID,CALD;;AAOA,IAAMC,kBAAkB,GAAG;AACzBd,EAAAA,aAAa,EAAbA,iBADyB;AAEzBC,EAAAA,cAAc,EAAdA;AAFyB,CAA3B;;eAKe,yBAAQO,eAAR,EAAyBM,kBAAzB,EACbvB,sBADa,C","sourcesContent":["import isEqual from 'lodash.isequal'\nimport TransitLegSummary from '@opentripplanner/itinerary-body/lib/defaults/transit-leg-summary'\nimport ItineraryBody from '@opentripplanner/itinerary-body/lib/otp-react-redux/itinerary-body'\nimport LineColumnContent from '@opentripplanner/itinerary-body/lib/otp-react-redux/line-column-content'\nimport PlaceName from '@opentripplanner/itinerary-body/lib/otp-react-redux/place-name'\nimport { PlaceName as PlaceNameWrapper } from '@opentripplanner/itinerary-body/lib/styled'\nimport RouteDescription from '@opentripplanner/itinerary-body/lib/otp-react-redux/route-description'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { showLegDiagram } from '../../../actions/map'\nimport { setViewedTrip } from '../../../actions/ui'\nimport TransitLegSubheader from './connected-transit-leg-subheader'\nimport TripDetails from '../connected-trip-details'\nimport TripTools from '../trip-tools'\n\nconst noop = () => {}\n\nconst ItineraryBodyContainer = styled.div`\n  padding: 20px 0px;\n`\n\nconst StyledItineraryBody = styled(ItineraryBody)`\n  ${PlaceNameWrapper} {\n    font-weight: inherit;\n  }\n`\n\nclass ConnectedItineraryBody extends Component {\n  /** avoid rerendering if the itinerary to display hasn't changed */\n  shouldComponentUpdate (nextProps, nextState) {\n    return !isEqual(this.props.itinerary, nextProps.itinerary)\n  }\n\n  render () {\n    const {\n      config,\n      diagramVisible,\n      itinerary,\n      LegIcon,\n      setActiveLeg,\n      setViewedTrip,\n      showLegDiagram\n    } = this.props\n\n    return (\n      <ItineraryBodyContainer>\n        <StyledItineraryBody\n          config={config}\n          diagramVisible={diagramVisible}\n          itinerary={itinerary}\n          LegIcon={LegIcon}\n          LineColumnContent={LineColumnContent}\n          PlaceName={PlaceName}\n          RouteDescription={RouteDescription}\n          setActiveLeg={setActiveLeg}\n          setLegDiagram={showLegDiagram}\n          setViewedTrip={setViewedTrip}\n          showAgencyInfo\n          showElevationProfile\n          showLegIcon\n          showMapButtonColumn={false}\n          showViewTripButton\n          toRouteAbbreviation={noop}\n          TransitLegSubheader={TransitLegSubheader}\n          TransitLegSummary={TransitLegSummary}\n        />\n        <TripDetails itinerary={itinerary} />\n        <TripTools itinerary={itinerary} />\n      </ItineraryBodyContainer>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    config: state.otp.config,\n    diagramVisible: state.otp.ui.diagramLeg\n  }\n}\n\nconst mapDispatchToProps = {\n  setViewedTrip,\n  showLegDiagram\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  ConnectedItineraryBody\n)\n"]}