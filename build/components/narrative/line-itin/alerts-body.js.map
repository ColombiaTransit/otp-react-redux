{"version":3,"sources":["alerts-body.js"],"names":["AlertsBody","props","alerts","sort","a","b","effectiveStartDate","map","alert","k","effectiveDateString","daysAway","diff","Math","abs","format","calendar","sameElse","split","alertDescriptionText","Component","propTypes","PropTypes","array"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;IAEqBA,U;;;;;;;;;;6BAKT;AACR,aACE;AAAA;AAAA,UAAK,WAAU,gBAAf;AACG,aAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAWD,EAAEE,kBAAF,GAAuBD,EAAEC,kBAA1B,GAAgD,CAAhD,GAAoD,CAAC,CAA/D;AAAA,SAAvB,EAAyFC,GAAzF,CAA6F,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC1G,cAAMH,qBAAqB,sBAAOE,MAAMF,kBAAb,CAA3B;AACA,cAAII,sBAAsB,kBAA1B;AACA,cAAMC,WAAW,wBAASC,IAAT,CAAcN,kBAAd,EAAkC,MAAlC,CAAjB;AACA,cAAIO,KAAKC,GAAL,CAASH,QAAT,KAAsB,CAA1B,EAA6BD,uBAAuB,sBAAOJ,kBAAP,EAA2BS,MAA3B,CAAkC,SAAlC,CAAvB;AAC7BL,iCAAuBJ,mBAAmBU,QAAnB,CAA4B,IAA5B,EAAkC,EAAEC,UAAU,cAAZ,EAAlC,EAAgEC,KAAhE,CAAsE,KAAtE,EAA6E,CAA7E,CAAvB;AACA,iBACE;AAAA;AAAA,cAAK,KAAKT,CAAV,EAAa,WAAU,eAAvB;AACE;AAAA;AAAA,gBAAK,WAAU,YAAf;AAA4B,mDAAG,WAAU,4BAAb;AAA5B,aADF;AAEE;AAAA;AAAA,gBAAK,WAAU,YAAf;AAA6BD,oBAAMW;AAAnC,aAFF;AAGE;AAAA;AAAA,gBAAK,WAAU,gBAAf;AAAiCT;AAAjC;AAHF,WADF;AAOD,SAbA;AADH,OADF;AAkBD;;;EAxBqCU,gB,UAC/BC,S,GAAY;AACjBnB,UAAQoB,oBAAUC;AADD,C;kBADAvB,U","file":"alerts-body.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport moment from 'moment'\n\nimport LegBody from './leg-body'\nimport ViewTripButton from '../../viewers/view-trip-button'\nimport { getModeIcon } from '../../../util/itinerary'\nimport { formatDuration } from '../../../util/time'\n\nexport default class AlertsBody extends Component {\n  static propTypes = {\n    alerts: PropTypes.array\n  }\n\n  render () {\n    return (\n      <div className='transit-alerts'>\n        {this.props.alerts.sort((a, b) => (a.effectiveStartDate < b.effectiveStartDate) ? 1 : -1).map((alert, k) => {\n          const effectiveStartDate = moment(alert.effectiveStartDate)\n          let effectiveDateString = 'Effective as of '\n          const daysAway = moment().diff(effectiveStartDate, 'days')\n          if (Math.abs(daysAway) <= 1) effectiveDateString += moment(effectiveStartDate).format('h:MMa, ')\n          effectiveDateString += effectiveStartDate.calendar(null, { sameElse: 'MMMM D, YYYY' }).split(' at')[0]\n          return (\n            <div key={k} className='transit-alert'>\n              <div className='alert-icon'><i className='fa fa-exclamation-triangle' /></div>\n              <div className='alert-body'>{alert.alertDescriptionText}</div>\n              <div className='effective-date'>{effectiveDateString}</div>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n"]}