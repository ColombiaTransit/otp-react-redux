{"version":3,"sources":["access-leg-body.js"],"names":["AccessLegBody","props","_onStepsHeaderClick","setState","expanded","state","_onSummaryClick","setActiveLeg","legIndex","leg","customIcons","legMode","timeOptions","followsTransit","mode","hailedCar","duration","steps","routingType","animation","Component","propTypes","PropTypes","object","any","string","TNCLeg","LYFT_CLIENT_ID","UBER_CLIENT_ID","universalLinks","from","lat","lon","encodeURI","name","to","tncData","estimatedArrival","Math","round","displayName","onSummaryClick","marginTop","marginBottom","height","position","company","top","left","paddingTop","width","textAlign","borderTop","borderBottom","borderRight","right","bottom","display","backgroundColor","padding","verticalAlign","color","fontStyle","lineHeight","startTime","minCost","currencyFormatter","format","code","currency","maxCost","AccessLegSummary","distance","AccessLegSteps","map","step","k","float","fill","relativeDirection","marginLeft","fontWeight","array"],"mappings":"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","file":"access-leg-body.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport currencyFormatter from 'currency-formatter'\n\nimport LegDiagramPreview from '../leg-diagram-preview'\n\nimport { distanceString } from '../../../util/distance'\nimport { getLegModeString, getModeIcon, getPlaceName, getStepDirection, getStepStreetName } from '../../../util/itinerary'\nimport { formatDuration, formatTime } from '../../../util/time'\nimport { isMobile } from '../../../util/ui'\n\nimport DirectionIcon from '../../icons/direction-icon'\n\nexport default class AccessLegBody extends Component {\n  static propTypes = {\n    leg: PropTypes.object,\n    legMode: PropTypes.any,\n    routingType: PropTypes.string\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { expanded: false }\n  }\n\n  _onStepsHeaderClick = () => {\n    this.setState({ expanded: !this.state.expanded })\n  }\n\n  _onSummaryClick = () => {\n    this.props.setActiveLeg(this.props.legIndex, this.props.leg)\n  }\n\n  render () {\n    const { customIcons, leg, legMode, timeOptions, followsTransit } = this.props\n\n    if (leg.mode === 'CAR' && leg.hailedCar) {\n      return <TNCLeg leg={leg} legMode={legMode} onSummaryClick={this._onSummaryClick} timeOptions={timeOptions} followsTransit={followsTransit} customIcons={customIcons} />\n    }\n\n    return (\n      <div className='leg-body'>\n        <AccessLegSummary leg={leg} legMode={legMode} onSummaryClick={this._onSummaryClick} customIcons={customIcons} />\n\n        <div onClick={this._onStepsHeaderClick} className='steps-header'>\n          {formatDuration(leg.duration)}\n          {leg.steps && <span> <i className={`fa fa-caret-${this.state.expanded ? 'up' : 'down'}`} /></span>}\n        </div>\n\n        {this.props.routingType === 'ITINERARY' && <LegDiagramPreview leg={leg} />}\n        <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n          {this.state.expanded && <AccessLegSteps steps={leg.steps} />}\n        </VelocityTransitionGroup>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  render () {\n    // TODO: ensure that client ID fields are populated\n    const { customIcons, leg, legMode, timeOptions, followsTransit, LYFT_CLIENT_ID, UBER_CLIENT_ID } = this.props\n    const universalLinks = {\n      'UBER': `https://m.uber.com/${isMobile() ? 'ul/' : ''}?client_id=${UBER_CLIENT_ID}&action=setPickup&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&pickup[formatted_address]=${encodeURI(leg.from.name)}&dropoff[latitude]=${leg.to.lat}&dropoff[longitude]=${leg.to.lon}&dropoff[formatted_address]=${encodeURI(leg.to.name)}`,\n      'LYFT': `https://lyft.com/ride?id=lyft&partner=${LYFT_CLIENT_ID}&pickup[latitude]=${leg.from.lat}&pickup[longitude]=${leg.from.lon}&destination[latitude]=${leg.to.lat}&destination[longitude]=${leg.to.lon}`\n    }\n    const { tncData } = leg\n\n    if (!tncData || !tncData.estimatedArrival) return null\n    return (\n      <div>\n        <div className='place-subheader'>\n          Wait {!followsTransit && <span>{Math.round(tncData.estimatedArrival / 60)} minutes </span>}for {tncData.displayName} pickup\n        </div>\n\n        <div className='leg-body'>\n          {/* The icon/summary row */}\n          <AccessLegSummary leg={leg} legMode={legMode} onSummaryClick={this.props.onSummaryClick} customIcons={customIcons} />\n\n          {/* The \"Book Ride\" button */}\n          <div style={{ marginTop: 10, marginBottom: 10, height: 32, position: 'relative' }}>\n            <a\n              className='btn btn-default'\n              href={universalLinks[tncData.company]}\n              style={{ position: 'absolute', top: 0, left: 0, height: 32, paddingTop: 4, width: 90, textAlign: 'center' }}\n              target={isMobile() ? '_self' : '_blank'}\n            >\n              Book Ride\n            </a>\n            {followsTransit && <div style={{ position: 'absolute', top: 0, left: 94, width: 0, height: 0, borderTop: '16px solid transparent', borderBottom: '16px solid transparent', borderRight: '16px solid #fcf9d3' }} />}\n            {followsTransit && (\n              <div style={{ position: 'absolute', top: 0, left: 110, right: 0, bottom: 0 }}>\n                <div style={{ display: 'table', backgroundColor: '#fcf9d3', width: '100%', height: '100%' }}>\n                  <div style={{ padding: '0px 2px', display: 'table-cell', verticalAlign: 'middle', color: '#444', fontStyle: 'italic', lineHeight: 0.95 }}>\n                    Wait until {formatTime(leg.startTime - tncData.estimatedArrival * 1000, timeOptions)} to book\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* The estimated travel time */}\n          <div className='steps-header'>\n            Estimated travel time: {formatDuration(leg.duration)} (does not account for traffic)\n          </div>\n\n          {/* The estimated travel cost */}\n          {tncData.minCost &&\n            <p>Estimated cost: {\n              `${currencyFormatter.format(tncData.minCost, { code: tncData.currency })} - ${currencyFormatter.format(tncData.maxCost, { code: tncData.currency })}`\n            }</p>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLegSummary extends Component {\n  render () {\n    const { customIcons, leg, legMode } = this.props\n    return (\n      <div className='summary leg-description' onClick={this.props.onSummaryClick}>\n        {/* Mode-specific icon */}\n        <div><div className='icon'>{getModeIcon(legMode, customIcons)}</div></div>\n\n        {/* Leg description, e.g. \"Walk 0.5 mi to...\" */}\n        <div>\n          {getLegModeString(leg)}\n          {' '}\n          {leg.distance && <span> {distanceString(leg.distance)}</span>}\n          {` to ${getPlaceName(leg.to)}`}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLegSteps extends Component {\n\n  static propTypes = {\n    steps: PropTypes.array\n  }\n\n  render () {\n    return (\n      <div className='steps'>\n        {this.props.steps.map((step, k) => {\n          return <div className='step-row' key={k}>\n            <div style={{ width: 16, height: 16, float: 'left', fill: '#999999' }}>\n              <DirectionIcon relativeDirection={step.relativeDirection} />\n            </div>\n\n            <div style={{ marginLeft: 24, lineHeight: 1.25, paddingTop: 1 }}>\n              {getStepDirection(step)}\n              <span>{step.relativeDirection === 'ELEVATOR' ? ' to ' : ' on '}</span>\n              <span style={{ fontWeight: 500 }}>\n                {getStepStreetName(step)}\n              </span>\n            </div>\n          </div>\n        })}\n      </div>\n    )\n  }\n}\n"]}