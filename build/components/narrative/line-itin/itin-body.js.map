{"version":3,"sources":["itin-body.js"],"names":["ItineraryBody","props","rowKey","nextProps","nextState","companies","itinerary","setActiveLeg","timeOptions","rows","followsTransit","legs","forEach","leg","i","push","from","startTime","length","to","endTime","transitLeg","Component","propTypes","PropTypes","string","object","routingType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;IAEqBA,a;;;AAOnB,yBAAaC,KAAb,EAAoB;AAAA;;AAAA,oJACZA,KADY;;AAElB,UAAKC,MAAL,GAAc,CAAd;AAFkB;AAGnB;;;;0CAEsBC,S,EAAWC,S,EAAW;AAC3C,aAAO,CAAC,sBAAQ,KAAKH,KAAL,CAAWI,SAAnB,EAA8BF,UAAUE,SAAxC,CAAD,IACL,CAAC,sBAAQ,KAAKJ,KAAL,CAAWK,SAAnB,EAA8BH,UAAUG,SAAxC,CADH;AAED;;;6BAES;AAAA;;AAAA,mBACyC,KAAKL,KAD9C;AAAA,UACAK,SADA,UACAA,SADA;AAAA,UACWC,YADX,UACWA,YADX;AAAA,UACyBC,WADzB,UACyBA,WADzB;;;AAGR,UAAMC,OAAO,EAAb;AACA,UAAIC,iBAAiB,KAArB;AACAJ,gBAAUK,IAAV,CAAeC,OAAf,CAAuB,UAACC,GAAD,EAAMC,CAAN,EAAY;AACjC;AACAL,aAAKM,IAAL,CACE,8BAAC,kBAAD,2BAAU,KAAKD,CAAf;AACE,iBAAOD,IAAIG,IADb;AAEE,gBAAMH,IAAII,SAFZ;AAGE,eAAKJ,GAHP;AAIE,uBAAaC,IAAI,CAAJ,GAAQR,UAAUK,IAAV,CAAeG,IAAI,CAAnB,CAAR,GAAgC,IAJ/C;AAKE,oBAAUA,CALZ;AAME,0BAAgBJ;AANlB,WAOM,OAAKT,KAPX,EADF;AAWA;AACA,YAAIa,MAAMR,UAAUK,IAAV,CAAeO,MAAf,GAAwB,CAAlC,EAAqC;AACnCT,eAAKM,IAAL,CACE,8BAAC,kBAAD;AACE,mBAAOF,IAAIM,EADb;AAEE,kBAAMN,IAAIO,OAFZ;AAGE,yBAAaZ,WAHf;AAIE,0BAAcD,YAJhB;AAKE,iBAAKO,IAAI,CALX,GADF;AAOD;AACD,YAAID,IAAIQ,UAAR,EAAoBX,iBAAiB,IAAjB;AACrB,OAxBD;;AA0BA,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACGD,YADH;AAEE,sCAAC,qBAAD,IAAa,WAAWH,SAAxB,GAFF;AAGE,sCAAC,mBAAD,IAAW,WAAWA,SAAtB;AAHF,OADF;AAOD;;;EAvDwCgB,gB,UAClCC,S,GAAY;AACjBlB,aAAWmB,oBAAUC,MADJ;AAEjBnB,aAAWkB,oBAAUE,MAFJ;AAGjBC,eAAaH,oBAAUC;AAHN,C;kBADAzB,a","file":"itin-body.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport isEqual from 'lodash.isequal'\n\nimport TripDetails from '../trip-details'\nimport TripTools from '../trip-tools'\n\nimport PlaceRow from './place-row'\n\nexport default class ItineraryBody extends Component {\n  static propTypes = {\n    companies: PropTypes.string,\n    itinerary: PropTypes.object,\n    routingType: PropTypes.string\n  }\n\n  constructor (props) {\n    super(props)\n    this.rowKey = 0\n  }\n\n  shouldComponentUpdate (nextProps, nextState) {\n    return !isEqual(this.props.companies, nextProps.companies) ||\n      !isEqual(this.props.itinerary, nextProps.itinerary)\n  }\n\n  render () {\n    const { itinerary, setActiveLeg, timeOptions } = this.props\n\n    const rows = []\n    let followsTransit = false\n    itinerary.legs.forEach((leg, i) => {\n      // Create a row containing this leg's start place and leg traversal details\n      rows.push(\n        <PlaceRow key={i}\n          place={leg.from}\n          time={leg.startTime}\n          leg={leg}\n          previousLeg={i > 0 ? itinerary.legs[i - 1] : null}\n          legIndex={i}\n          followsTransit={followsTransit}\n          {...this.props}\n        />\n      )\n      // If this is the last leg, create a special PlaceRow for the destination only\n      if (i === itinerary.legs.length - 1) {\n        rows.push(\n          <PlaceRow\n            place={leg.to}\n            time={leg.endTime}\n            timeOptions={timeOptions}\n            setActiveLeg={setActiveLeg}\n            key={i + 1} />)\n      }\n      if (leg.transitLeg) followsTransit = true\n    })\n\n    return (\n      <div className='itin-body'>\n        {rows}\n        <TripDetails itinerary={itinerary} />\n        <TripTools itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n"]}