{"version":3,"sources":["line-itinerary.js"],"names":["coreUtils","itinerary","getLegModeLabel","getTimeZoneOffset","isTransit","LineItineraryContainer","styled","div","LineItinerary","props","summary","_getSummary","transitModes","legs","forEach","leg","index","mode","modeStr","indexOf","push","length","join","active","companies","expanded","itineraryFooter","LegIcon","setActiveLeg","showRealtimeAnnotation","onClick","timeFormat","timeOptions","format","offset","NarrativeItinerary"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAE0DA,mBAAUC,S;IAA5DC,e,wBAAAA,e;IAAiBC,iB,wBAAAA,iB;IAAmBC,S,wBAAAA,S;;AAErC,IAAMC,sBAAsB,GAAGC,0BAAOC,GAAV,mBAA5B;;;;IAIcC,a;;;;;;;;;;;;;kCACJ;AAAA,UACLP,SADK,GACS,KAAKQ,KADd,CACLR,SADK;AAEb,aAAOA,SAAS,CAACS,OAAV,IAAqB,KAAKC,WAAL,CAAiBV,SAAjB,CAA5B;AACD;;;gCAEYA,S,EAAW;AACtB,UAAIS,OAAO,GAAG,EAAd;AACA,UAAIE,YAAY,GAAG,EAAnB;AACAX,MAAAA,SAAS,CAACY,IAAV,CAAeC,OAAf,CAAuB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrC,YAAIZ,SAAS,CAACW,GAAG,CAACE,IAAL,CAAb,EAAyB;AACvB,cAAMC,OAAO,GAAGhB,eAAe,CAACa,GAAD,CAA/B;AACA,cAAIH,YAAY,CAACO,OAAb,CAAqBD,OAArB,MAAkC,CAAC,CAAvC,EAA0CN,YAAY,CAACQ,IAAb,CAAkBF,OAAlB;AAC3C;AACF,OALD,EAHsB,CAUtB;;AACA,UAAI,CAACd,SAAS,CAACH,SAAS,CAACY,IAAV,CAAe,CAAf,EAAkBI,IAAnB,CAAd,EAAwC;AACtCP,QAAAA,OAAO,IAAIR,eAAe,CAACD,SAAS,CAACY,IAAV,CAAe,CAAf,CAAD,CAA1B;AACD,OAbqB,CAetB;;;AACA,UAAID,YAAY,CAACS,MAAb,GAAsB,CAA1B,EAA6B;AAC3BX,QAAAA,OAAO,IAAI,SAASE,YAAY,CAACU,IAAb,CAAkB,IAAlB,CAApB;AACD;;AAED,aAAOZ,OAAP;AACD;;;6BAES;AAAA,wBAYJ,KAAKD,KAZD;AAAA,UAENc,MAFM,eAENA,MAFM;AAAA,UAGNC,SAHM,eAGNA,SAHM;AAAA,UAINC,QAJM,eAINA,QAJM;AAAA,UAKNxB,SALM,eAKNA,SALM;AAAA,UAMNyB,eANM,eAMNA,eANM;AAAA,UAONC,OAPM,eAONA,OAPM;AAAA,UAQNC,YARM,eAQNA,YARM;AAAA,UASNC,sBATM,eASNA,sBATM;AAAA,UAUNC,OAVM,eAUNA,OAVM;AAAA,UAWNC,UAXM,eAWNA,UAXM;;AAcR,UAAI,CAAC9B,SAAL,EAAgB;AACd,eAAO,0DAAP;AACD;;AAED,UAAM+B,WAAW,GAAG;AAClBC,QAAAA,MAAM,EAAEF,UADU;AAElBG,QAAAA,MAAM,EAAE/B,iBAAiB,CAACF,SAAD;AAFP,OAApB;AAKA,aACE,6BAAC,sBAAD;AAAwB,QAAA,SAAS,EAAC;AAAlC,SACE,6BAAC,oBAAD;AACE,QAAA,SAAS,EAAEuB,SADb;AAEE,QAAA,SAAS,EAAEvB,SAFb;AAGE,QAAA,OAAO,EAAE0B,OAHX;AAIE,QAAA,WAAW,EAAEK,WAJf;AAKE,QAAA,OAAO,EAAEF;AALX,QADF,EAQGD,sBAAsB,IAAI,6BAAC,iCAAD,OAR7B,EASGN,MAAM,IAAIE,QAAV,GACG,6BAAC,+BAAD;AACA,QAAA,SAAS,EAAExB,SADX;AAEA,QAAA,OAAO,EAAE0B,OAFT,CAGA;AACA;AACA;AALA;AAMA,QAAA,YAAY,EAAEC;AANd,QADH,GASG,IAlBN,EAmBGF,eAnBH,CADF;AAuBD;;;;EA3EwCS,2B","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport ItineraryBody from './connected-itinerary-body'\nimport ItinerarySummary from './itin-summary'\nimport NarrativeItinerary from '../narrative-itinerary'\nimport SimpleRealtimeAnnotation from '../simple-realtime-annotation'\n\nconst { getLegModeLabel, getTimeZoneOffset, isTransit } = coreUtils.itinerary\n\nexport const LineItineraryContainer = styled.div`\n  margin-bottom: 20px;\n`\n\nexport default class LineItinerary extends NarrativeItinerary {\n  _headerText () {\n    const { itinerary } = this.props\n    return itinerary.summary || this._getSummary(itinerary)\n  }\n\n  _getSummary (itinerary) {\n    let summary = ''\n    let transitModes = []\n    itinerary.legs.forEach((leg, index) => {\n      if (isTransit(leg.mode)) {\n        const modeStr = getLegModeLabel(leg)\n        if (transitModes.indexOf(modeStr) === -1) transitModes.push(modeStr)\n      }\n    })\n\n    // check for access mode\n    if (!isTransit(itinerary.legs[0].mode)) {\n      summary += getLegModeLabel(itinerary.legs[0])\n    }\n\n    // append transit modes, if applicable\n    if (transitModes.length > 0) {\n      summary += ' to ' + transitModes.join(', ')\n    }\n\n    return summary\n  }\n\n  render () {\n    const {\n      active,\n      companies,\n      expanded,\n      itinerary,\n      itineraryFooter,\n      LegIcon,\n      setActiveLeg,\n      showRealtimeAnnotation,\n      onClick,\n      timeFormat\n    } = this.props\n\n    if (!itinerary) {\n      return <div>No Itinerary!</div>\n    }\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <LineItineraryContainer className='line-itin'>\n        <ItinerarySummary\n          companies={companies}\n          itinerary={itinerary}\n          LegIcon={LegIcon}\n          timeOptions={timeOptions}\n          onClick={onClick}\n        />\n        {showRealtimeAnnotation && <SimpleRealtimeAnnotation />}\n        {active || expanded\n          ? <ItineraryBody\n            itinerary={itinerary}\n            LegIcon={LegIcon}\n            // Don't use setActiveLeg as an import\n            // (will cause error when clicking on itinerary suymmary).\n            // Use the one passed by NarrativeItineraries instead.\n            setActiveLeg={setActiveLeg}\n          />\n          : null}\n        {itineraryFooter}\n      </LineItineraryContainer>\n    )\n  }\n}\n"]}