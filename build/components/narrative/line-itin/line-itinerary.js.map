{"version":3,"sources":["line-itinerary.js"],"names":["LineItinerary","itinerary","props","summary","_getSummary","transitModes","legs","forEach","leg","index","mode","modeStr","indexOf","push","length","join","active","companies","customIcons","expanded","itineraryFooter","showRealtimeAnnotation","onClick","timeFormat","console","log","timeOptions","format","offset","NarrativeItinerary"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;;;IAEqBA,a;;;;;;;;;;kCACJ;AAAA,UACLC,SADK,GACS,KAAKC,KADd,CACLD,SADK;;AAEb,aAAOA,UAAUE,OAAV,IAAqB,KAAKC,WAAL,CAAiBH,SAAjB,CAA5B;AACD;;;gCAEYA,S,EAAW;AACtB,UAAIE,UAAU,EAAd;AACA,UAAIE,eAAe,EAAnB;AACAJ,gBAAUK,IAAV,CAAeC,OAAf,CAAuB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACrC,YAAI,0BAAUD,IAAIE,IAAd,CAAJ,EAAyB;AACvB,cAAMC,UAAU,iCAAiBH,GAAjB,CAAhB;AACA,cAAIH,aAAaO,OAAb,CAAqBD,OAArB,MAAkC,CAAC,CAAvC,EAA0CN,aAAaQ,IAAb,CAAkBF,OAAlB;AAC3C;AACF,OALD;;AAOA;AACA,UAAI,CAAC,0BAAUV,UAAUK,IAAV,CAAe,CAAf,EAAkBI,IAA5B,CAAL,EAAwC;AACtCP,mBAAW,iCAAiBF,UAAUK,IAAV,CAAe,CAAf,CAAjB,CAAX;AACD;;AAED;AACA,UAAID,aAAaS,MAAb,GAAsB,CAA1B,EAA6B;AAC3BX,mBAAW,SAASE,aAAaU,IAAb,CAAkB,IAAlB,CAApB;AACD;;AAED,aAAOZ,OAAP;AACD;;;6BAES;AAAA,mBAWJ,KAAKD,KAXD;AAAA,UAENc,MAFM,UAENA,MAFM;AAAA,UAGNC,SAHM,UAGNA,SAHM;AAAA,UAINC,WAJM,UAINA,WAJM;AAAA,UAKNC,QALM,UAKNA,QALM;AAAA,UAMNlB,SANM,UAMNA,SANM;AAAA,UAONmB,eAPM,UAONA,eAPM;AAAA,UAQNC,sBARM,UAQNA,sBARM;AAAA,UASNC,OATM,UASNA,OATM;AAAA,UAUNC,UAVM,UAUNA,UAVM;;;AAaRC,cAAQC,GAAR,CAAY,yBAAZ,EAAuC,KAAKvB,KAA5C;;AAEA,UAAI,CAACD,SAAL,EAAgB;AACd,eAAO;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AAED,UAAMyB,cAAc;AAClBC,gBAAQJ,UADU;AAElBK,gBAAQ,kCAAkB3B,SAAlB;AAFU,OAApB;;AAKA,aACE;AAAA;AAAA,UAAK,WAAU,WAAf;AACE,sCAAC,qBAAD,IAAkB,WAAWgB,SAA7B,EAAwC,WAAWhB,SAAnD,EAA8D,aAAayB,WAA3E,EAAwF,SAASJ,OAAjG,EAA0G,aAAaJ,WAAvH,GADF;AAEGG,kCAA0B,8BAAC,kCAAD,OAF7B;AAGGL,kBAAUG,QAAV,GAAqB,8BAAC,kBAAD,6BAAmB,KAAKjB,KAAxB,IAA+B,WAAWD,SAA1C,EAAqD,aAAayB,WAAlE,IAArB,GAAyG,IAH5G;AAIGN;AAJH,OADF;AAQD;;;EA7DwCS,4B;;kBAAtB7B,a","file":"line-itinerary.js","sourcesContent":["import React from 'react'\n\nimport NarrativeItinerary from '../narrative-itinerary'\nimport SimpleRealtimeAnnotation from '../simple-realtime-annotation'\nimport { getLegModeString, getTimeZoneOffset, isTransit } from '../../../util/itinerary'\n\nimport ItinerarySummary from './itin-summary'\nimport ItineraryBody from './itin-body'\n\nexport default class LineItinerary extends NarrativeItinerary {\n  _headerText () {\n    const { itinerary } = this.props\n    return itinerary.summary || this._getSummary(itinerary)\n  }\n\n  _getSummary (itinerary) {\n    let summary = ''\n    let transitModes = []\n    itinerary.legs.forEach((leg, index) => {\n      if (isTransit(leg.mode)) {\n        const modeStr = getLegModeString(leg)\n        if (transitModes.indexOf(modeStr) === -1) transitModes.push(modeStr)\n      }\n    })\n\n    // check for access mode\n    if (!isTransit(itinerary.legs[0].mode)) {\n      summary += getLegModeString(itinerary.legs[0])\n    }\n\n    // append transit modes, if applicable\n    if (transitModes.length > 0) {\n      summary += ' to ' + transitModes.join(', ')\n    }\n\n    return summary\n  }\n\n  render () {\n    const {\n      active,\n      companies,\n      customIcons,\n      expanded,\n      itinerary,\n      itineraryFooter,\n      showRealtimeAnnotation,\n      onClick,\n      timeFormat\n    } = this.props\n\n    console.log('>>>>>> line itin props:', this.props);\n\n    if (!itinerary) {\n      return <div>No Itinerary!</div>\n    }\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <div className='line-itin'>\n        <ItinerarySummary companies={companies} itinerary={itinerary} timeOptions={timeOptions} onClick={onClick} customIcons={customIcons} />\n        {showRealtimeAnnotation && <SimpleRealtimeAnnotation />}\n        {active || expanded ? <ItineraryBody {...this.props} itinerary={itinerary} timeOptions={timeOptions} /> : null}\n        {itineraryFooter}\n      </div>\n    )\n  }\n}\n"]}