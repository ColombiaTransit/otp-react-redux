{"version":3,"sources":["printable-itinerary.js"],"names":["PrintableItinerary","props","itinerary","companies","timeFormat","timeOptions","format","offset","legs","length","from","name","map","leg","k","transitLeg","interlineWithPreviousLeg","hailedCar","Component","propTypes","PropTypes","object","TransitLeg","interlineFollows","routeShortName","routeLongName","to","endTime","mode","startTime","AccessLeg","steps","step","TNCLeg","tncData","displayName","estimatedArrival","duration"],"mappings":"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","file":"printable-itinerary.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ModeIcon from '../../icons/mode-icon'\nimport TripDetails from '../trip-details'\nimport { formatTime, formatDuration } from '../../../util/time'\nimport { getLegModeString, getStepDirection, getStepStreetName, getLegMode, getTimeZoneOffset } from '../../../util/itinerary'\n\nexport default class PrintableItinerary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { itinerary, companies, timeFormat } = this.props\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <div className='printable-itinerary'>\n        {itinerary.legs.length > 0 && (\n          <div className='leg collapse-top'>\n            <div className='leg-body'>\n              <div className='leg-header'>\n                <b>Depart</b> from <b>{itinerary.legs[0].from.name}</b>\n              </div>\n            </div>\n          </div>\n        )}\n        {itinerary.legs.map((leg, k) => leg.transitLeg\n          ? <TransitLeg key={k} leg={leg} interlineFollows={k < itinerary.legs.length - 1 && itinerary.legs[k + 1].interlineWithPreviousLeg} timeOptions={timeOptions} />\n          : leg.hailedCar\n            ? <TNCLeg leg={leg} legMode={getLegMode(companies, leg)} timeOptions={timeOptions} />\n            : <AccessLeg key={k} leg={leg} timeOptions={timeOptions} />\n        )}\n        <TripDetails itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n\nclass TransitLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg, interlineFollows, timeOptions } = this.props\n\n    // Handle case of transit leg interlined w/ previous\n    if (leg.interlineWithPreviousLeg) {\n      return (\n        <div className='leg collapse-top'>\n          <div className='leg-body'>\n            <div className='leg-header'>\n              Continues as <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n            </div>\n            <div className='leg-details'>\n              <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime, timeOptions)}</div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Board at <b>{leg.from.name}</b> at {formatTime(leg.startTime, timeOptions)}</div>\n            {interlineFollows\n              ? <div className='leg-detail'>Stay on board at <b>{leg.to.name}</b></div>\n              : <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime, timeOptions)}</div>\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{getLegModeString(leg)}</b> to <b>{leg.to.name}</b>\n          </div>\n          {!leg.hailedCar && (\n            <div className='leg-details'>\n              {leg.steps.map((step, k) => {\n                return (\n                  <div key={k} className='leg-detail'>{getStepDirection(step)} on <b>{getStepStreetName(step)}</b></div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    const { tncData } = leg\n    if (!tncData) return null\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>Take {tncData.displayName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Estimated wait time for pickup: <b>{formatDuration(tncData.estimatedArrival)}</b></div>\n            <div className='leg-detail'>Estimated travel time: <b>{formatDuration(leg.duration)}</b> (does not account for traffic)</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}