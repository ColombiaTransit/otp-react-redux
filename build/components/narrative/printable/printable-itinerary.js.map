{"version":3,"sources":["printable-itinerary.js"],"names":["PrintableItinerary","props","itinerary","companies","timeFormat","timeOptions","format","offset","legs","map","leg","k","transitLeg","length","interlineWithPreviousLeg","hailedCar","Component","propTypes","PropTypes","object","TransitLeg","interlineFollows","routeShortName","routeLongName","to","name","endTime","mode","from","startTime","AccessLeg","steps","step","TNCLeg","tncData","displayName","estimatedArrival","duration"],"mappings":"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","file":"printable-itinerary.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ModeIcon from '../../icons/mode-icon'\nimport TripDetails from '../trip-details'\nimport { formatTime, formatDuration } from '../../../util/time'\nimport { getLegModeString, getStepDirection, getStepStreetName, getLegMode, getTimeZoneOffset } from '../../../util/itinerary'\n\nexport default class PrintableItinerary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { itinerary, companies, timeFormat } = this.props\n\n    const timeOptions = {\n      format: timeFormat,\n      offset: getTimeZoneOffset(itinerary)\n    }\n\n    return (\n      <div className='printable-itinerary'>\n        {itinerary.legs.map((leg, k) => leg.transitLeg\n          ? <TransitLeg key={k} leg={leg} interlineFollows={k < itinerary.legs.length - 1 && itinerary.legs[k + 1].interlineWithPreviousLeg} timeOptions={timeOptions} />\n          : leg.hailedCar\n            ? <TNCLeg leg={leg} legMode={getLegMode(companies, leg)} timeOptions={timeOptions} />\n            : <AccessLeg key={k} leg={leg} timeOptions={timeOptions} />\n        )}\n        <TripDetails itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n\nclass TransitLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg, interlineFollows, timeOptions } = this.props\n\n    // Handle case of transit leg interlined w/ previous\n    if (leg.interlineWithPreviousLeg) {\n      return (\n        <div className='leg interlined'>\n          <div className='leg-body'>\n            <div className='leg-header'>\n              Continues as <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n            </div>\n            <div className='leg-details'>\n              <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime, timeOptions)}</div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Board at <b>{leg.from.name}</b> at {formatTime(leg.startTime, timeOptions)}</div>\n            {interlineFollows\n              ? <div className='leg-detail'>Stay on board at <b>{leg.to.name}</b></div>\n              : <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime, timeOptions)}</div>\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{getLegModeString(leg)}</b> to <b>{leg.to.name}</b>\n          </div>\n          {!leg.hailedCar && (\n            <div className='leg-details'>\n              {leg.steps.map((step, k) => {\n                return (\n                  <div key={k} className='leg-detail'>{getStepDirection(step)} on <b>{getStepStreetName(step)}</b></div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    const { tncData } = leg\n    if (!tncData) return null\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>Take {tncData.displayName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Estimated wait time for pickup: <b>{formatDuration(tncData.estimatedArrival)}</b></div>\n            <div className='leg-detail'>Estimated travel time: <b>{formatDuration(leg.duration)}</b> (does not account for traffic)</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}