{"version":3,"sources":["printable-itinerary.js"],"names":["PrintableItinerary","props","itinerary","companies","legs","map","leg","k","transitLeg","hailedCar","Component","propTypes","PropTypes","object","TransitLeg","mode","routeShortName","routeLongName","to","name","from","startTime","endTime","AccessLeg","steps","step","TNCLeg","tncData","displayName","estimatedArrival","duration"],"mappings":"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","file":"printable-itinerary.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ModeIcon from '../../icons/mode-icon'\nimport TripDetails from '../trip-details'\nimport { formatTime, formatDuration } from '../../../util/time'\nimport { getLegModeString, getStepDirection, getStepStreetName, getLegMode } from '../../../util/itinerary'\n\nexport default class PrintableItinerary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { itinerary, companies } = this.props\n    return (\n      <div className='printable-itinerary'>\n        {itinerary.legs.map((leg, k) => leg.transitLeg\n          ? <TransitLeg key={k} leg={leg} />\n          : leg.hailedCar\n            ? <TNCLeg leg={leg} legMode={getLegMode(companies, leg)} />\n            : <AccessLeg key={k} leg={leg} />\n        )}\n        <TripDetails itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n\nclass TransitLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Board at <b>{leg.from.name}</b> at {formatTime(leg.startTime)}</div>\n            <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime)}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{getLegModeString(leg)}</b> to <b>{leg.to.name}</b>\n          </div>\n          {!leg.hailedCar && (\n            <div className='leg-details'>\n              {leg.steps.map((step, k) => {\n                return (\n                  <div key={k} className='leg-detail'>{getStepDirection(step)} on <b>{getStepStreetName(step)}</b></div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    const { tncData } = leg\n    if (!tncData) return null\n\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>Take {tncData.displayName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Estimated wait time for pickup: <b>{formatDuration(tncData.estimatedArrival)}</b></div>\n            <div className='leg-detail'>Estimated travel time: <b>{formatDuration(leg.duration)}</b> (does not account for traffic)</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}