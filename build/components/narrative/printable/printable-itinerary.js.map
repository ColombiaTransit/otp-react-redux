{"version":3,"sources":["printable-itinerary.js"],"names":["PrintableItinerary","props","itinerary","companies","legs","map","leg","k","transitLeg","hailedCar","TNCLeg","Component","propTypes","PropTypes","object","TransitLeg","mode","routeShortName","routeLongName","to","name","from","startTime","endTime","AccessLeg","steps","step","eta","displayName","Math","round","estimatedSeconds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;IAEqBA,kB;;;;;;;;;;6BAKT;AAAA,mBACyB,KAAKC,KAD9B;AAAA,UACAC,SADA,UACAA,SADA;AAAA,UACWC,SADX,UACWA,SADX;;AAER,aACE;AAAA;AAAA,UAAK,WAAU,qBAAf;AACGD,kBAAUE,IAAV,CAAeC,GAAf,CAAmB,UAACC,GAAD,EAAMC,CAAN;AAAA,iBAAYD,IAAIE,UAAJ,GAC5B,8BAAC,UAAD,IAAY,KAAKD,CAAjB,EAAoB,KAAKD,GAAzB,GAD4B,GAE5BA,IAAIG,SAAJ,GACE,8BAAC,oBAAD,IAAY,gBAAgBC,MAA5B,EAAoC,KAAKJ,GAAzC,EAA8C,SAAS,2BAAWH,SAAX,EAAsBG,GAAtB,CAAvD,GADF,GAEE,8BAAC,SAAD,IAAW,KAAKC,CAAhB,EAAmB,KAAKD,GAAxB,GAJc;AAAA,SAAnB,CADH;AAOE,sCAAC,qBAAD,IAAa,WAAWJ,SAAxB;AAPF,OADF;AAWD;;;EAlB6CS,gB,UACvCC,S,GAAY;AACjBV,aAAWW,oBAAUC;AADJ,C;kBADAd,kB;IAqBfe,U;;;;;;;;;;6BAKM;AAAA,UACAT,GADA,GACQ,KAAKL,KADb,CACAK,GADA;;AAER,aACE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA,YAAK,WAAU,WAAf;AAA2B,wCAAC,kBAAD,IAAU,MAAMA,IAAIU,IAApB;AAA3B,SADF;AAEE;AAAA;AAAA,YAAK,WAAU,UAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA;AAAIV,kBAAIW,cAAR;AAAA;AAAyBX,kBAAIY;AAA7B,aADF;AAAA;AACqD;AAAA;AAAA;AAAIZ,kBAAIa,EAAJ,CAAOC;AAAX;AADrD,WADF;AAIE;AAAA;AAAA,cAAK,WAAU,aAAf;AACE;AAAA;AAAA,gBAAK,WAAU,YAAf;AAAA;AAAqC;AAAA;AAAA;AAAId,oBAAIe,IAAJ,CAASD;AAAb,eAArC;AAAA;AAAgE,oCAAWd,IAAIgB,SAAf;AAAhE,aADF;AAEE;AAAA;AAAA,gBAAK,WAAU,YAAf;AAAA;AAAuC;AAAA;AAAA;AAAIhB,oBAAIa,EAAJ,CAAOC;AAAX,eAAvC;AAAA;AAAgE,oCAAWd,IAAIiB,OAAf;AAAhE;AAFF;AAJF;AAFF,OADF;AAcD;;;EArBsBZ,gB,WAChBC,S,GAAY;AACjBN,OAAKO,oBAAUC;AADE,C;IAuBfU,S;;;;;;;;;;6BAKM;AAAA,UACAlB,GADA,GACQ,KAAKL,KADb,CACAK,GADA;;AAER,aACE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA,YAAK,WAAU,WAAf;AAA2B,wCAAC,kBAAD,IAAU,MAAMA,IAAIU,IAApB;AAA3B,SADF;AAEE;AAAA;AAAA,YAAK,WAAU,UAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA;AAAI,+CAAiBV,GAAjB;AAAJ,aADF;AAAA;AACoC;AAAA;AAAA;AAAIA,kBAAIa,EAAJ,CAAOC;AAAX;AADpC,WADF;AAIG,WAACd,IAAIG,SAAL,IACC;AAAA;AAAA,cAAK,WAAU,aAAf;AACGH,gBAAImB,KAAJ,CAAUpB,GAAV,CAAc,UAACqB,IAAD,EAAOnB,CAAP,EAAa;AAC1B,qBACE;AAAA;AAAA,kBAAK,KAAKA,CAAV,EAAa,WAAU,YAAvB;AAAqC,iDAAiBmB,IAAjB,CAArC;AAAA;AAAgE;AAAA;AAAA;AAAI,oDAAkBA,IAAlB;AAAJ;AAAhE,eADF;AAGD,aAJA;AADH;AALJ;AAFF,OADF;AAmBD;;;EA1BqBf,gB,WACfC,S,GAAY;AACjBN,OAAKO,oBAAUC;AADE,C;IA4BfJ,M;;;;;;;;;;6BAKM;AAAA,oBACa,KAAKT,KADlB;AAAA,UACAK,GADA,WACAA,GADA;AAAA,UACKqB,GADL,WACKA,GADL;;AAER,UAAI,CAACA,GAAL,EAAU,OAAO,IAAP;AACV,aACE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA,YAAK,WAAU,WAAf;AAA2B,wCAAC,kBAAD,IAAU,MAAMrB,IAAIU,IAApB;AAA3B,SADF;AAEE;AAAA;AAAA,YAAK,WAAU,UAAf;AACE;AAAA;AAAA,cAAK,WAAU,YAAf;AACE;AAAA;AAAA;AAAA;AAASW,kBAAIC;AAAb,aADF;AAAA;AACmC;AAAA;AAAA;AAAItB,kBAAIa,EAAJ,CAAOC;AAAX;AADnC,WADF;AAIE;AAAA;AAAA,cAAK,WAAU,aAAf;AACE;AAAA;AAAA,gBAAK,WAAU,YAAf;AAAA;AAA4D;AAAA;AAAA;AAAIS,qBAAKC,KAAL,CAAWH,IAAII,gBAAJ,GAAuB,EAAlC,CAAJ;AAAA;AAAA;AAA5D;AADF;AAJF;AAFF,OADF;AAaD;;;EArBkBpB,gB,WACZC,S,GAAY;AACjBN,OAAKO,oBAAUC;AADE,C","file":"printable-itinerary.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport ModeIcon from '../../icons/mode-icon'\nimport TNCWrapper from '../tnc-wrapper'\nimport TripDetails from '../trip-details'\nimport { formatTime } from '../../../util/time'\nimport { getLegModeString, getStepDirection, getStepStreetName, getLegMode } from '../../../util/itinerary'\n\nexport default class PrintableItinerary extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  render () {\n    const { itinerary, companies } = this.props\n    return (\n      <div className='printable-itinerary'>\n        {itinerary.legs.map((leg, k) => leg.transitLeg\n          ? <TransitLeg key={k} leg={leg} />\n          : leg.hailedCar\n            ? <TNCWrapper componentClass={TNCLeg} leg={leg} legMode={getLegMode(companies, leg)} />\n            : <AccessLeg key={k} leg={leg} />\n        )}\n        <TripDetails itinerary={itinerary} />\n      </div>\n    )\n  }\n}\n\nclass TransitLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{leg.routeShortName} {leg.routeLongName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Board at <b>{leg.from.name}</b> at {formatTime(leg.startTime)}</div>\n            <div className='leg-detail'>Get off at <b>{leg.to.name}</b> at {formatTime(leg.endTime)}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AccessLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg } = this.props\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>{getLegModeString(leg)}</b> to <b>{leg.to.name}</b>\n          </div>\n          {!leg.hailedCar && (\n            <div className='leg-details'>\n              {leg.steps.map((step, k) => {\n                return (\n                  <div key={k} className='leg-detail'>{getStepDirection(step)} on <b>{getStepStreetName(step)}</b></div>\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TNCLeg extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  render () {\n    const { leg, eta } = this.props\n    if (!eta) return null\n    return (\n      <div className='leg'>\n        <div className='mode-icon'><ModeIcon mode={leg.mode} /></div>\n        <div className='leg-body'>\n          <div className='leg-header'>\n            <b>Take {eta.displayName}</b> to <b>{leg.to.name}</b>\n          </div>\n          <div className='leg-details'>\n            <div className='leg-detail'>Estimated wait time for pickup: <b>{Math.round(eta.estimatedSeconds / 60)} min.</b></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}