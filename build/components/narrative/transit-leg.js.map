{"version":3,"sources":["transit-leg.js"],"names":["TransitLeg","props","_onClick","setState","expanded","state","e","leg","index","active","setActiveLeg","numStops","to","stopIndex","from","_onLegClick","realTime","routeShortName","routeLongName","headsign","mode","name","borderLeft","duration","alerts","map","alert","i","alertDescriptionText","alertUrl","intermediateStops","s","color","fontWeight","paddingRight","marginLeft","agencyUrl","agencyName","propTypes","itinerary","object"],"mappings":"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","file":"transit-leg.js","sourcesContent":["import Icon from './icon'\nimport React, { Component, PropTypes } from 'react'\nimport { Label } from 'react-bootstrap'\n\nimport ModeIcon from './mode-icon'\nimport { getMapColor } from '../../util/itinerary'\nimport { formatDuration } from '../../util/time'\n\nexport default class TransitLeg extends Component {\n  static propTypes = {\n    itinerary: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _onLegClick (e, leg, index) {\n    if (this.props.active) {\n      this.props.setActiveLeg(null)\n    } else {\n      this.props.setActiveLeg(index, leg)\n    }\n  }\n\n  _onClick = () => {\n    this.setState({expanded: !this.state.expanded})\n  }\n  render () {\n    const { active, index, leg } = this.props\n    const { expanded } = this.state\n    const numStops = leg.to.stopIndex - leg.from.stopIndex - 1\n    return (\n      <div\n        className={`leg${active ? ' active' : ''}`}>\n        <button\n          className={`header`}\n          onClick={(e) => this._onLegClick(e, leg, index)}\n          >\n          {leg.realTime ? <Icon type='rss' /> : null}\n          <span><Label>{leg.routeShortName}</Label> <b>{leg.routeLongName}</b> {leg.headsign}</span>\n        </button>\n        <div className='step-by-step'>\n          <div className='transit-leg'>\n            <div className='from-stop'>\n              <ModeIcon mode={leg.mode} />{leg.from.name}\n            </div>\n            <div className='intermediate-stops'>\n              <div\n                className='stop-count'\n                style={{borderLeft: `3px solid ${getMapColor(leg.mode)}`}}\n                >\n                <button\n                  onClick={this._onClick}\n                  >\n                  <Icon type={`caret-${expanded ? 'down' : 'right'}`} />\n                  <span className='transit-duration'>{formatDuration(leg.duration)}</span>\n                  {' '}\n                  ({numStops ? `${numStops} stops` : 'non-stop'})\n                </button>\n                {leg.alerts &&\n                  <div>\n                    <div className='item'><Icon type='exclamation-circle' /> Information</div>\n                    {expanded &&\n                      <div>\n                        {leg.alerts.map((alert, i) => (\n                          <div className='alert-item item' key={i}>{alert.alertDescriptionText} {alert.alertUrl ? <a target='_blank' href={alert.alertUrl}>more info</a> : null}</div>\n                        ))}\n                      </div>\n                    }\n                  </div>\n                }\n              </div>\n              {expanded &&\n                <div>\n                  <div\n                    style={{borderLeft: `3px solid ${getMapColor(leg.mode)}`}}\n                    className='stop-list'>\n                    {leg.intermediateStops.map((s, i) => (\n                      <div key={i} className='stop-item item'>\n                        <span className='stop-bullet'\n                          style={{\n                            color: getMapColor(leg.mode),\n                            fontWeight: 800,\n                            paddingRight: '8px',\n                            marginLeft: '-1px'\n                          }}\n                          >-</span>\n                        <span className='stop-name'>{s.name}</span>\n                      </div>\n                    ))}\n                    <div className='item info-item'>\n                      <span className='agency-info'>Service operated by <a href={leg.agencyUrl}>{leg.agencyName}</a></span>\n                      {\n                        // route info included?\n                        // <span className='route-info'><a target='_blank' href={leg.routeUrl}>Route information</a></span>\n                      }\n                    </div>\n                  </div>\n                </div>\n              }\n            </div>\n            <div className='to-stop'>\n              <ModeIcon mode={leg.mode} />{leg.to.name}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"]}