{"version":3,"sources":["leg-diagram-preview.js"],"names":["METERS_TO_FEET","LegDiagramPreview","props","width","height","setState","diagramVisible","leg","startTime","showLegDiagram","_isActive","elev","Math","round","state","showElevationProfile","profile","coreUtils","itinerary","getElevationProfile","steps","distance","mode","_onExpandClick","fontSize","color","_formatElevation","gain","loss","points","length","generateSvg","_onResize","Component","PropTypes","object","minElev","maxElev","ptArr","traversed","pts","map","pt","x","y","join","mapStateToProps","ownProps","otp","ui","diagramLeg","Boolean","config","elevationProfile","mapDispatchToProps"],"mappings":"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","sourcesContent":["import coreUtils from '@opentripplanner/core-utils'\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { showLegDiagram } from '../../actions/map'\n\nconst METERS_TO_FEET = 3.28084\n\nclass LegDiagramPreview extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { width: null }\n  }\n\n  _onResize = (width, height) => {\n    if (width > 0) {\n      this.setState({ width })\n    }\n  }\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  _isActive = () => {\n    const { diagramVisible, leg } = this.props\n    return diagramVisible && diagramVisible.startTime === leg.startTime\n  }\n\n  _onExpandClick = () => {\n    const { leg, showLegDiagram } = this.props\n    if (this._isActive()) showLegDiagram(null)\n    else showLegDiagram(leg)\n  }\n\n  /** Round elevation to whole number and add symbol. */\n  _formatElevation = (elev) => Math.round(elev) + `'`\n\n  render () {\n    const { leg, showElevationProfile } = this.props\n    if (!showElevationProfile) return null\n    const profile = coreUtils.itinerary.getElevationProfile(leg.steps)\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === 'CAR') return null\n\n    return (\n      <div className={`leg-diagram-preview ${this._isActive() ? 'on' : ''}`}>\n        {/* The preview elevation SVG */}\n        <div\n          className='diagram'\n          tabIndex='0'\n          title='Toggle elevation chart'\n          role='button'\n          onClick={this._onExpandClick}>\n          <div className='diagram-title text-center'>\n            Elevation chart{' '}\n            <span style={{ fontSize: 'xx-small', color: 'red' }}>↑{this._formatElevation(profile.gain * METERS_TO_FEET)}{'  '}</span>\n            <span style={{ fontSize: 'xx-small', color: 'green' }}>↓{this._formatElevation(-profile.loss * METERS_TO_FEET)}</span>\n          </div>\n          {profile.points.length > 0\n            ? generateSvg(profile, this.state.width)\n            : 'No elevation data available.'\n          }\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction generateSvg (profile, width) {\n  const height = 30\n  let { minElev, maxElev, points: ptArr, traversed } = profile\n  // Pad the min-max range by 25m on either side\n  minElev -= 25\n  maxElev += 25\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr.map(pt => {\n    const x = (pt[0] / traversed) * width\n    const y = height - height * (pt[1] - minElev) / (maxElev - minElev)\n    return x + ',' + y\n  }).join(' ')\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline\n        points={pts}\n        fill='none'\n        stroke='black'\n        strokeWidth={1.3}\n      />\n    </svg>\n  )\n}\n\n// Connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramVisible: state.otp.ui.diagramLeg,\n    showElevationProfile: Boolean(state.otp.config.elevationProfile)\n  }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagramPreview)\n"]}