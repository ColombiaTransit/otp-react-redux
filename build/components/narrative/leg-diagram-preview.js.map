{"version":3,"sources":["leg-diagram-preview.js"],"names":["LegDiagramPreview","props","_onResize","width","height","setState","_onExpandClick","showLegDiagram","leg","state","distance","mode","generateSvg","steps","Component","propTypes","PropTypes","object","minElev","maxElev","traversed","ptArr","forEach","step","elevation","length","i","elev","second","push","first","pts","map","x","pt","y","join","mapStateToProps","ownProps","mapDispatchToProps"],"mappings":"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","file":"leg-diagram-preview.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { showLegDiagram } from '../../actions/map'\n\nclass LegDiagramPreview extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { width: null }\n  }\n\n  _onResize = (width, height) => {\n    if (width > 0) {\n      this.setState({ width })\n    }\n  }\n\n  _onExpandClick = () => {\n    this.props.showLegDiagram(this.props.leg)\n  }\n\n  render () {\n    const { leg } = this.props\n\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === 'CAR') return null\n\n    return (\n      <div className='leg-diagram-preview'>\n        {/* The preview elevation SVG */}\n        <div className='diagram'>\n          {generateSvg(leg.steps, this.state.width)}\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n\n        {/* The button to show the expanded map-inset view */}\n        <div className='expand-button-container'>\n          <Button\n            className='expand-button'\n            bsSize='xsmall'\n            onClick={this._onExpandClick}\n          >\n            <i className='fa fa-expand' />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction generateSvg (steps, width) {\n  const height = 30\n  let minElev = 100000\n  let maxElev = -100000\n  let traversed = 0\n  const ptArr = []\n\n  // Iterate through the steps, building the array of elevation points and\n  // keeping track of the minimum and maximum elevations reached\n  steps.forEach(step => {\n    if (!step.elevation || step.elevation.length === 0) {\n      traversed += step.distance\n      return\n    }\n    for (let i = 0; i < step.elevation.length; i++) {\n      const elev = step.elevation[i]\n      if (elev.second < minElev) minElev = elev.second\n      if (elev.second > maxElev) maxElev = elev.second\n      ptArr.push([traversed + elev.first, elev.second])\n    }\n    traversed += step.distance\n  })\n\n  // Pad the min-max range by 25m on either side\n  minElev -= 25\n  maxElev += 25\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr.map(pt => {\n    const x = (pt[0] / traversed) * width\n    const y = height - height * (pt[1] - minElev) / (maxElev - minElev)\n    return x + ',' + y\n  }).join(' ')\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline\n        points={pts}\n        fill='none'\n        stroke='black'\n        strokeWidth={2}\n      />\n    </svg>\n  )\n}\n\n// Connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return { }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagramPreview)\n"]}