{"version":3,"sources":["leg-diagram-preview.js"],"names":["METERS_TO_FEET","LegDiagramPreview","props","_onResize","width","height","setState","_isActive","diagramVisible","leg","startTime","_onExpandClick","showLegDiagram","_formatElevation","elev","Math","round","state","showElevationProfile","profile","steps","distance","mode","fontSize","color","gain","loss","points","length","generateSvg","Component","propTypes","PropTypes","object","minElev","maxElev","ptArr","traversed","pts","map","x","pt","y","join","mapStateToProps","ownProps","otp","ui","diagramLeg","Boolean","config","elevationProfile","mapDispatchToProps"],"mappings":"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","file":"leg-diagram-preview.js","sourcesContent":["import React, {PropTypes, Component} from 'react'\nimport { Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ReactResizeDetector from 'react-resize-detector'\n\nimport { showLegDiagram } from '../../actions/map'\nimport { getElevationProfile } from '../../util/itinerary'\n\nconst METERS_TO_FEET = 3.28084\n\nclass LegDiagramPreview extends Component {\n  static propTypes = {\n    leg: PropTypes.object\n  }\n\n  constructor (props) {\n    super(props)\n    this.state = { width: null }\n  }\n\n  _onResize = (width, height) => {\n    if (width > 0) {\n      this.setState({ width })\n    }\n  }\n\n  /**\n   * Determine if the diagram currently visible is for this leg (based on start\n   * time).\n   */\n  _isActive = () => {\n    const { diagramVisible, leg } = this.props\n    return diagramVisible && diagramVisible.startTime === leg.startTime\n  }\n\n  _onExpandClick = () => {\n    const { diagramVisible, leg, showLegDiagram } = this.props\n    if (this._isActive()) showLegDiagram(null)\n    else showLegDiagram(leg)\n  }\n\n  /** Round elevation to whole number and add symbol. */\n  _formatElevation = (elev) => Math.round(elev) + `'`\n\n  render () {\n    const { diagramVisible, leg, showElevationProfile } = this.props\n    if (!showElevationProfile) return null\n    const profile = getElevationProfile(leg.steps)\n    // Don't show for very short legs\n    if (leg.distance < 500 || leg.mode === 'CAR') return null\n\n    return (\n      <div className={`leg-diagram-preview ${this._isActive() ? 'on' : ''}`}>\n        {/* The preview elevation SVG */}\n        <div\n          className='diagram'\n          tabIndex='0'\n          title='Toggle elevation chart'\n          role='button'\n          onClick={this._onExpandClick}>\n          <div className='diagram-title text-center'>\n            Elevation chart{' '}\n            <span style={{ fontSize: 'xx-small', color: 'red' }}>↑{this._formatElevation(profile.gain * METERS_TO_FEET)}{'  '}</span>\n            <span style={{ fontSize: 'xx-small', color: 'green' }}>↓{this._formatElevation(-profile.loss * METERS_TO_FEET)}</span>\n          </div>\n          {profile.points.length > 0\n            ? generateSvg(profile, this.state.width)\n            : 'No elevation data available.'\n          }\n          <ReactResizeDetector handleWidth onResize={this._onResize} />\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction generateSvg (profile, width) {\n  const height = 30\n  let { minElev, maxElev, points: ptArr, traversed } = profile\n  // Pad the min-max range by 25m on either side\n  minElev -= 25\n  maxElev += 25\n\n  // Transform the point array and store it as an SVG-ready string\n  const pts = ptArr.map(pt => {\n    const x = (pt[0] / traversed) * width\n    const y = height - height * (pt[1] - minElev) / (maxElev - minElev)\n    return x + ',' + y\n  }).join(' ')\n\n  // Render the SVG\n  return (\n    <svg height={height} width={width}>\n      <polyline\n        points={pts}\n        fill='none'\n        stroke='black'\n        strokeWidth={1.3}\n      />\n    </svg>\n  )\n}\n\n// Connect to the redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    diagramVisible: state.otp.ui.diagramLeg,\n    showElevationProfile: Boolean(state.otp.config.elevationProfile)\n  }\n}\n\nconst mapDispatchToProps = {\n  showLegDiagram\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LegDiagramPreview)\n"]}