{"version":3,"sources":["trip-details.js"],"names":["TripDetails","itinerary","props","date","startTime","centsToString","dollarsToString","maxTNCFare","minTNCFare","transitFare","companies","legs","forEach","leg","tncData","company","fare","textTransform","toLowerCase","bikeDuration","caloriesBurned","walkDuration","format","routingType","Math","round","Component","TripDetail","_onExpandClick","setState","expanded","_onHideClick","state","icon","summary","description","animation","mapStateToProps","ownProps","otp","currentQuery","tnc"],"mappings":"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","file":"trip-details.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport moment from 'moment'\n\nimport { calculateFares, calculatePhysicalActivity } from '../../util/itinerary'\n\nclass TripDetails extends Component {\n  render () {\n    const { itinerary } = this.props\n    const date = moment(itinerary.startTime)\n\n    // process the transit fare\n    const { centsToString, dollarsToString, maxTNCFare, minTNCFare, transitFare } = calculateFares(itinerary)\n    let companies\n    itinerary.legs.forEach(leg => {\n      if (leg.tncData) {\n        companies = leg.tncData.company\n      }\n    })\n    let fare\n    if (transitFare || minTNCFare) {\n      fare = (\n        <span>\n          {transitFare && (\n            <span>Transit Fare: <b>{centsToString(transitFare)}</b></span>\n          )}\n          {minTNCFare !== 0 && (\n            <span>\n              <br />\n              <span style={{ textTransform: 'capitalize' }}>\n                {companies.toLowerCase()}\n              </span>{' '}\n              Fare: <b>{dollarsToString(minTNCFare)} - {dollarsToString(maxTNCFare)}</b>\n            </span>\n          )}\n        </span>\n      )\n    }\n\n    // Compute calories burned.\n    const { bikeDuration, caloriesBurned, walkDuration } = calculatePhysicalActivity(itinerary)\n    return (\n      <div className='trip-details'>\n        <div className='trip-details-header'>Trip Details</div>\n        <div className='trip-details-body'>\n          <TripDetail\n            icon={<i className='fa fa-calendar' />}\n            summary={\n              <span>\n                <span>Depart <b>{date.format('MMMM DD, YYYY')}</b></span>\n                {this.props.routingType === 'ITINERARY' && <span> at <b>{date.format('h:mma')}</b></span>}\n              </span>\n            }\n          />\n          {fare && (\n            <TripDetail\n              icon={<i className='fa fa-money' />}\n              summary={fare}\n            />\n          )}\n          {caloriesBurned > 0 && (\n            <TripDetail\n              icon={<i className='fa fa-heartbeat' />}\n              summary={<span>Calories Burned: <b>{Math.round(caloriesBurned)}</b></span>}\n              description={\n                <span>\n                  Calories burned is based on <b>{Math.round(walkDuration / 60)} minute(s)</b>{' '}\n                  spent walking and <b>{Math.round(bikeDuration / 60)} minute(s)</b>{' '}\n                  spent biking during this trip. Adapted from{' '}\n                  <a\n                    href='https://health.gov/dietaryguidelines/dga2005/document/html/chapter3.htm#table4'\n                    target='_blank'>\n                    Dietary Guidelines for Americans 2005, page 16, Table 4\n                  </a>.\n                </span>\n              }\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TripDetail extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _onExpandClick = () => {\n    this.setState({ expanded: true })\n  }\n\n  _onHideClick = () => {\n    this.setState({ expanded: false })\n  }\n\n  render () {\n    const { icon, summary, description } = this.props\n    return (\n      <div className='trip-detail'>\n        <div className='icon'>{icon}</div>\n        <div className='summary'>\n          {summary}\n          {description && (\n            <Button\n              className='expand-button clear-button-formatting'\n              onClick={this._onExpandClick}\n            >\n              <i className='fa fa-question-circle' />\n            </Button>\n          )}\n          <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n            {this.state.expanded && (\n              <div className='description'>\n                <Button\n                  className='hide-button clear-button-formatting'\n                  onClick={this._onHideClick}\n                >\n                  <i className='fa fa-close' />\n                </Button>\n                {description}\n              </div>\n            )}\n          </VelocityTransitionGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Connect main class to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    routingType: state.otp.currentQuery.routingType,\n    tnc: state.otp.tnc\n  }\n}\n\nexport default connect(mapStateToProps)(TripDetails)\n"]}