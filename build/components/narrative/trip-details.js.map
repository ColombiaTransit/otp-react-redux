{"version":3,"sources":["trip-details.js"],"names":["defaultTncRideTypes","TripDetails","props","itinerary","companies","tnc","date","startTime","transitFare","fare","regular","reg","currency","symbol","cents","Math","pow","defaultFractionDigits","toFixed","minTNCFare","maxTNCFare","legs","leg","mode","hailedCar","from","to","rideEstimates","estimate","minCost","maxCost","textTransform","toLowerCase","walkDuration","bikeDuration","startsWith","duration","caloriesBurned","format","routingType","round","Component","TripDetail","_onExpandClick","setState","expanded","_onHideClick","state","icon","summary","description","animation","mapStateToProps","ownProps","otp","currentQuery"],"mappings":"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","file":"trip-details.js","sourcesContent":["import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'react-bootstrap'\nimport { VelocityTransitionGroup } from 'velocity-react'\nimport moment from 'moment'\n\nimport { getTNCLocation } from '../../util/itinerary'\n\nconst defaultTncRideTypes = {\n  'LYFT': 'lyft',\n  'UBER': 'a6eef2e1-c99a-436f-bde9-fefb9181c0b0'\n}\n\nclass TripDetails extends Component {\n  render () {\n    const { itinerary, companies, tnc } = this.props\n    const date = moment(itinerary.startTime)\n\n    // process the transit fare\n    let transitFare\n    if (itinerary.fare && itinerary.fare.fare && itinerary.fare.fare.regular) {\n      const reg = itinerary.fare.fare.regular\n      transitFare = reg.currency.symbol + (reg.cents / Math.pow(10, reg.currency.defaultFractionDigits)).toFixed(reg.currency.defaultFractionDigits)\n    }\n\n    // Process any TNC fares\n    let minTNCFare = 0\n    let maxTNCFare = 0\n    if (tnc) {\n      for (const leg of itinerary.legs) {\n        if (leg.mode === 'CAR' && leg.hailedCar) {\n          const from = getTNCLocation(leg, 'from')\n          const to = getTNCLocation(leg, 'to')\n          if (tnc && tnc.rideEstimates && tnc.rideEstimates[from] && tnc.rideEstimates[from][to] && tnc.rideEstimates[from][to][companies]) {\n            const estimate = tnc.rideEstimates[from][to][companies][defaultTncRideTypes[companies]]\n            // TODO: Support non-USD\n            minTNCFare += estimate.minCost\n            maxTNCFare += estimate.maxCost\n          }\n        }\n      }\n      if (minTNCFare) minTNCFare = '$' + minTNCFare.toFixed(2)\n      if (maxTNCFare) maxTNCFare = '$' + maxTNCFare.toFixed(2)\n    }\n\n    let fare\n    if (transitFare || minTNCFare) {\n      fare = (\n        <span>\n          {transitFare && (\n            <span>Transit Fare: <b>{transitFare}</b></span>\n          )}\n          {minTNCFare !== 0 && (\n            <span>\n              <br />\n              <span style={{ textTransform: 'capitalize' }}>{companies.toLowerCase()}</span> Fare: <b>{minTNCFare} - {maxTNCFare}</b>\n            </span>\n          )}\n        </span>\n      )\n    }\n\n    // compute calories burned\n    let walkDuration = 0\n    let bikeDuration = 0\n    for (const leg of itinerary.legs) {\n      if (leg.mode.startsWith('WALK')) walkDuration += leg.duration\n      if (leg.mode.startsWith('BICYCLE')) bikeDuration += leg.duration\n    }\n    const caloriesBurned =\n      walkDuration / 3600 * 280 +\n      bikeDuration / 3600 * 290\n\n    return (\n      <div className='trip-details'>\n        <div className='trip-details-header'>Trip Details</div>\n        <div className='trip-details-body'>\n          <TripDetail\n            icon={<i className='fa fa-calendar' />}\n            summary={\n              <span>\n                <span>Depart <b>{date.format('MMMM DD, YYYY')}</b></span>\n                {this.props.routingType === 'ITINERARY' && <span> at <b>{date.format('h:mma')}</b></span>}\n              </span>\n            }\n          />\n          {fare && (\n            <TripDetail\n              icon={<i className='fa fa-money' />}\n              summary={fare}\n            />\n          )}\n          {caloriesBurned > 0 && (\n            <TripDetail\n              icon={<i className='fa fa-heartbeat' />}\n              summary={<span>Calories Burned: <b>{Math.round(caloriesBurned)}</b></span>}\n              description={<span>Calories burned is based on <b>{Math.round(walkDuration / 60)} minute(s)</b> spent walking and <b>{Math.round(bikeDuration / 60)} minute(s)</b> spent biking during this trip. Adapted from <a href='https://health.gov/dietaryguidelines/dga2005/document/html/chapter3.htm#table4' target='_blank'>Dietary Guidelines for Americans 2005, page 16, Table 4</a>.</span>}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass TripDetail extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      expanded: false\n    }\n  }\n\n  _onExpandClick = () => {\n    this.setState({ expanded: true })\n  }\n\n  _onHideClick = () => {\n    this.setState({ expanded: false })\n  }\n\n  render () {\n    const { icon, summary, description } = this.props\n    return (\n      <div className='trip-detail'>\n        <div className='icon'>{icon}</div>\n        <div className='summary'>\n          {summary}\n          {description && (\n            <Button\n              className='expand-button clear-button-formatting'\n              onClick={this._onExpandClick}\n            >\n              <i className='fa fa-question-circle' />\n            </Button>\n          )}\n          <VelocityTransitionGroup enter={{animation: 'slideDown'}} leave={{animation: 'slideUp'}}>\n            {this.state.expanded && (\n              <div className='description'>\n                <Button\n                  className='hide-button clear-button-formatting'\n                  onClick={this._onHideClick}\n                >\n                  <i className='fa fa-close' />\n                </Button>\n                {description}\n              </div>\n            )}\n          </VelocityTransitionGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\n// Connect main class to redux store\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    routingType: state.otp.currentQuery.routingType,\n    companies: state.otp.currentQuery.companies,\n    tnc: state.otp.tnc\n  }\n}\n\nexport default connect(mapStateToProps)(TripDetails)\n"]}