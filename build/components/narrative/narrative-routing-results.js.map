{"version":3,"sources":["narrative-routing-results.js"],"names":["NarrativeRoutingResults","props","customIcons","itineraryClass","pending","routingType","Component","propTypes","PropTypes","object","func","string","mapStateToProps","state","ownProps","activeSearch","otp","query","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;IAEMA,uB;;;;;;;;;;6BAOM;AAAA,mBACsD,KAAKC,KAD3D;AAAA,UACAC,WADA,UACAA,WADA;AAAA,UACaC,cADb,UACaA,cADb;AAAA,UAC6BC,OAD7B,UAC6BA,OAD7B;AAAA,UACsCC,WADtC,UACsCA,WADtC;;AAER,UAAID,OAAJ,EAAa,OAAO,8BAAC,iBAAD,OAAP;;AAEb,aACEC,gBAAgB,WAAhB,GACI,8BAAC,2BAAD,IAAmB,gBAAgBF,cAAnC,GADJ,GAEI,8BAAC,iCAAD;AACA,wBAAgBA,cADhB;AAEA,qBAAaD;AAFb,QAHN;AAQD;;;EAnBmCI,gB,UAC7BC,S,GAAY;AACjBL,eAAaM,iBAAUC,MADN;AAEjBN,kBAAgBK,iBAAUE,IAFT;AAGjBL,eAAaG,iBAAUG;AAHN,C;;;AAqBrB,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,eAAe,4BAAgBF,MAAMG,GAAtB,CAArB;;AAEA,SAAO;AACLZ,aAASW,gBAAgBA,aAAaX,OADjC;AAELC,iBAAaU,gBAAgBA,aAAaE,KAAb,CAAmBZ;AAF3C,GAAP;AAID,CAPD;;AASA,IAAMa,qBAAqB,EAA3B;;kBAEe,yBAAQN,eAAR,EAAyBM,kBAAzB,EAA6ClB,uBAA7C,C","file":"narrative-routing-results.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { connect } from 'react-redux'\n\nimport Loading from './loading'\nimport NarrativeProfileOptions from './narrative-profile-options'\nimport TabbedItineraries from './tabbed-itineraries'\n\nimport { getActiveSearch } from '../../util/state'\n\nclass NarrativeRoutingResults extends Component {\n  static propTypes = {\n    customIcons: PropTypes.object,\n    itineraryClass: PropTypes.func,\n    routingType: PropTypes.string\n  }\n\n  render () {\n    const { customIcons, itineraryClass, pending, routingType } = this.props\n    if (pending) return <Loading />\n\n    return (\n      routingType === 'ITINERARY'\n        ? <TabbedItineraries itineraryClass={itineraryClass} />\n        : <NarrativeProfileOptions\n          itineraryClass={itineraryClass}\n          customIcons={customIcons}\n        />\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n\n  return {\n    pending: activeSearch && activeSearch.pending,\n    routingType: activeSearch && activeSearch.query.routingType\n  }\n}\n\nconst mapDispatchToProps = { }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NarrativeRoutingResults)\n"]}