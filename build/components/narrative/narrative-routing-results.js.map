{"version":3,"sources":["narrative-routing-results.js"],"names":["NarrativeRoutingResults","prevProps","itineraries","length","props","setMainPanelContent","error","itineraryClass","itineraryFooter","LegIcon","pending","mainPanelContent","Component","PropTypes","func","elementType","isRequired","routingType","string","mapStateToProps","state","ownProps","activeSearch","otp","ui","response","query","mapDispatchToProps"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IAEMA,uB;;;;;;;;;;;;;uCAOgBC,S,EAAW;AAC7B,UAAI,CAAC,CAACA,SAAS,CAACC,WAAX,IAA0BD,SAAS,CAACC,WAAV,CAAsBC,MAAtB,KAAiC,CAA5D,KACC,KAAKC,KAAL,CAAWF,WAAX,IAA0B,KAAKE,KAAL,CAAWF,WAAX,CAAuBC,MAAvB,GAAgC,CAD/D,EACmE;AACjE,aAAKC,KAAL,CAAWC,mBAAX,CAA+B,IAA/B;AACD;;AACD,UAAI,CAACJ,SAAS,CAACK,KAAX,IAAoB,KAAKF,KAAL,CAAWE,KAAnC,EAA0C,KAAKF,KAAL,CAAWC,mBAAX,CAA+B,IAA/B;AAC3C;;;6BAES;AAAA,wBAC4F,KAAKD,KADjG;AAAA,UACAE,KADA,eACAA,KADA;AAAA,UACOC,cADP,eACOA,cADP;AAAA,UACuBC,eADvB,eACuBA,eADvB;AAAA,UACwCC,OADxC,eACwCA,OADxC;AAAA,UACiDC,OADjD,eACiDA,OADjD;AAAA,UAC0DR,WAD1D,eAC0DA,WAD1D;AAAA,UACuES,gBADvE,eACuEA,gBADvE;AAER,UAAID,OAAJ,EAAa,OAAO,6BAAC,gBAAD,OAAP;AACb,UAAIJ,KAAJ,EAAW,OAAO,6BAAC,qBAAD,OAAP;AACX,UAAIK,gBAAJ,EAAsB,OAAO,IAAP;AAEtB,aACE;AACA,qCAAC,0BAAD;AACE,UAAA,cAAc,EAAEJ,cADlB;AAEE,UAAA,eAAe,EAAEC,eAFnB;AAGE,UAAA,WAAW,EAAEN,WAHf;AAIE,UAAA,OAAO,EAAEO;AAJX;AAFF;AASD;;;;EA9BmCG,gB;;gBAAhCZ,uB,eACe;AACjBO,EAAAA,cAAc,EAAEM,mBAAUC,IADT;AAEjBL,EAAAA,OAAO,EAAEI,mBAAUE,WAAV,CAAsBC,UAFd;AAGjBC,EAAAA,WAAW,EAAEJ,mBAAUK;AAHN,C;;AAgCrB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAMC,YAAY,GAAG,4BAAgBF,KAAK,CAACG,GAAtB,CAArB;AACA,SAAO;AACLZ,IAAAA,gBAAgB,EAAES,KAAK,CAACG,GAAN,CAAUC,EAAV,CAAab,gBAD1B;AAELL,IAAAA,KAAK,EAAEgB,YAAY,IAAIA,YAAY,CAACG,QAA7B,IAAyCH,YAAY,CAACG,QAAb,CAAsBnB,KAFjE;AAGLJ,IAAAA,WAAW,EAAE,iCAAqBkB,KAAK,CAACG,GAA3B,CAHR;AAILb,IAAAA,OAAO,EAAEY,YAAY,IAAIA,YAAY,CAACZ,OAJjC;AAKLO,IAAAA,WAAW,EAAEK,YAAY,IAAIA,YAAY,CAACI,KAAb,CAAmBT;AAL3C,GAAP;AAOD,CATD;;AAWA,IAAMU,kBAAkB,GAAG;AACzBtB,EAAAA,mBAAmB,EAAnBA;AADyB,CAA3B;;eAIe,yBAAQc,eAAR,EAAyBQ,kBAAzB,EAA6C3B,uBAA7C,C","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport Loading from './loading'\nimport TabbedItineraries from './tabbed-itineraries'\nimport ErrorMessage from '../form/error-message'\n\nimport { getActiveSearch, getActiveItineraries } from '../../util/state'\nimport { setMainPanelContent } from '../../actions/ui'\n\nclass NarrativeRoutingResults extends Component {\n  static propTypes = {\n    itineraryClass: PropTypes.func,\n    LegIcon: PropTypes.elementType.isRequired,\n    routingType: PropTypes.string\n  }\n\n  componentDidUpdate (prevProps) {\n    if ((!prevProps.itineraries || prevProps.itineraries.length === 0) &&\n        (this.props.itineraries && this.props.itineraries.length > 0)) {\n      this.props.setMainPanelContent(null)\n    }\n    if (!prevProps.error && this.props.error) this.props.setMainPanelContent(null)\n  }\n\n  render () {\n    const { error, itineraryClass, itineraryFooter, LegIcon, pending, itineraries, mainPanelContent } = this.props\n    if (pending) return <Loading />\n    if (error) return <ErrorMessage />\n    if (mainPanelContent) return null\n\n    return (\n      // TODO: If multiple routing types exist, do the check here.\n      <TabbedItineraries\n        itineraryClass={itineraryClass}\n        itineraryFooter={itineraryFooter}\n        itineraries={itineraries}\n        LegIcon={LegIcon}\n      />\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeSearch = getActiveSearch(state.otp)\n  return {\n    mainPanelContent: state.otp.ui.mainPanelContent,\n    error: activeSearch && activeSearch.response && activeSearch.response.error,\n    itineraries: getActiveItineraries(state.otp),\n    pending: activeSearch && activeSearch.pending,\n    routingType: activeSearch && activeSearch.query.routingType\n  }\n}\n\nconst mapDispatchToProps = {\n  setMainPanelContent\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NarrativeRoutingResults)\n"]}