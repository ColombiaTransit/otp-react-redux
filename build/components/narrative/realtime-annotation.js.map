{"version":3,"sources":["realtime-annotation.js"],"names":["RealtimeAnnotation","props","componentClass","realtimeEffects","toggleRealtime","useRealtime","innerContent","normalDuration","normalRoutes","map","route","idx","length","maxWidth","Component","propTypes","PropTypes","object","func","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;IAEqBA,kB;;;;;;;;;;6BAOT;AAAA,mBAC+D,KAAKC,KADpE;AAAA,UACDC,cADC,UACDA,cADC;AAAA,UACeC,eADf,UACeA,eADf;AAAA,UACgCC,cADhC,UACgCA,cADhC;AAAA,UACgDC,WADhD,UACgDA,WADhD;AAER;AACA;;AACA,UAAMC,eAAe;AAAA;AAAA,UAAK,WAAU,gBAAf;AACnB;AAAA;AAAA,YAAK,WAAU,SAAf;AACE;AAAA;AAAA;AACE,iDAAG,WAAU,0BAAb,GADF;AAAA;AAAA,WADF;AAIE;AAAA;AAAA;AACGD,0BACG;AAAA;AAAA,gBAAM,WAAU,OAAhB;AAAA;AAE2D,iBAF3D;AAGA;AAAA;AAAA;AAAI,0CAAeF,gBAAgBI,cAA/B,CAAJ;AAAA;AAAA,eAHA;AAAA;AAI4B,iBAJ5B;AAKCJ,8BAAgBK,YAAhB,CAA6BC,GAA7B,CAAiC,UAACC,KAAD,EAAQC,GAAR;AAAA,uBAChC;AAAA;AAAA,oBAAM,KAAKA,GAAX;AACE;AAAA;AAAA;AAAID;AAAJ,mBADF;AAEGP,kCAAgBK,YAAhB,CAA6BI,MAA7B,GAAsC,CAAtC,GAA0CD,GAA1C,IAAiD;AAFpD,iBADgC;AAAA,eAAjC,CALD;AAAA;AAAA,aADH,GAaG;AAAA;AAAA,gBAAM,WAAU,OAAhB;AAAA;AAAA;AAdN,WAJF;AAwBE;AAAA;AAAA;AACE;AAAC,oCAAD;AAAA;AACE,uBAAOT,mBAAmB,SAD5B,CACuC;AADvC,kBAEE,WAAU,iBAFZ;AAGE,yBAASE;AAHX;AAKGC,8CALH;AAAA;AAAA;AADF;AAxBF;AADmB,OAArB;;AAqCA,UAAIH,mBAAmB,SAAvB,EAAkC;AAChC,eAAO;AAAC,wCAAD;AAAA;AACL,qBAAQ,OADH;AAEL,uBAAU;AACV;AACA;AAJK,cAKL,SACE;AAAC,qCAAD;AAAA,gBAAS,OAAO,EAACW,UAAU,OAAX,EAAhB,EAAqC,IAAG,2BAAxC;AACGP;AADH,aANG;AAUL;AAAC,kCAAD;AAAA,cAAQ,SAAQ,MAAhB;AAAuB,iDAAG,WAAU,gCAAb;AAAvB;AAVK,SAAP;AAYD,OAbD,MAaO;AACL,eAAOA,YAAP;AACD;AACF;;;EAhE6CQ,gB,UACvCC,S,GAAY;AACjBZ,mBAAiBa,iBAAUC,MADV;AAEjBb,kBAAgBY,iBAAUE,IAFT;AAGjBb,eAAaW,iBAAUG;AAHN,C;kBADAnB,kB","file":"realtime-annotation.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { Button, OverlayTrigger, Popover } from 'react-bootstrap'\n\nimport { formatDuration } from '../../util/time'\n\nexport default class RealtimeAnnotation extends Component {\n  static propTypes = {\n    realtimeEffects: PropTypes.object,\n    toggleRealtime: PropTypes.func,\n    useRealtime: PropTypes.bool\n  }\n\n  render () {\n    const {componentClass, realtimeEffects, toggleRealtime, useRealtime} = this.props\n    // FIXME: there are some weird css things happening in desktop vs. mobile,\n    // so I removed the divs with classNames and opted for h4 and p for now\n    const innerContent = <div className='realtime-alert'>\n      <div className='content'>\n        <h3>\n          <i className='fa fa-exclamation-circle' /> Service update\n        </h3>\n        <p>\n          {useRealtime\n            ? <span className='small'>\n              Your trip results have been adjusted based on real-time\n              information. Under normal conditions, this trip would take{' '}\n              <b>{formatDuration(realtimeEffects.normalDuration)} </b>\n              using the following routes:{' '}\n              {realtimeEffects.normalRoutes.map((route, idx) => (\n                <span key={idx}>\n                  <b>{route}</b>\n                  {realtimeEffects.normalRoutes.length - 1 > idx && ', '}\n                </span>\n              ))}.\n            </span>\n            : <span className='small'>\n              Your trip results are currently being affected by service delays.\n              These delays do not factor into travel times shown below.\n            </span>\n          }\n        </p>\n        <div>\n          <Button\n            block={componentClass === 'popover'} // display as block in popover\n            className='toggle-realtime'\n            onClick={toggleRealtime}\n            >\n            {useRealtime ? `Ignore` : `Apply`} service delays\n          </Button>\n        </div>\n      </div>\n    </div>\n\n    if (componentClass === 'popover') {\n      return <OverlayTrigger\n        trigger='click'\n        placement='bottom'\n        // container={this}\n        // containerPadding={40}\n        overlay={\n          <Popover style={{maxWidth: '300px'}} id='popover-positioned-bottom'>\n            {innerContent}\n          </Popover>\n        }>\n        <Button bsStyle='link'><i className='fa fa-2x fa-exclamation-circle' /></Button>\n      </OverlayTrigger>\n    } else {\n      return innerContent\n    }\n  }\n}\n"]}